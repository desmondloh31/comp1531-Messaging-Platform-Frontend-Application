npm verb cli /import/kamen/3/cs1531/.nvm/versions/node/v18.14.2/bin/node /import/kamen/3/cs1531/.nvm/versions/node/v18.14.2/bin/npm
npm info using npm@9.6.1
npm info using node@v18.14.2
npm verb title npm run test course_tests/
npm verb argv "run" "test" "--loglevel" "verbose" "course_tests/"
npm verb logfile logs-max:10 dir:/import/cage/2/z5295293/.npm/_logs/2023-03-20T06_48_19_426Z-
npm verb logfile /import/cage/2/z5295293/.npm/_logs/2023-03-20T06_48_19_426Z-debug-0.log

> test
> jest course_tests/

npm http fetch GET 200 https://registry.npmjs.org/npm 22ms (cache hit)
FAIL course_tests/tests/channel_tests/channelInvite.test.js (5.036 s)
  ● Test inviting global owner 1

    expect(received).toContain(expected) // indexOf

    Expected value: 2
    Received array: [undefined, undefined]

      34 |   const allmems = channelDetail.allMembers.map(mem => mem.uId);
      35 |   expect(owners).toEqual(expect.not.arrayContaining([uIdBuzz]));
    > 36 |   expect(allmems).toContain(uIdBuzz);
         |                   ^
      37 | });
      38 |
      39 | test('Test inviting global owner 2', () => {

      at Object.toContain (course_tests/tests/channel_tests/channelInvite.test.js:36:19)

  ● Test inviting global owner 2

    expect(received).toContain(expected) // indexOf

    Expected value: 1
    Received array: [undefined, undefined]

      45 |   const allmems = channelDetail.allMembers.map(mem => mem.uId);
      46 |   expect(owners).toEqual(expect.not.arrayContaining([uIdWoody]));
    > 47 |   expect(allmems).toContain(uIdWoody);
         |                   ^
      48 | });
      49 |
      50 | test('Test invite from non channel member', () => {

      at Object.toContain (course_tests/tests/channel_tests/channelInvite.test.js:47:19)

PASS course_tests/tests/channel_tests/channelMessages.test.js
PASS course_tests/tests/auth_tests/authLogin.test.js
PASS course_tests/tests/other_tests/clear.test.js
FAIL course_tests/tests/channel_tests/channelDetails.test.js
  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"email": "blah1@email.com", "handleStr": "abcdefghijklmnopqrs", "nameFirst": "abcdefghij", "nameLast": "klmnopqrs", "uId": 3}
    Received array: [1, 3, 4]

      41 |       const expected1 = { uId: uId1, email: email1, nameFirst: first1, nameLast: last1, handleStr: handle1 };
      42 |       const expected2 = { uId: uId2, email: email2, nameFirst: first2, nameLast: last2, handleStr: handle2 };
    > 43 |       expect(chDeets.allMembers).toContainEqual(expected1);
         |                                  ^
      44 |       expect(chDeets.allMembers).toContainEqual(expected2);
      45 |     }
      46 |   );

      at toContainEqual (course_tests/tests/channel_tests/channelDetails.test.js:43:34)

  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"email": "blah1@email.com", "handleStr": "abcdefghijklmnopqrst", "nameFirst": "abcdefghij", "nameLast": "klmnopqrst", "uId": 3}
    Received array: [1, 3, 4]

      41 |       const expected1 = { uId: uId1, email: email1, nameFirst: first1, nameLast: last1, handleStr: handle1 };
      42 |       const expected2 = { uId: uId2, email: email2, nameFirst: first2, nameLast: last2, handleStr: handle2 };
    > 43 |       expect(chDeets.allMembers).toContainEqual(expected1);
         |                                  ^
      44 |       expect(chDeets.allMembers).toContainEqual(expected2);
      45 |     }
      46 |   );

      at toContainEqual (course_tests/tests/channel_tests/channelDetails.test.js:43:34)

  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"email": "blah1@email.com", "handleStr": "bcdefghjklmnopqrst", "nameFirst": "@bcdefgh!j", "nameLast": "klmn opqrst", "uId": 3}
    Received array: [1, 3, 4]

      41 |       const expected1 = { uId: uId1, email: email1, nameFirst: first1, nameLast: last1, handleStr: handle1 };
      42 |       const expected2 = { uId: uId2, email: email2, nameFirst: first2, nameLast: last2, handleStr: handle2 };
    > 43 |       expect(chDeets.allMembers).toContainEqual(expected1);
         |                                  ^
      44 |       expect(chDeets.allMembers).toContainEqual(expected2);
      45 |     }
      46 |   );

      at toContainEqual (course_tests/tests/channel_tests/channelDetails.test.js:43:34)

  ● Test handles generated correctly › Should behave correctly for duplicate names

    expect(received).toContainEqual(expected) // deep equality

    Expected value: {"email": "blah1@email.com", "handleStr": "abcdef0", "nameFirst": "abc", "nameLast": "def0", "uId": 3}
    Received array: [1, 3, 4]

      41 |       const expected1 = { uId: uId1, email: email1, nameFirst: first1, nameLast: last1, handleStr: handle1 };
      42 |       const expected2 = { uId: uId2, email: email2, nameFirst: first2, nameLast: last2, handleStr: handle2 };
    > 43 |       expect(chDeets.allMembers).toContainEqual(expected1);
         |                                  ^
      44 |       expect(chDeets.allMembers).toContainEqual(expected2);
      45 |     }
      46 |   );

      at toContainEqual (course_tests/tests/channel_tests/channelDetails.test.js:43:34)

FAIL course_tests/tests/channel_tests/channelJoin.test.js (5.023 s)
  ● Test global owner can join private channel

    TypeError: Cannot read properties of undefined (reading 'map')

      22 |   channelJoinV1(uIdWoody, chIdZerg);
      23 |   const chDeets = channelDetailsV1(uIdWoody, chIdZerg);
    > 24 |   const owners = chDeets.ownerMembers.map(mem => mem.uId);
         |                                       ^
      25 |   const allmems = chDeets.allMembers.map(mem => mem.uId);
      26 |   expect(owners).toEqual(expect.not.arrayContaining([uIdWoody]));
      27 |   expect(allmems).toContain(uIdWoody);

      at Object.map (course_tests/tests/channel_tests/channelJoin.test.js:24:39)

  ● Test global owner can join public channel

    expect(received).toContain(expected) // indexOf

    Expected value: 2
    Received array: [undefined, undefined]

      34 |   const allmems = chDeets.allMembers.map(mem => mem.uId);
      35 |   expect(owners).toEqual(expect.not.arrayContaining([uIdBuzz]));
    > 36 |   expect(allmems).toContain(uIdBuzz);
         |                   ^
      37 | });
      38 |
      39 | test('Test global member cant join private channel', () => {

      at Object.toContain (course_tests/tests/channel_tests/channelJoin.test.js:36:19)

FAIL course_tests/tests/channels_tests/channelsCreate.test.js (5.01 s)
  ● Test create channel successful › Created channel info in channel details

    expect(received).toContain(expected) // indexOf

    Expected value: 0
    Received array: [undefined]

      23 |       const owners = deets.ownerMembers.map(mem => mem.uId);
      24 |       const allmems = deets.allMembers.map(mem => mem.uId);
    > 25 |       expect(owners).toContain(uId);
         |                      ^
      26 |       expect(allmems).toContain(uId);
      27 |     }
      28 |   );

      at toContain (course_tests/tests/channels_tests/channelsCreate.test.js:25:22)

  ● Test create channel successful › Created channel info in channel details

    expect(received).toContain(expected) // indexOf

    Expected value: 0
    Received array: [undefined]

      23 |       const owners = deets.ownerMembers.map(mem => mem.uId);
      24 |       const allmems = deets.allMembers.map(mem => mem.uId);
    > 25 |       expect(owners).toContain(uId);
         |                      ^
      26 |       expect(allmems).toContain(uId);
      27 |     }
      28 |   );

      at toContain (course_tests/tests/channels_tests/channelsCreate.test.js:25:22)

PASS course_tests/tests/channels_tests/channelsList.test.js (5.036 s)
FAIL course_tests/tests/channels_tests/channelsListall.test.js (5.069 s)
  ● Test when no channels

    expect(received).toStrictEqual(expected) // deep equality

    Expected: []
    Received: undefined

      22 |   uIdBuzz = authRegisterV1('buzz.lightyear@starcommand.com', 'qazwsx@@', 'buzz', 'lightyear').authUserId;
      23 |   const res = channelsListAllV1(uIdBuzz).channels;
    > 24 |   expect(res).toStrictEqual([]);
         |               ^
      25 | });
      26 |
      27 | test('Test when one channel exists private', () => {

      at Object.toStrictEqual (course_tests/tests/channels_tests/channelsListall.test.js:24:15)

  ● Test when one channel exists private

    expect(received).toEqual(expected) // deep equality

    Expected: ArrayContaining [ObjectContaining {"channelId": 1, "name": "zergs lair"}]
    Received: undefined

      28 |   const res = channelsListAllV1(uIdWoody).channels;
      29 |   const channelDetail = { channelId: chIdZerg, name: 'zergs lair' };
    > 30 |   expect(res).toEqual(
         |               ^
      31 |     expect.arrayContaining([
      32 |       expect.objectContaining(channelDetail)
      33 |     ])

      at Object.toEqual (course_tests/tests/channels_tests/channelsListall.test.js:30:15)

  ● Test when one channel exists public

    expect(received).toEqual(expected) // deep equality

    Expected: ArrayContaining [ObjectContaining {"channelId": 0, "name": "woodys toybox"}]
    Received: undefined

      38 |   const res = channelsListAllV1(uIdZerg).channels;
      39 |   const channelDetail = { channelId: chIdWoody, name: 'woodys toybox' };
    > 40 |   expect(res).toEqual(
         |               ^
      41 |     expect.arrayContaining([
      42 |       expect.objectContaining(channelDetail)
      43 |     ])

      at Object.toEqual (course_tests/tests/channels_tests/channelsListall.test.js:40:15)

  ● Test when multiple channels exist

    TypeError: Cannot read properties of undefined (reading 'sort')

      52 |   const res = channelsListAllV1(uIdBuzz).channels;
      53 |   // sort according to channelId values
    > 54 |   res.sort((a, b) => (a.channelId - b.channelId));
         |       ^
      55 |   expectedChannels.sort((a, b) => (a.channelId - b.channelId));
      56 |   expect(res).toStrictEqual(expectedChannels);
      57 | });

      at Object.sort (course_tests/tests/channels_tests/channelsListall.test.js:54:7)

FAIL course_tests/tests/auth_tests/authRegister.test.js (5.272 s)
  ● Test duplicate email register

    expect(received).toStrictEqual(expected) // deep equality

    - Expected  - 1
    + Received  + 1

      Object {
    -   "error": Any<String>,
    +   "authUserId": 1,
      }

      62 |   authRegisterV1('blah@email.com', 'password1', 'name-first-a', 'name-last-a');
      63 |   const result = authRegisterV1('blah@email.com', 'password1', 'name-first-a', 'name-last-a');
    > 64 |   expect(result).toStrictEqual({ error: expect.any(String) });
         |                  ^
      65 | });
      66 |
      67 | test('Test duplicate handles generated correctly', () => {

      at Object.toStrictEqual (course_tests/tests/auth_tests/authRegister.test.js:64:18)

  ● Test duplicate handles generated correctly

    ReferenceError: getData is not defined

      1 | export function userProfileV1(authUserID, uId) {
      2 |
    > 3 |     const data = getData();
        |                  ^
      4 |     
      5 |     const user = data.users.find(i => i.authUserId === authUserId);
      6 |     const guest = data.users.find(i => i.authUserId === uId);

      at getData (src/users.js:3:18)
      at Object.<anonymous> (course_tests/tests/auth_tests/authRegister.test.js:70:32)

FAIL course_tests/tests/user_tests/userProfile.test.js (5.098 s)
  ● Test valid user profile

    ReferenceError: getData is not defined

      1 | export function userProfileV1(authUserID, uId) {
      2 |
    > 3 |     const data = getData();
        |                  ^
      4 |     
      5 |     const user = data.users.find(i => i.authUserId === authUserId);
      6 |     const guest = data.users.find(i => i.authUserId === uId);

      at getData (src/users.js:3:18)
      at Object.<anonymous> (course_tests/tests/user_tests/userProfile.test.js:17:28)

  ● Test invalid uID user profile

    ReferenceError: getData is not defined

      1 | export function userProfileV1(authUserID, uId) {
      2 |
    > 3 |     const data = getData();
        |                  ^
      4 |     
      5 |     const user = data.users.find(i => i.authUserId === authUserId);
      6 |     const guest = data.users.find(i => i.authUserId === uId);

      at getData (src/users.js:3:18)
      at Object.<anonymous> (course_tests/tests/user_tests/userProfile.test.js:23:28)

  ● Test invalid authUserId user profile

    ReferenceError: getData is not defined

      1 | export function userProfileV1(authUserID, uId) {
      2 |
    > 3 |     const data = getData();
        |                  ^
      4 |     
      5 |     const user = data.users.find(i => i.authUserId === authUserId);
      6 |     const guest = data.users.find(i => i.authUserId === uId);

      at getData (src/users.js:3:18)
      at Object.<anonymous> (course_tests/tests/user_tests/userProfile.test.js:29:28)

Test Suites: 7 failed, 4 passed, 11 total
Tests:       19 failed, 43 passed, 62 total
Snapshots:   0 total
Time:        7.452 s
Ran all test suites matching /course_tests\//i.
npm notice 
npm notice New patch version of npm available! 9.6.1 -> 9.6.2
npm notice Changelog: <https://github.com/npm/cli/releases/tag/v9.6.2>
npm notice Run `npm install -g npm@9.6.2` to update!
npm notice 
npm verb exit 1
npm verb code 1
