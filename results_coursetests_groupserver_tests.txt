============================= test session starts ==============================
platform linux -- Python 3.9.2, pytest-6.2.2, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/import/cage/2/z5295293/CS1531/h09b_dream/project-automarking/tempstore/.hypothesis/examples')
rootdir: /import/cage/2/z5295293/CS1531/h09b_dream/project-automarking/tempstore
plugins: hypothesis-6.1.1, timeout-1.4.2, flask-0.15.1
collecting ... collected 290 items

httpTests/adminTests/test_admin_user_remove.py::testOnceRemovedUserCantDoAnything FAILED [  0%]
httpTests/adminTests/test_admin_user_remove.py::testMessagesAfterUserRemovalCorrectFormat PASSED [  0%]
httpTests/adminTests/test_admin_user_remove.py::testRemovedProfileStillFetchableWithUserProfile FAILED [  1%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromChannel PASSED [  1%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromDm PASSED [  1%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalNotInUsersAll FAILED [  2%]
httpTests/adminTests/test_admin_user_remove.py::testEmailReusable PASSED [  2%]
httpTests/adminTests/test_admin_user_remove.py::testHandleReusable PASSED [  2%]
httpTests/adminTests/test_admin_user_remove.py::testInvalidUser FAILED   [  3%]
httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveLastOwner FAILED [  3%]
httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveUserNonowner FAILED [  3%]
httpTests/adminTests/test_admin_user_remove.py::testInvalidToken FAILED  [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testSuccessfulPermissionChange FAILED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testCannotDemoteLastOwner FAILED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testCannotPromoteOwner FAILED [  5%]
httpTests/adminTests/test_admin_userpermission_change.py::testNonownerCantChangePermissions FAILED [  5%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidUser FAILED [  5%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidPermission FAILED [  6%]
httpTests/adminTests/test_admin_userpermission_change.py::testSamePermission FAILED [  6%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidToken FAILED [  6%]
httpTests/authTests/test_auth_login.py::testSuccessfulLogin PASSED       [  7%]
httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions FAILED    [  7%]
httpTests/authTests/test_auth_login.py::testUnregisteredUser PASSED      [  7%]
httpTests/authTests/test_auth_login.py::testRegisteredButIncorrectPassword PASSED [  8%]
httpTests/authTests/test_auth_logout.py::testSuccessfulLogout PASSED     [  8%]
httpTests/authTests/test_auth_logout.py::testForbidden403WhenAlreadyLoggedOut FAILED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[@gmail.com] PASSED [  9%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob] PASSED  [  9%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob@bob@bob.com] PASSED [ 10%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[12345] PASSED [ 10%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[] PASSED  [ 10%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[] PASSED [ 11%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [ 11%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[] PASSED  [ 11%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] PASSED [ 12%]
httpTests/authTests/test_auth_register.py::testDuplicateEmail PASSED     [ 12%]
httpTests/authTests/test_auth_register.py::testRemovedUserName PASSED    [ 12%]
httpTests/authTests/test_auth_register.py::testSuccessfulRegistration PASSED [ 13%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] PASSED [ 13%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] PASSED [ 13%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] FAILED [ 14%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] FAILED [ 14%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] FAILED [ 14%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] FAILED [ 15%]
httpTests/authTests/test_passwordreset_request.py::testReturnFormatCorrect FAILED [ 15%]
httpTests/authTests/test_passwordreset_request.py::testPasswordRequestLogsOutEverywhere FAILED [ 15%]
httpTests/authTests/test_passwordreset_reset.py::testInvalidPassword PASSED [ 16%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember PASSED [ 16%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerMemberCanAddowner FAILED [ 16%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCantAddownerWhenNonMember PASSED [ 17%]
httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner FAILED [ 17%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate FAILED [ 17%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic FAILED [ 18%]
httpTests/channelTests/test_channel_addowner.py::testMemberCannotAddOwner PASSED [ 18%]
httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner PASSED [ 18%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId FAILED [ 19%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidChannelId PASSED [ 19%]
httpTests/channelTests/test_channel_addowner.py::testInvalidToken FAILED [ 20%]
httpTests/channelTests/test_channel_details.py::testMemberSuccessful PASSED [ 20%]
httpTests/channelTests/test_channel_details.py::testNonMemberNotSuccessful PASSED [ 20%]
httpTests/channelTests/test_channel_details.py::testInvalidChannelId PASSED [ 21%]
httpTests/channelTests/test_channel_details.py::testInvalidToken FAILED  [ 21%]
httpTests/channelTests/test_channel_invite.py::testDuplicateInvite PASSED [ 21%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalOwner PASSED [ 22%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalMember PASSED [ 22%]
httpTests/channelTests/test_channel_invite.py::testInvitationFromNonChannelMember PASSED [ 22%]
httpTests/channelTests/test_channel_invite.py::testChannelIdInvalid PASSED [ 23%]
httpTests/channelTests/test_channel_invite.py::testUIdInvalid PASSED     [ 23%]
httpTests/channelTests/test_channel_invite.py::testInvalidatedToken FAILED [ 23%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPublic PASSED [ 24%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate FAILED [ 24%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberJoinPublic PASSED [ 24%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberCantJoinPrivate PASSED [ 25%]
httpTests/channelTests/test_channel_join.py::testAlreadyJoinedChannel PASSED [ 25%]
httpTests/channelTests/test_channel_join.py::testJoinInvalidChannelId PASSED [ 25%]
httpTests/channelTests/test_channel_join.py::testInvalidatedToken FAILED [ 26%]
httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully PASSED [ 26%]
httpTests/channelTests/test_channel_leave.py::testLeaveChannelWhenNotMember PASSED [ 26%]
httpTests/channelTests/test_channel_leave.py::testInvalidChannelId PASSED [ 27%]
httpTests/channelTests/test_channel_leave.py::testInvalidToken FAILED    [ 27%]
httpTests/channelTests/test_channel_messages.py::testMessageTimestamp FAILED [ 27%]
httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent FAILED [ 28%]
httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent FAILED [ 28%]
httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected PASSED [ 28%]
httpTests/channelTests/test_channel_messages.py::testRemovalByDeletionReflected PASSED [ 29%]
httpTests/channelTests/test_channel_messages.py::testBadRequest400WhenStartGreaterThanMessageNum PASSED [ 29%]
httpTests/channelTests/test_channel_messages.py::testForbidden403WhenUserIsNonMember PASSED [ 30%]
httpTests/channelTests/test_channel_messages.py::testBadRequest400WhenChannelIdInvalid PASSED [ 30%]
httpTests/channelTests/test_channel_messages.py::testForbidden403WhenInvalidTokenGiven FAILED [ 30%]
httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner PASSED [ 31%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner FAILED [ 31%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner PASSED [ 31%]
httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner PASSED [ 32%]
httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner PASSED [ 32%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner FAILED [ 32%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner FAILED [ 33%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveNonOwner PASSED [ 33%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidUId FAILED [ 33%]
httpTests/channelTests/test_channel_removeowner.py::testWithInvalidChannelId PASSED [ 34%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken FAILED [ 34%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[True-andys room] PASSED [ 34%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[False-andys room] PASSED [ 35%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-] PASSED [ 35%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 35%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-] PASSED [ 36%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 36%]
httpTests/channels_tests/test_channels_create.py::testInvalidatedToken FAILED [ 36%]
httpTests/channels_tests/test_channels_list.py::testWhenInNoChannels PASSED [ 37%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[True-andy] PASSED [ 37%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[False-andy] PASSED [ 37%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-True-ZERG-andy] PASSED [ 38%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-False-ZERG-andy] PASSED [ 38%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-True-ZERG-andy] PASSED [ 38%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-False-ZERG-andy] PASSED [ 39%]
httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel PASSED [ 39%]
httpTests/channels_tests/test_channels_list.py::testInvalidatedToken FAILED [ 40%]
httpTests/channels_tests/test_channels_listall.py::testWhenNoChannels PASSED [ 40%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPrivate PASSED [ 40%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPublic PASSED [ 41%]
httpTests/channels_tests/test_channels_listall.py::testWhenMultipleChannelsExist PASSED [ 41%]
httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken FAILED [ 41%]
httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation FAILED     [ 42%]
httpTests/dmTests/test_dm_create.py::testDmNameCreationSingle PASSED     [ 42%]
httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple PASSED   [ 42%]
httpTests/dmTests/test_dm_create.py::testDmToInvalidUsers FAILED         [ 43%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButOneInvalid FAILED   [ 43%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButDuplicate FAILED    [ 43%]
httpTests/dmTests/test_dm_create.py::testInvalidToken FAILED             [ 44%]
httpTests/dmTests/test_dm_details.py::testMemberSuccessful PASSED        [ 44%]
httpTests/dmTests/test_dm_details.py::testNonMemberNotSuccessful PASSED  [ 44%]
httpTests/dmTests/test_dm_details.py::testInvalidDmId PASSED             [ 45%]
httpTests/dmTests/test_dm_details.py::testInvalidToken FAILED            [ 45%]
httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully PASSED [ 45%]
httpTests/dmTests/test_dm_leave.py::testLeaveDmWhenNotMember PASSED      [ 46%]
httpTests/dmTests/test_dm_leave.py::testInvalidDmId PASSED               [ 46%]
httpTests/dmTests/test_dm_leave.py::testInvalidToken FAILED              [ 46%]
httpTests/dmTests/test_dm_list.py::testWhenInNoDms PASSED                [ 47%]
httpTests/dmTests/test_dm_list.py::testWhenInOneDm FAILED                [ 47%]
httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms FAILED          [ 47%]
httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm PASSED           [ 48%]
httpTests/dmTests/test_dm_list.py::testInvalidatedToken FAILED           [ 48%]
httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent FAILED [ 48%]
httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent FAILED  [ 49%]
httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected FAILED [ 49%]
httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected FAILED [ 50%]
httpTests/dmTests/test_dm_messages.py::testBadRequest400WhenStartGreaterThanMessageNum PASSED [ 50%]
httpTests/dmTests/test_dm_messages.py::testForbidden403WhenUserIsNonMember PASSED [ 50%]
httpTests/dmTests/test_dm_messages.py::testBadRequest400WhenDmIdInvalid PASSED [ 51%]
httpTests/dmTests/test_dm_messages.py::testForbidden403WhenInvalidTokenGiven FAILED [ 51%]
httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval PASSED      [ 51%]
httpTests/dmTests/test_dm_remove.py::testRemovalRemovesMessages FAILED   [ 52%]
httpTests/dmTests/test_dm_remove.py::testNonownerCannotRemoveDm PASSED   [ 52%]
httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm FAILED [ 52%]
httpTests/dmTests/test_dm_remove.py::testInvalidDmId PASSED              [ 53%]
httpTests/dmTests/test_dm_remove.py::testInvalidToken FAILED             [ 53%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel PASSED [ 53%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm PASSED [ 54%]
httpTests/messageTests/test_message_edit.py::testOwnerCanEditMembersMessageChannel FAILED [ 54%]
httpTests/messageTests/test_message_edit.py::testOwnerCanEditMembersMessageDm FAILED [ 54%]
httpTests/messageTests/test_message_edit.py::testGlobalOwnerCanEditMembersMessageChannel FAILED [ 55%]
httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm PASSED [ 55%]
httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage PASSED [ 55%]
httpTests/messageTests/test_message_edit.py::testInvalidMessageLength PASSED [ 56%]
httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage PASSED [ 56%]
httpTests/messageTests/test_message_edit.py::testNonownerNonposterCantEdit PASSED [ 56%]
httpTests/messageTests/test_message_edit.py::testInvalidToken FAILED     [ 57%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUnique PASSED [ 57%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUniqueIter3 FAILED [ 57%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinChannelOwnerInChannel FAILED [ 58%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinDmOwnerInDm FAILED [ 58%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinGlobalOwnerInChannel FAILED [ 58%]
httpTests/messageTests/test_message_pin.py::testInvalidMessageId PASSED  [ 59%]
httpTests/messageTests/test_message_pin.py::testCannotPinTwice PASSED    [ 59%]
httpTests/messageTests/test_message_pin.py::testChannelMemberCantPin PASSED [ 60%]
httpTests/messageTests/test_message_pin.py::testDmMemberCantPin PASSED   [ 60%]
httpTests/messageTests/test_message_pin.py::testGlobalOwnerCantPinInDm PASSED [ 60%]
httpTests/messageTests/test_message_pin.py::testNonmemberCantPin FAILED  [ 61%]
httpTests/messageTests/test_message_pin.py::testInvalidToken PASSED      [ 61%]
httpTests/messageTests/test_message_react.py::testSuccessfulReactInChannel FAILED [ 61%]
httpTests/messageTests/test_message_react.py::testSuccessfulReactToDmMessage FAILED [ 62%]
httpTests/messageTests/test_message_react.py::testTwoSuccessfulReactsToChannelMessage FAILED [ 62%]
httpTests/messageTests/test_message_react.py::testInvalidMessageId PASSED [ 62%]
httpTests/messageTests/test_message_react.py::testInvalidReactId PASSED  [ 63%]
httpTests/messageTests/test_message_react.py::testCantReactTwice PASSED  [ 63%]
httpTests/messageTests/test_message_react.py::testNonmemberCannotReact FAILED [ 63%]
httpTests/messageTests/test_message_react.py::testInvalidToken PASSED    [ 64%]
httpTests/messageTests/test_message_remove.py::testOriginalPosterCanRemoveMessage PASSED [ 64%]
httpTests/messageTests/test_message_remove.py::testOwnerCanRemoveMembersMessage FAILED [ 64%]
httpTests/messageTests/test_message_remove.py::testGlobalOwnerCanRemoveMembersMessageChannel FAILED [ 65%]
httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm FAILED [ 65%]
httpTests/messageTests/test_message_remove.py::testCannotRemoveDeletedMessage PASSED [ 65%]
httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage PASSED [ 66%]
httpTests/messageTests/test_message_remove.py::testInvalidToken FAILED   [ 66%]
httpTests/messageTests/test_message_send.py::testValidMessage PASSED     [ 66%]
httpTests/messageTests/test_message_send.py::testNonmemberPost PASSED    [ 67%]
httpTests/messageTests/test_message_send.py::testInvalidChannel PASSED   [ 67%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[] PASSED [ 67%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 68%]
httpTests/messageTests/test_message_send.py::testInvalidToken FAILED     [ 68%]
httpTests/messageTests/test_message_senddm.py::testValidMessage PASSED   [ 68%]
httpTests/messageTests/test_message_senddm.py::testNonmemberPost PASSED  [ 69%]
httpTests/messageTests/test_message_senddm.py::testInvalidDm PASSED      [ 69%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[] PASSED [ 70%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 70%]
httpTests/messageTests/test_message_senddm.py::testInvalidToken FAILED   [ 70%]
httpTests/messageTests/test_message_sendlater.py::testValidFutureMessage FAILED [ 71%]
httpTests/messageTests/test_message_sendlater.py::testReturnsImmediately PASSED [ 71%]
httpTests/messageTests/test_message_sendlater.py::testInvalidReturnedIdUntilSent PASSED [ 71%]
httpTests/messageTests/test_message_sendlater.py::testNonmemberCannotSendlater PASSED [ 72%]
httpTests/messageTests/test_message_sendlater.py::testCannotTimeTravelAkaSendMessageInPast FAILED [ 72%]
httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[] FAILED [ 72%]
httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 73%]
httpTests/messageTests/test_message_sendlater.py::testInvalidChannel PASSED [ 73%]
httpTests/messageTests/test_message_sendlater.py::testInvalidToken FAILED [ 73%]
httpTests/messageTests/test_message_share.py::testSuccessfulShareToChannel PASSED [ 74%]
httpTests/messageTests/test_message_share.py::testSuccessfulShareToDm PASSED [ 74%]
httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[True] PASSED [ 74%]
httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[False] PASSED [ 75%]
httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedDm PASSED [ 75%]
httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedChannel PASSED [ 75%]
httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedChannel FAILED [ 76%]
httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedDm FAILED [ 76%]
httpTests/messageTests/test_message_share.py::testInvalidOgMessageId PASSED [ 76%]
httpTests/messageTests/test_message_share.py::testInvalidMessageLength PASSED [ 77%]
httpTests/messageTests/test_message_share.py::testShareToInvalidChannelId PASSED [ 77%]
httpTests/messageTests/test_message_share.py::testShareToInvalidDmId PASSED [ 77%]
httpTests/messageTests/test_message_share.py::testInvalidToken FAILED    [ 78%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinChannelOwnerInChannel FAILED [ 78%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinDmOwnerInDm FAILED [ 78%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinGlobalOwnerInChannel FAILED [ 79%]
httpTests/messageTests/test_message_unpin.py::testInvalidMessageId PASSED [ 79%]
httpTests/messageTests/test_message_unpin.py::testCannotUnpinTwice PASSED [ 80%]
httpTests/messageTests/test_message_unpin.py::testChannelMemberCantUnpin PASSED [ 80%]
httpTests/messageTests/test_message_unpin.py::testDmMemberCantUnpin PASSED [ 80%]
httpTests/messageTests/test_message_unpin.py::testGlobalOwnerCantUnpinInDm PASSED [ 81%]
httpTests/messageTests/test_message_unpin.py::testNonmemberCantUnpin FAILED [ 81%]
httpTests/messageTests/test_message_unpin.py::testInvalidToken PASSED    [ 81%]
httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactInChannel FAILED [ 82%]
httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactToDmMessage FAILED [ 82%]
httpTests/messageTests/test_message_unreact.py::testInvalidMessageId PASSED [ 82%]
httpTests/messageTests/test_message_unreact.py::testInvalidReactId PASSED [ 83%]
httpTests/messageTests/test_message_unreact.py::testCantUnreactTwice PASSED [ 83%]
httpTests/messageTests/test_message_unreact.py::testNonmemberCannotUnreact FAILED [ 83%]
httpTests/messageTests/test_message_unreact.py::testInvalidToken PASSED  [ 84%]
httpTests/otherTests/test_clear.py::testClearWorks FAILED                [ 84%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendTriggersNotification FAILED [ 84%]
httpTests/otherTests/test_notifications_get.py::testTagNotInChannel FAILED [ 85%]
httpTests/otherTests/test_notifications_get.py::testMultipleSameTagsOnlyOneNotification FAILED [ 85%]
httpTests/otherTests/test_notifications_get.py::testTagSelf FAILED       [ 85%]
httpTests/otherTests/test_notifications_get.py::testMultipleTags FAILED  [ 86%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSenddmTriggersNotification FAILED [ 86%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageEditTriggersNotification FAILED [ 86%]
httpTests/otherTests/test_search.py::testNoMatches FAILED                [ 87%]
httpTests/otherTests/test_search.py::testSingleMatch FAILED              [ 87%]
httpTests/otherTests/test_search.py::testCaseInsensitiveMatch FAILED     [ 87%]
httpTests/otherTests/test_search.py::testMultipleMatches FAILED          [ 88%]
httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll PASSED    [ 88%]
httpTests/otherTests/test_users_all.py::testInvalidToken FAILED          [ 88%]
httpTests/userTests/test_user_profile.py::testUserProfileValid PASSED    [ 89%]
httpTests/userTests/test_user_profile.py::testInvalidUser PASSED         [ 89%]
httpTests/userTests/test_user_profile.py::testInvalidToken FAILED        [ 90%]
httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange PASSED [ 90%]
httpTests/userTests/test_user_profile_setemail.py::testCannotChangeToTakenEmail PASSED [ 90%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidToken FAILED [ 91%]
httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange FAILED [ 91%]
httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle FAILED [ 91%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[] PASSED [ 92%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a] PASSED [ 92%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa] PASSED [ 92%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] PASSED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle] PASSED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle] FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken FAILED [ 94%]
httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName PASSED [ 94%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-] PASSED [ 94%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] PASSED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testInvalidToken FAILED [ 96%]
httpTests/userTests/test_user_profile_uploadphoto.py::testReturnFormatCorrect FAILED [ 96%]
httpTests/userTests/test_user_profile_uploadphoto.py::testCannotUploadNonJpeg FAILED [ 96%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[-1000-0-0-0] FAILED [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0--1000-0-0] FAILED [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0--1000-0] FAILED [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0-0--1000] FAILED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0-1000-1000] FAILED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testXEndLessThanStartValue FAILED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testYEndLessThanStartValue FAILED [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidUrl FAILED [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidToken FAILED [100%]

====== Marks recorded: 80.36 ======


=================================== FAILURES ===================================
______________________ testOnceRemovedUserCantDoAnything _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='975997973', handleStr='sheriffwoody')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='560498160', handleStr='lordzerg')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
ctx = None

    @iteration3
    def testOnceRemovedUserCantDoAnything(userWoody, userZerg, woodysPublicToybox, ctx):
        adminUserRemove(userWoody.token, userZerg.uId, ctx)
    
        with pytest.raises(Forbidden403):
>           authLogout(userZerg.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/adminTests/test_admin_user_remove.py:23: Failed
_______________ testRemovedProfileStillFetchableWithUserProfile ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='991897025', handleStr='sheriffwoody')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='913162240', handleStr='lordzerg')
ctx = None

    @iteration3
    def testRemovedProfileStillFetchableWithUserProfile(userWoody, userZerg, ctx):
        adminUserRemove(userWoody.token, userZerg.uId, ctx)
    
        profile = userProfile(userWoody.token, userZerg.uId, ctx)['user']
    
>       assert profile["nameFirst"] == 'Removed' and profile["nameLast"] == 'user'
E       AssertionError: assert ('Removed ' == 'Removed'
E         - Removed
E         + Removed 
E         ?        +)

httpTests/adminTests/test_admin_user_remove.py:44: AssertionError
___________________________ testRemovalNotInUsersAll ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='848162984', handleStr='sheriffwoody')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='705100204', handleStr='lordzerg')
ctx = None

    @iteration3
    def testRemovalNotInUsersAll(userWoody, userZerg, ctx):
        adminUserRemove(userWoody.token, userZerg.uId, ctx)
    
        users = usersAll(userWoody.token, ctx)['users']
    
>       assert userZerg.uId not in [u['uId'] for u in users]
E       AssertionError: assert 1 not in [0, 1]
E        +  where 1 = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='705100204', handleStr='lordzerg').uId

httpTests/adminTests/test_admin_user_remove.py:70: AssertionError
_______________________________ testInvalidUser ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='379678604', handleStr='sheriffwoody')
ctx = None

    @iteration3
    def testInvalidUser(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           adminUserRemove(userWoody.token, -1, ctx)

httpTests/adminTests/test_admin_user_remove.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
__________________________ testCannotRemoveLastOwner ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='203356841', handleStr='sheriffwoody')
ctx = None

    @iteration3
    def testCannotRemoveLastOwner(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           adminUserRemove(userWoody.token, userWoody.uId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/adminTests/test_admin_user_remove.py:95: Failed
_________________________ testCannotRemoveUserNonowner _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='767603107', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='874470255', handleStr='buzzlightyear')
ctx = None

    @iteration3
    def testCannotRemoveUserNonowner(userWoody, userBuzz, ctx):
        with pytest.raises(Forbidden403):
>           adminUserRemove(userBuzz.token, userWoody.uId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/adminTests/test_admin_user_remove.py:100: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='756911379', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='464640189', handleStr='buzzlightyear')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, userBuzz, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           adminUserRemove(userWoody.token, userBuzz.uId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/adminTests/test_admin_user_remove.py:106: Failed
________________________ testSuccessfulPermissionChange ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='670893086', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='441729983', handleStr='buzzlightyear')
ctx = None

    @iteration3
    def testSuccessfulPermissionChange(userWoody, userBuzz, ctx):
>       adminUserpermissionChange(userWoody.token, userBuzz.uId, Permissions.DREAMSOWNER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:25: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:155: Exception
__________________________ testCannotDemoteLastOwner ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='358568370', handleStr='sheriffwoody')
ctx = None

    @iteration3
    def testCannotDemoteLastOwner(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           adminUserpermissionChange(userWoody.token, userWoody.uId, Permissions.DREAMSMEMBER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:25: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:155: Exception
____________________________ testCannotPromoteOwner ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='938036305', handleStr='sheriffwoody')
ctx = None

    @iteration3
    def testCannotPromoteOwner(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           adminUserpermissionChange(userWoody.token, userWoody.uId, Permissions.DREAMSOWNER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:25: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:155: Exception
______________________ testNonownerCantChangePermissions _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='446221572', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='789064679', handleStr='buzzlightyear')
ctx = None

    @iteration3
    def testNonownerCantChangePermissions(userWoody, userBuzz, ctx):
        with pytest.raises(Forbidden403):
>           adminUserpermissionChange(userBuzz.token, userWoody.uId, Permissions.DREAMSMEMBER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:25: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:155: Exception
_______________________________ testInvalidUser ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='305408473', handleStr='sheriffwoody')
ctx = None

    @iteration3
    def testInvalidUser(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           adminUserpermissionChange(userWoody.token, -1, Permissions.DREAMSOWNER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:25: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:155: Exception
____________________________ testInvalidPermission _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='446112151', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='336332608', handleStr='buzzlightyear')
ctx = None

    @iteration3
    def testInvalidPermission(userWoody, userBuzz, ctx):
        with pytest.raises(BadRequest400):
>           adminUserpermissionChange(userWoody.token, userBuzz.uId, 1531, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:25: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:155: Exception
______________________________ testSamePermission ______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='702979993', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='971754206', handleStr='buzzlightyear')
ctx = None

    @iteration3
    def testSamePermission(userWoody, userBuzz, ctx):
        with pytest.raises(BadRequest400):
>           adminUserpermissionChange(userWoody.token, userBuzz.uId, Permissions.DREAMSMEMBER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:25: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:155: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='903673967', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='679838144', handleStr='buzzlightyear')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, userBuzz, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           adminUserpermissionChange(userWoody.token, userBuzz.uId, Permissions.DREAMSOWNER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:25: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:155: Exception
____________________________ testCanHaveTwoSessions ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='598898555', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.overrideMarks(2)
    def testCanHaveTwoSessions(userWoody, ctx):
        session2 = authLogin(userWoody.email, userWoody.password, ctx)
    
        # succeeds
        assert userProfile(session2['token'], userWoody.uId, ctx) == userProfile(userWoody.token, userWoody.uId, ctx)
    
        assert authLogout(session2['token'], ctx) == {}
    
        with pytest.raises(Forbidden403):
            # should now fail...
>           userProfile(session2['token'], userWoody.uId, ctx)

httpTests/authTests/test_auth_login.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
_____________________ testForbidden403WhenAlreadyLoggedOut _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='800727105', handleStr='sheriffwoody')
ctx = None

    def testForbidden403WhenAlreadyLoggedOut(userWoody, ctx):
        authLogout(userWoody.token, ctx)
    
        with pytest.raises(Forbidden403):
>           authLogout(userWoody.token, ctx)

httpTests/authTests/test_auth_logout.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
_ testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] _

first1 = 'abcdefghij', last1 = 'klmnopqrs', handle1 = 'abcdefghijklmnopqrs'
first2 = 'abcdefghij', last2 = 'klmnopqrs', handle2 = 'abcdefghijklmnopqrs0'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='224839287', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
        assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
    
        user2 = authRegister(email2, 'password1', first2, last2, ctx)
>       assert handle2 == userProfile(user2['token'], user2['authUserId'], ctx)['user']['handleStr']
E       AssertionError: assert 'abcdefghijklmnopqrs0' == 'abcdefghijklmnopqrs'
E         - abcdefghijklmnopqrs
E         + abcdefghijklmnopqrs0
E         ?                    +

httpTests/authTests/test_auth_register.py:99: AssertionError
_ testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] _

first1 = 'abcdefghij', last1 = 'klmnopqrst', handle1 = 'abcdefghijklmnopqrst'
first2 = 'abcdefghij', last2 = 'klmnopqrst', handle2 = 'abcdefghijklmnopqrst0'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='663397689', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
        assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
    
        user2 = authRegister(email2, 'password1', first2, last2, ctx)
>       assert handle2 == userProfile(user2['token'], user2['authUserId'], ctx)['user']['handleStr']
E       AssertionError: assert 'abcdefghijklmnopqrst0' == 'abcdefghijklmnopqrst'
E         - abcdefghijklmnopqrst
E         + abcdefghijklmnopqrst0
E         ?                     +

httpTests/authTests/test_auth_register.py:99: AssertionError
_ testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] _

first1 = '@bcdefgh!j', last1 = 'klmn opqrst', handle1 = 'bcdefghjklmnopqrst'
first2 = 'bcdefghj', last2 = 'klmnopqrst', handle2 = 'bcdefghjklmnopqrst0'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='568100746', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
>       assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
E       AssertionError: assert 'bcdefghjklmnopqrst' == '@bcdefgh!jklmn opqrs'
E         - @bcdefgh!jklmn opqrs
E         ? -       -     -
E         + bcdefghjklmnopqrst
E         ?                  +

httpTests/authTests/test_auth_register.py:96: AssertionError
___ testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] ___

first1 = 'abc', last1 = 'def0', handle1 = 'abcdef0', first2 = 'abc'
last2 = 'def', handle2 = 'abcdef1'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='883849093', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
        assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
    
        user2 = authRegister(email2, 'password1', first2, last2, ctx)
>       assert handle2 == userProfile(user2['token'], user2['authUserId'], ctx)['user']['handleStr']
E       AssertionError: assert 'abcdef1' == 'abcdef'
E         - abcdef
E         + abcdef1
E         ?       +

httpTests/authTests/test_auth_register.py:99: AssertionError
___________________________ testReturnFormatCorrect ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='398762114', handleStr='sheriffwoody')
ctx = None

    @iteration3
    def testReturnFormatCorrect(userWoody, ctx):
        assert authPasswordresetRequest(userWoody.email, ctx) == {}
>       assert authPasswordresetRequest("invalid@email.com", ctx) == {}

httpTests/authTests/test_passwordreset_request.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:46: in authPasswordresetRequest
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
_____________________ testPasswordRequestLogsOutEverywhere _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='203415068', handleStr='sheriffwoody')
ctx = None

    @iteration3
    def testPasswordRequestLogsOutEverywhere(userWoody, ctx):
        sess2 = authLogin(userWoody.email, userWoody.password, ctx)
    
        authPasswordresetRequest(userWoody.email, ctx)
    
        with pytest.raises(Forbidden403):
>           usersAll(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/authTests/test_passwordreset_request.py:29: Failed
_______________________ testGlobalOwnerMemberCanAddowner _______________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='126903184', handleStr='buzzlightyear')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[1], allMembers=[])
ctx = None

    def testGlobalOwnerMemberCanAddowner(userBuzz, woodysPublicToybox, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
>       channelAddowner(userBuzz.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:77: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
>           raise error.Forbidden403()
E           httpTests.error.Forbidden403: 403 Forbidden: None

httpTests/fakepi/util.py:153: Forbidden403
_________________________ testNonMemberCannotAddOwner __________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='835085423', handleStr='buzzlightyear')
ctx = None

    def testNonMemberCannotAddOwner(woodysPublicToybox, userBuzz, ctx):
        with pytest.raises(Forbidden403):
>           channelAddowner(userBuzz.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:77: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
_________________ testGlobalOwnerNonMemberCantAddownerPrivate __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='81668469', handleStr='sheriffwoody')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=0, ownerMembers=[1], allMembers=[])
ctx = None

    def testGlobalOwnerNonMemberCantAddownerPrivate(userWoody, zergsPrivateLair, ctx):
        with pytest.raises(Forbidden403):
>           channelAddowner(userWoody.token, zergsPrivateLair.channelId, userWoody.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:77: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
__________________ testGlobalOwnerNonMemberCantAddownerPublic __________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='188739785', handleStr='buzzlightyear')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[1], allMembers=[])
ctx = None

    def testGlobalOwnerNonMemberCantAddownerPublic(userBuzz, woodysPublicToybox, ctx):
        with pytest.raises(Forbidden403):
>           channelAddowner(userBuzz.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:77: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
______________________________ testWithInvalidUId ______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='658626032', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
ctx = None

    def testWithInvalidUId(userWoody, woodysPublicToybox, ctx):
        with pytest.raises(BadRequest400):
>           channelAddowner(userWoody.token, woodysPublicToybox.channelId, -1, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/channelTests/test_channel_addowner.py:71: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='157502076', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='351464898', handleStr='buzzlightyear')
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, userBuzz, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           channelAddowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/channelTests/test_channel_addowner.py:82: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='498608478', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           channelDetails(userWoody.token, woodysPublicToybox.channelId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/channelTests/test_channel_details.py:46: Failed
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='915454166', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='796194996', handleStr='buzzlightyear')
ctx = None

    def testInvalidatedToken(userWoody, woodysPublicToybox, userBuzz, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/channelTests/test_channel_invite.py:58: Failed
______________________ testGlobalOwnerJoinChannelPrivate _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='431267555', handleStr='sheriffwoody')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=0, ownerMembers=[1], allMembers=[])
ctx = None

    def testGlobalOwnerJoinChannelPrivate(userWoody, zergsPrivateLair, ctx):
>       channelJoin(userWoody.token, zergsPrivateLair.channelId, ctx)

httpTests/channelTests/test_channel_join.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:64: in channelJoin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
>           raise error.Forbidden403()
E           httpTests.error.Forbidden403: 403 Forbidden: None

httpTests/fakepi/util.py:153: Forbidden403
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='664535264', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
ctx = None

    def testInvalidatedToken(userWoody, woodysPublicToybox, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           channelJoin(userWoody.token, woodysPublicToybox.channelId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/channelTests/test_channel_join.py:59: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='22516268', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           channelLeave(userWoody.token, woodysPublicToybox.channelId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/channelTests/test_channel_leave.py:35: Failed
_____________________________ testMessageTimestamp _____________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='174209648', handleStr='sheriffwoody')
ctx = None

    def testMessageTimestamp(woodysPublicToybox, userWoody, ctx):
        expectedTime = utcNow()
        messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy', ctx)
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
>       assert abs(chMsgs['messages'][0]['timeSent'] - expectedTime) <= 2
E       assert 1680404291222 <= 2
E        +  where 1680404291222 = abs((1682086377599 - 1682086377))

httpTests/channelTests/test_channel_messages.py:19: AssertionError
__________________________ testUnderFiftyMessagesSent __________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='699324560', handleStr='sheriffwoody')
ctx = None

    def testUnderFiftyMessagesSent(woodysPublicToybox, userWoody, ctx):
        messageIds = [
            messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy', ctx)['messageId'] for x in
            range(10)
        ]
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
    
        assert chMsgs['start'] == 0
        assert chMsgs['end'] == -1
>       assert messageIds[::-1] == [m['messageId'] for m in chMsgs['messages']]
E       assert [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
E         At index 0 diff: 9 != 0
E         Full diff:
E         - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
E         + [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

httpTests/channelTests/test_channel_messages.py:32: AssertionError
__________________________ testOverFiftyMessagesSent ___________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='732710497', handleStr='sheriffwoody')
ctx = None

    def testOverFiftyMessagesSent(woodysPublicToybox, userWoody, ctx):
        messageIds = [
            messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy', ctx)['messageId'] for x in
            range(51)
        ]
        messageIds.reverse()
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
        assert chMsgs['start'] == 0
        assert chMsgs['end'] == 50
>       assert messageIds[0: 50] == [m['messageId'] for m in chMsgs['messages']]
E       assert [50,\n 49,\n 48,\n 47,\n 46,\n 45,\n 44,\n 43,\n 42,\n 41,\n 40,\n 39,\n 38,\n 37,\n 36,\n 35,\n 34,\n 33,\n 32,\n 31,\n 30,\n 29,\n 28,\n 27,\n 26,\n 25,\n 24,\n 23,\n 22,\n 21,\n 20,\n 19,\n 18,\n 17,\n 16,\n 15,\n 14,\n 13,\n 12,\n 11,\n 10,\n 9,\n 8,\n 7,\n 6,\n 5,\n 4,\n 3,\n 2,\n 1] == [0,\n 1,\n 2,\n 3,\n 4,\n 5,\n 6,\n 7,\n 8,\n 9,\n 10,\n 11,\n 12,\n 13,\n 14,\n 15,\n 16,\n 17,\n 18,\n 19,\n 20,\n 21,\n 22,\n 23,\n 24,\n 25,\n 26,\n 27,\n 28,\n 29,\n 30,\n 31,\n 32,\n 33,\n 34,\n 35,\n 36,\n 37,\n 38,\n 39,\n 40,\n 41,\n 42,\n 43,\n 44,\n 45,\n 46,\n 47,\n 48,\n 49]
E         At index 0 diff: 50 != 0
E         Full diff:
E           [
E         -  0,
E         +  50,
E         ?  +
E         +  49,
E         +  48,
E         +  47,
E         +  46,
E         +  45,
E         +  44,
E         +  43,
E         +  42,
E         +  41,
E         +  40,
E         +  39,
E         +  38,
E         +  37,
E         +  36,
E         +  35,
E         +  34,
E         +  33,
E         +  32,
E         +  31,
E         +  30,
E         +  29,
E         +  28,
E         +  27,
E         +  26,
E         +  25,
E         +  24,
E         +  23,
E         +  22,
E         +  21,
E         +  20,
E         +  19,
E         +  18,
E         +  17,
E         +  16,
E         +  15,
E         +  14,
E         +  13,
E         +  12,
E         +  11,
E         +  10,
E         +  9,
E         +  8,
E         +  7,
E         +  6,
E         +  5,
E         +  4,
E         +  3,
E         +  2,
E            1,
E         -  2,
E         -  3,
E         -  4,
E         -  5,
E         -  6,
E         -  7,
E         -  8,
E         -  9,
E         -  10,
E         -  11,
E         -  12,
E         -  13,
E         -  14,
E         -  15,
E         -  16,
E         -  17,
E         -  18,
E         -  19,
E         -  20,
E         -  21,
E         -  22,
E         -  23,
E         -  24,
E         -  25,
E         -  26,
E         -  27,
E         -  28,
E         -  29,
E         -  30,
E         -  31,
E         -  32,
E         -  33,
E         -  34,
E         -  35,
E         -  36,
E         -  37,
E         -  38,
E         -  39,
E         -  40,
E         -  41,
E         -  42,
E         -  43,
E         -  44,
E         -  45,
E         -  46,
E         -  47,
E         -  48,
E         -  49,
E           ]

httpTests/channelTests/test_channel_messages.py:45: AssertionError
____________________ testForbidden403WhenInvalidTokenGiven _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='144682729', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
ctx = None

    def testForbidden403WhenInvalidTokenGiven(userWoody, woodysPublicToybox, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/channelTests/test_channel_messages.py:101: Failed
______________________ testGlobalOwnerMmberCanRemoveOwner ______________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=0, token='53501223', handleStr='lordzerg')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='901263507', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[1], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='387270037', handleStr='buzzlightyear')
ctx = None

    def testGlobalOwnerMmberCanRemoveOwner(userZerg, userWoody, woodysPublicToybox, userBuzz, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userZerg.uId, ctx)
    
        channelAddowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
>       channelRemoveowner(userZerg.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:90: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
>           raise error.Forbidden403()
E           httpTests.error.Forbidden403: 403 Forbidden: None

httpTests/fakepi/util.py:153: Forbidden403
__________________________ testCannotRemoveLastOwner ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='439901302', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
ctx = None

    def testCannotRemoveLastOwner(userWoody, woodysPublicToybox, ctx):
        with pytest.raises(BadRequest400):
>           channelRemoveowner(userWoody.token, woodysPublicToybox.channelId, userWoody.uId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/channelTests/test_channel_removeowner.py:62: Failed
_____________________ testGlobalOwnerCannotRemoveOnlyOwner _____________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='794200708', handleStr='buzzlightyear')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='399055226', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[1], allMembers=[])
ctx = None

    def testGlobalOwnerCannotRemoveOnlyOwner(userBuzz, userWoody, woodysPublicToybox, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
        with pytest.raises(BadRequest400):
>           channelRemoveowner(userBuzz.token, woodysPublicToybox.channelId, userWoody.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:90: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
>           raise error.Forbidden403()
E           httpTests.error.Forbidden403: 403 Forbidden: None

httpTests/fakepi/util.py:153: Forbidden403
________________________________ testInvalidUId ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='444521509', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
ctx = None

    def testInvalidUId(userWoody, woodysPublicToybox, ctx):
        with pytest.raises(BadRequest400):
>           channelRemoveowner(userWoody.token, woodysPublicToybox.channelId, -1, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/channelTests/test_channel_removeowner.py:78: Failed
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='525243632', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='875542029', handleStr='buzzlightyear')
ctx = None

    def testInvalidatedToken(userWoody, woodysPublicToybox, userBuzz, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           channelRemoveowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/channelTests/test_channel_removeowner.py:89: Failed
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='534785293', handleStr='sheriffwoody')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           channelsCreate(userWoody.token, 'literally anything', True, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/channels_tests/test_channels_create.py:40: Failed
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='975987155', handleStr='sheriffwoody')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           channelsList(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/channels_tests/test_channels_list.py:53: Failed
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='402781030', handleStr='sheriffwoody')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           channelsListAll(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/channels_tests/test_channels_listall.py:44: Failed
___________________________ testSuccessfulDmCreation ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='301227184', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='6651898', handleStr='buzzlightyear')
ctx = None

    def testSuccessfulDmCreation(userWoody, userBuzz, ctx):
        aDm = dmCreate(userWoody.token, [userBuzz.uId], ctx)
    
        woodysDms = dmList(userWoody.token, ctx)
        buzzsDms = dmList(userBuzz.token, ctx)
    
>       assert woodysDms['dms'][0]['dmId'] == aDm['dmId']
E       IndexError: list index out of range

httpTests/dmTests/test_dm_create.py:20: IndexError
_____________________________ testDmToInvalidUsers _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='886491147', handleStr='sheriffwoody')
ctx = None

    def testDmToInvalidUsers(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           dmCreate(userWoody.token, [userWoody.uId + 1531, userWoody.uId + 6080, userWoody.uId + 6771], ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/dmTests/test_dm_create.py:39: Failed
__________________________ testDmToUsersButOneInvalid __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='532276956', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='97396546', handleStr='buzzlightyear')
ctx = None

    def testDmToUsersButOneInvalid(userWoody, userBuzz, ctx):
        with pytest.raises(BadRequest400):
>           dmCreate(userWoody.token, [userBuzz.uId, -1], ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/dmTests/test_dm_create.py:44: Failed
__________________________ testDmToUsersButDuplicate ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='180487602', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='774688475', handleStr='buzzlightyear')
ctx = None

    def testDmToUsersButDuplicate(userWoody, userBuzz, ctx):
        with pytest.raises(BadRequest400):
>           dmCreate(userWoody.token, [userBuzz.uId, userBuzz.uId], ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/dmTests/test_dm_create.py:49: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='149595118', handleStr='sheriffwoody')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           dmCreate(userWoody.token, [], ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/dmTests/test_dm_create.py:55: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='213376501', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testInvalidToken(userWoody, woodyAndBuzzDm, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           dmDetails(userWoody.token, woodyAndBuzzDm.dmId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/dmTests/test_dm_details.py:43: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='784800891', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testInvalidToken(userWoody, woodyAndBuzzDm, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           dmLeave(userWoody.token, woodyAndBuzzDm.dmId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/dmTests/test_dm_leave.py:37: Failed
_______________________________ testWhenInOneDm ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='936309138', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testWhenInOneDm(userWoody, woodyAndBuzzDm, ctx):
        dms = dmList(userWoody.token, ctx)
    
>       assert dms == {'dms': [{'name': woodyAndBuzzDm.name, 'dmId': woodyAndBuzzDm.dmId}]}
E       AssertionError: assert {'dms': []} == {'dms': [{'dmId': 0, 'name': 'buzzlightyear, sheriffwoody'}]}
E         Differing items:
E         {'dms': []} != {'dms': [{'dmId': 0, 'name': 'buzzlightyear, sheriffwoody'}]}
E         Full diff:
E         - {'dms': [{'dmId': 0, 'name': 'buzzlightyear, sheriffwoody'}]}
E         + {'dms': []}

httpTests/dmTests/test_dm_list.py:21: AssertionError
____________________________ testWhenInMultipleDms _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='610078666', handleStr='sheriffwoody')
dmFactory = <function dmFactory.<locals>.makeDm at 0x7fac6d989160>, ctx = None

    def testWhenInMultipleDms(userWoody, dmFactory, ctx):
        dm_1 = dmFactory(userWoody, [])
        dm_2 = dmFactory(userWoody, [])
    
        expected = [{'dmId': dm_1.dmId, 'name': dm_1.name}, {'dmId': dm_2.dmId, 'name': dm_2.name}]
        actual = dmList(userWoody.token, ctx)['dms']
    
>       assert sorted(actual, key=lambda d: d['dmId']) == sorted(expected, key=lambda d: d['dmId'])
E       AssertionError: assert [] == [{'dmId': 0, 'name': 'sheriffwoody'}, {'dmId': 1, 'name': 'sheriffwoody'}]
E         Right contains 2 more items, first extra item: {'dmId': 0, 'name': 'sheriffwoody'}
E         Full diff:
E         - [{'dmId': 0, 'name': 'sheriffwoody'}, {'dmId': 1, 'name': 'sheriffwoody'}]
E         + []

httpTests/dmTests/test_dm_list.py:31: AssertionError
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='784205936', handleStr='sheriffwoody')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           dmList(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/dmTests/test_dm_list.py:43: Failed
__________________________ testUnderFiftyMessagesSent __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='775573267', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testUnderFiftyMessagesSent(userWoody, woodyAndBuzzDm, ctx):
        messageIds = [
            messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy', ctx)['messageId'] for x in
            range(10)
        ]
    
        dmMsgs = dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
    
        assert dmMsgs['start'] == 0
        assert dmMsgs['end'] == -1
>       assert messageIds[::-1] == [m['messageId'] for m in dmMsgs['messages']]
E       assert [10, 9, 8, 7, 6, 5, 4, 3, 2, 1] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
E         At index 0 diff: 10 != 1
E         Full diff:
E         - [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
E         + [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

httpTests/dmTests/test_dm_messages.py:25: AssertionError
__________________________ testOverFiftyMessagesSent ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='702508639', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testOverFiftyMessagesSent(userWoody, woodyAndBuzzDm, ctx):
        messageIds = [
            messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy', ctx)['messageId'] for x in
            range(51)
        ]
        messageIds.reverse()
    
        dmMsgs = dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
        assert dmMsgs['start'] == 0
        assert dmMsgs['end'] == 50
>       assert messageIds[0: 50] == [m['messageId'] for m in dmMsgs['messages']]
E       assert [51,\n 50,\n 49,\n 48,\n 47,\n 46,\n 45,\n 44,\n 43,\n 42,\n 41,\n 40,\n 39,\n 38,\n 37,\n 36,\n 35,\n 34,\n 33,\n 32,\n 31,\n 30,\n 29,\n 28,\n 27,\n 26,\n 25,\n 24,\n 23,\n 22,\n 21,\n 20,\n 19,\n 18,\n 17,\n 16,\n 15,\n 14,\n 13,\n 12,\n 11,\n 10,\n 9,\n 8,\n 7,\n 6,\n 5,\n 4,\n 3,\n 2] == [1,\n 2,\n 3,\n 4,\n 5,\n 6,\n 7,\n 8,\n 9,\n 10,\n 11,\n 12,\n 13,\n 14,\n 15,\n 16,\n 17,\n 18,\n 19,\n 20,\n 21,\n 22,\n 23,\n 24,\n 25,\n 26,\n 27,\n 28,\n 29,\n 30,\n 31,\n 32,\n 33,\n 34,\n 35,\n 36,\n 37,\n 38,\n 39,\n 40,\n 41,\n 42,\n 43,\n 44,\n 45,\n 46,\n 47,\n 48,\n 49,\n 50]
E         At index 0 diff: 51 != 1
E         Full diff:
E           [
E         -  1,
E         +  51,
E         ?  +
E         +  50,
E         +  49,
E         +  48,
E         +  47,
E         +  46,
E         +  45,
E         +  44,
E         +  43,
E         +  42,
E         +  41,
E         +  40,
E         +  39,
E         +  38,
E         +  37,
E         +  36,
E         +  35,
E         +  34,
E         +  33,
E         +  32,
E         +  31,
E         +  30,
E         +  29,
E         +  28,
E         +  27,
E         +  26,
E         +  25,
E         +  24,
E         +  23,
E         +  22,
E         +  21,
E         +  20,
E         +  19,
E         +  18,
E         +  17,
E         +  16,
E         +  15,
E         +  14,
E         +  13,
E         +  12,
E         +  11,
E         +  10,
E         +  9,
E         +  8,
E         +  7,
E         +  6,
E         +  5,
E         +  4,
E         +  3,
E            2,
E         -  3,
E         -  4,
E         -  5,
E         -  6,
E         -  7,
E         -  8,
E         -  9,
E         -  10,
E         -  11,
E         -  12,
E         -  13,
E         -  14,
E         -  15,
E         -  16,
E         -  17,
E         -  18,
E         -  19,
E         -  20,
E         -  21,
E         -  22,
E         -  23,
E         -  24,
E         -  25,
E         -  26,
E         -  27,
E         -  28,
E         -  29,
E         -  30,
E         -  31,
E         -  32,
E         -  33,
E         -  34,
E         -  35,
E         -  36,
E         -  37,
E         -  38,
E         -  39,
E         -  40,
E         -  41,
E         -  42,
E         -  43,
E         -  44,
E         -  45,
E         -  46,
E         -  47,
E         -  48,
E         -  49,
E         -  50,
E           ]

httpTests/dmTests/test_dm_messages.py:38: AssertionError
__________________________ testRemovalByEditReflected __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='646790748', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testRemovalByEditReflected(userWoody, woodyAndBuzzDm, ctx):
        msg = messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy maybe?', ctx)['messageId']
    
        dmMsgs = dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
        assert dmMsgs['start'] == 0
        assert dmMsgs['end'] == -1
        assert msg in [m['messageId'] for m in dmMsgs['messages']]
    
>       messageEdit(userWoody.token, msg, '', ctx)

httpTests/dmTests/test_dm_messages.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:37: in messageEdit
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
________________________ testRemovalByDeletionReflected ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='224834853', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testRemovalByDeletionReflected(userWoody, woodyAndBuzzDm, ctx):
        msg = messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy maybe?', ctx)['messageId']
    
        chMsgs = dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
        assert chMsgs['start'] == 0
        assert chMsgs['end'] == -1
        assert msg in [m['messageId'] for m in chMsgs['messages']]
    
>       messageRemove(userWoody.token, msg, ctx)

httpTests/dmTests/test_dm_messages.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:24: in messageRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
____________________ testForbidden403WhenInvalidTokenGiven _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='788247425', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testForbidden403WhenInvalidTokenGiven(userWoody, woodyAndBuzzDm, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/dmTests/test_dm_messages.py:94: Failed
__________________________ testRemovalRemovesMessages __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='275786343', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d8a9820>
ctx = None

    @iteration3
    def testRemovalRemovesMessages(userWoody, woodyAndBuzzDm, messageFactory, ctx):
        messageFactory(userWoody, woodyAndBuzzDm, 'electric')
        messageFactory(userWoody, woodyAndBuzzDm, 'electric mouse')
        messageFactory(userWoody, woodyAndBuzzDm, 'electric house')
    
>       assert len(search(userWoody.token, 'electric', ctx)['messages']) == 3

httpTests/dmTests/test_dm_remove.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:46: in search
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
_______________________ testOwnerNonmemberCannotRemoveDm _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='314150729', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testOwnerNonmemberCannotRemoveDm(userWoody, woodyAndBuzzDm, ctx):
        dmLeave(userWoody.token, woodyAndBuzzDm.dmId, ctx)
        with pytest.raises(Forbidden403):
>           dmRemove(userWoody.token, woodyAndBuzzDm.dmId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/dmTests/test_dm_remove.py:42: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='820533668', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testInvalidToken(userWoody, woodyAndBuzzDm, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           dmRemove(userWoody.token, woodyAndBuzzDm.dmId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/dmTests/test_dm_remove.py:56: Failed
____________________ testOwnerCanEditMembersMessageChannel _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='232440071', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='125189332', handleStr='buzzlightyear')
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d810820>
ctx = None

    def testOwnerCanEditMembersMessageChannel(userWoody, woodysPublicToybox, userBuzz, messageFactory, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
        buzzsMsg = messageFactory(userBuzz, woodysPublicToybox)
    
>       messageEdit(userWoody.token, buzzsMsg.messageId, 'hi', ctx)

httpTests/messageTests/test_message_edit.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:37: in messageEdit
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
>           raise error.Forbidden403()
E           httpTests.error.Forbidden403: 403 Forbidden: None

httpTests/fakepi/util.py:153: Forbidden403
_______________________ testOwnerCanEditMembersMessageDm _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='620396795', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='437423565', handleStr='buzzlightyear')
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d7f3ca0>
ctx = None

    def testOwnerCanEditMembersMessageDm(userWoody, woodyAndBuzzDm, userBuzz, messageFactory, ctx):
        buzzsMsg = messageFactory(userBuzz, woodyAndBuzzDm)
    
>       messageEdit(userWoody.token, buzzsMsg.messageId, 'hi', ctx)

httpTests/messageTests/test_message_edit.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:37: in messageEdit
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
>           raise error.Forbidden403()
E           httpTests.error.Forbidden403: 403 Forbidden: None

httpTests/fakepi/util.py:153: Forbidden403
_________________ testGlobalOwnerCanEditMembersMessageChannel __________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=0, token='889528163', handleStr='lordzerg')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='713173893', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d8bf700>
ctx = None

    def testGlobalOwnerCanEditMembersMessageChannel(userZerg, userWoody, woodysPublicToybox, messageFactory, ctx):
        woodysMsg = messageFactory(userWoody, woodysPublicToybox)
        channelJoin(userZerg.token, woodysPublicToybox.channelId, ctx)
>       messageEdit(userZerg.token, woodysMsg.messageId, 'hi', ctx)

httpTests/messageTests/test_message_edit.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:37: in messageEdit
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
>           raise error.Forbidden403()
E           httpTests.error.Forbidden403: 403 Forbidden: None

httpTests/fakepi/util.py:153: Forbidden403
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='401434741', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d9891f0>
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           messageEdit(userWoody.token, aMsg.messageId, 'hi', ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/messageTests/test_message_edit.py:116: Failed
__________________________ testMessageIdsUniqueIter3 ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='657864449', handleStr='sheriffwoody')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='567958005', handleStr='lordzerg')
woodyAndBuzzDm = DM(owner=0, members=[2], name='buzzlightyear, sheriffwoody', dmId=0)
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=0, ownerMembers=[1], allMembers=[])
ctx = None

    @pytest.mark.marks(0.5)
    @iteration3
    def testMessageIdsUniqueIter3(userWoody, userZerg, woodyAndBuzzDm, zergsPrivateLair, ctx):
        msg1 = messageSend(userZerg.token, zergsPrivateLair.channelId, 'hi', ctx)
    
        # intra
        msg2 = messageSendlater(userZerg.token, zergsPrivateLair.channelId, 'hi', utcNow() + 1, ctx)
    
        # cross
        msg3 = messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'hi again', ctx)
        msg4 = messageSendlaterdm(userWoody.token, woodyAndBuzzDm.dmId, 'hi one more time', utcNow() + 1, ctx)
    
        sleep(2)
    
        assert msg1['messageId'] != msg2['messageId']
>       assert msg2['messageId'] != msg3['messageId']
E       assert 2 != 2

httpTests/messageTests/test_message_meta.py:36: AssertionError
____________________ testSuccessfulPinChannelOwnerInChannel ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='811495640', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d8e43a0>
ctx = None

    @iteration3
    def testSuccessfulPinChannelOwnerInChannel(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
    
        assert messagePin(userWoody.token, aMsg.messageId, ctx) == {}
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
    
        theMsg = chMsgs['messages'][0]
    
>       assert theMsg['isPinned']
E       KeyError: 'isPinned'

httpTests/messageTests/test_message_pin.py:26: KeyError
_________________________ testSuccessfulPinDmOwnerInDm _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='487555412', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d827dc0>
ctx = None

    @iteration3
    def testSuccessfulPinDmOwnerInDm(userWoody, woodyAndBuzzDm, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodyAndBuzzDm)
    
        assert messagePin(userWoody.token, aMsg.messageId, ctx) == {}
    
        dmMsgs = dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
    
        theMsg = dmMsgs['messages'][0]
    
>       assert theMsg['isPinned']
E       KeyError: 'isPinned'

httpTests/messageTests/test_message_pin.py:39: KeyError
____________________ testSuccessfulPinGlobalOwnerInChannel _____________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='865226651', handleStr='buzzlightyear')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='867700528', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d83e310>
ctx = None

    @iteration3
    def testSuccessfulPinGlobalOwnerInChannel(userBuzz, userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
    
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
>       assert messagePin(userBuzz.token, aMsg.messageId, ctx) == {}

httpTests/messageTests/test_message_pin.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:50: in messagePin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
>           raise error.Forbidden403()
E           httpTests.error.Forbidden403: 403 Forbidden: None

httpTests/fakepi/util.py:153: Forbidden403
_____________________________ testNonmemberCantPin _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='9870176', handleStr='sheriffwoody')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='922177689', handleStr='lordzerg')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d83ed30>
ctx = None

    @iteration3
    def testNonmemberCantPin(userWoody, userZerg, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        with pytest.raises(BadRequest400):
>           messagePin(userZerg.token, aMsg.messageId, ctx)

httpTests/messageTests/test_message_pin.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:50: in messagePin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
>           raise error.Forbidden403()
E           httpTests.error.Forbidden403: 403 Forbidden: None

httpTests/fakepi/util.py:153: Forbidden403
_________________________ testSuccessfulReactInChannel _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='206118855', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='774510071', handleStr='buzzlightyear')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d827430>
ctx = None

    @iteration3
    def testSuccessfulReactInChannel(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
        aMsg = messageFactory(userWoody, woodysPublicToybox)
    
        assert messageReact(userWoody.token, aMsg.messageId, REACT, ctx) == {}
    
>       woodysVw = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)['messages'][0]['reacts'][0]
E       KeyError: 'reacts'

httpTests/messageTests/test_message_react.py:26: KeyError
________________________ testSuccessfulReactToDmMessage ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='177966579', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='418759167', handleStr='buzzlightyear')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d81b430>
ctx = None

    @iteration3
    def testSuccessfulReactToDmMessage(userWoody, userBuzz, woodyAndBuzzDm, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodyAndBuzzDm)
    
>       assert messageReact(userWoody.token, aMsg.messageId, REACT, ctx) == {}

httpTests/messageTests/test_message_react.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:76: in messageReact
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
___________________ testTwoSuccessfulReactsToChannelMessage ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='522772522', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='998163112', handleStr='buzzlightyear')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d989040>
ctx = None

    @iteration3
    def testTwoSuccessfulReactsToChannelMessage(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
        aMsg = messageFactory(userWoody, woodysPublicToybox)
    
        assert messageReact(userWoody.token, aMsg.messageId, REACT, ctx) == {}
        assert messageReact(userBuzz.token, aMsg.messageId, REACT, ctx) == {}
    
>       woodysVw = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)['messages'][0]['reacts'][0]
E       KeyError: 'reacts'

httpTests/messageTests/test_message_react.py:60: KeyError
___________________________ testNonmemberCannotReact ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='476795919', handleStr='sheriffwoody')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='922191715', handleStr='lordzerg')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d7a61f0>
ctx = None

    @iteration3
    def testNonmemberCannotReact(userWoody, userZerg, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        with pytest.raises(BadRequest400):
>           messageReact(userZerg.token, aMsg.messageId, REACT, ctx)

httpTests/messageTests/test_message_react.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:76: in messageReact
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
>           raise error.Forbidden403()
E           httpTests.error.Forbidden403: 403 Forbidden: None

httpTests/fakepi/util.py:153: Forbidden403
_______________________ testOwnerCanRemoveMembersMessage _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='661487372', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='78263343', handleStr='buzzlightyear')
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d83e820>
ctx = None

    def testOwnerCanRemoveMembersMessage(userWoody, woodysPublicToybox, userBuzz, messageFactory, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
        buzzsMsg = messageFactory(userBuzz, woodysPublicToybox)
    
>       messageRemove(userWoody.token, buzzsMsg.messageId, ctx)

httpTests/messageTests/test_message_remove.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:24: in messageRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
>           raise error.Forbidden403()
E           httpTests.error.Forbidden403: 403 Forbidden: None

httpTests/fakepi/util.py:153: Forbidden403
________________ testGlobalOwnerCanRemoveMembersMessageChannel _________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=0, token='978096399', handleStr='lordzerg')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='834933', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d989550>
ctx = None

    def testGlobalOwnerCanRemoveMembersMessageChannel(userZerg, userWoody, woodysPublicToybox, messageFactory, ctx):
        woodysMsg = messageFactory(userWoody, woodysPublicToybox)
        channelJoin(userZerg.token, woodysPublicToybox.channelId, ctx)
>       messageRemove(userZerg.token, woodysMsg.messageId, ctx)

httpTests/messageTests/test_message_remove.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:24: in messageRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
>           raise error.Forbidden403()
E           httpTests.error.Forbidden403: 403 Forbidden: None

httpTests/fakepi/util.py:153: Forbidden403
__________________ testGlobalOwnerCantRemoveMembersMessageDm ___________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='735987099', handleStr='buzzlightyear')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='655987871', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=1, members=[0], name='buzzlightyear, sheriffwoody', dmId=0)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d827670>
ctx = None

    def testGlobalOwnerCantRemoveMembersMessageDm(userBuzz, userWoody, woodyAndBuzzDm, messageFactory, ctx):
        woodysMsg = messageFactory(userWoody, woodyAndBuzzDm)
        with pytest.raises(Forbidden403):
>           messageRemove(userBuzz.token, woodysMsg.messageId, ctx)

httpTests/messageTests/test_message_remove.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:24: in messageRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='568298455', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d792ca0>
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           messageRemove(userWoody.token, aMsg.messageId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/messageTests/test_message_remove.py:75: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='860966378', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
ctx = None

    def testInvalidToken(userWoody, woodysPublicToybox, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           messageSend(userWoody.token, woodysPublicToybox.channelId, 'Forbidden403 nooooooooo', ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/messageTests/test_message_send.py:44: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='769398267', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testInvalidToken(userWoody, woodyAndBuzzDm, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'Forbidden403 nooooooooo', ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/messageTests/test_message_senddm.py:45: Failed
____________________________ testValidFutureMessage ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='738005122', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
ctx = None

    @iteration3
    def testValidFutureMessage(userWoody, woodysPublicToybox, ctx):
        msgText = 'hello, world'
        tts = utcNow() + 2
        msg = messageSendlater(userWoody.token, woodysPublicToybox.channelId, msgText, tts, ctx)
    
        sleep(3)
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
    
        assert chMsgs['messages'][0]['messageId'] == msg['messageId']
        assert chMsgs['messages'][0]['message'] == msgText
    
>       assert abs(chMsgs['messages'][0]['timeSent'] - tts) <= 1
E       assert 1680404299615 <= 1
E        +  where 1680404299615 = abs((1682086386001 - 1682086386))

httpTests/messageTests/test_message_sendlater.py:29: AssertionError
___________________ testCannotTimeTravelAkaSendMessageInPast ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='786737208', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
ctx = None

    @iteration3
    def testCannotTimeTravelAkaSendMessageInPast(userWoody, woodysPublicToybox, ctx):
        # truly unfortunate
        then = utcNow() - 15
        with pytest.raises(BadRequest400):
>           messageSendlater(userWoody.token, woodysPublicToybox.channelId, 'hi', then, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/messageTests/test_message_sendlater.py:73: Failed
_____________________________ testInvalidMessage[] _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='938283699', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
message = '', ctx = None

    @iteration3
    @pytest.mark.parametrize('message', ['', 'm' * 1001])
    def testInvalidMessage(userWoody, woodysPublicToybox, message, ctx):
        with pytest.raises(BadRequest400):
>           messageSendlater(userWoody.token, woodysPublicToybox.channelId, message, utcNow() + 2, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/messageTests/test_message_sendlater.py:80: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='738255832', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
ctx = None

    @iteration3
    def testInvalidToken(userWoody, woodysPublicToybox, ctx):
        authLogout(userWoody.token, ctx)
    
        with pytest.raises(Forbidden403):
>           messageSendlater(userWoody.token, woodysPublicToybox.channelId, 'hi', utcNow() + 2, ctx)

httpTests/messageTests/test_message_sendlater.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:128: in messageSendlater
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
______________________ testCannotShareFromUnjoinedChannel ______________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=0, token='19465930', handleStr='lordzerg')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='787376651', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[1], allMembers=[])
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=1, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d8274c0>
ctx = None

    @iteration3
    def testCannotShareFromUnjoinedChannel(userZerg, userWoody, woodysPublicToybox, zergsPrivateLair, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        with pytest.raises(BadRequest400):
>           messageShare(userZerg.token, aMsg.messageId, 'lol', zergsPrivateLair.channelId, -1, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/messageTests/test_message_share.py:77: Failed
________________________ testCannotShareFromUnjoinedDm _________________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=0, token='395626146', handleStr='lordzerg')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='456785898', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dmId=0)
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d759280>
ctx = None

    @iteration3
    def testCannotShareFromUnjoinedDm(userZerg, userWoody, woodyAndBuzzDm, zergsPrivateLair, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodyAndBuzzDm)
        with pytest.raises(BadRequest400):
>           messageShare(userZerg.token, aMsg.messageId, 'lol',  zergsPrivateLair.channelId, -1, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/messageTests/test_message_share.py:84: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='996415328', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d76ef70>
ctx = None

    @iteration3
    def testInvalidToken(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           messageShare(userWoody.token, aMsg.messageId, '', woodysPublicToybox.channelId, -1, ctx)

httpTests/messageTests/test_message_share.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:102: in messageShare
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
___________________ testSuccessfulUnpinChannelOwnerInChannel ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='478673898', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d7c39d0>
ctx = None

    @iteration3
    def testSuccessfulUnpinChannelOwnerInChannel(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
    
        msgPin(userWoody.token, aMsg.messageId, ctx)
    
        assert messageUnpin(userWoody.token, aMsg.messageId, ctx) == {}
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
    
        theMsg = chMsgs['messages'][0]
    
>       assert not theMsg['isPinned']
E       KeyError: 'isPinned'

httpTests/messageTests/test_message_unpin.py:28: KeyError
________________________ testSuccessfulUnpinDmOwnerInDm ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='784364259', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d85cdc0>
ctx = None

    @iteration3
    def testSuccessfulUnpinDmOwnerInDm(userWoody, woodyAndBuzzDm, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodyAndBuzzDm)
    
        msgPin(userWoody.token, aMsg.messageId, ctx)
    
        assert messageUnpin(userWoody.token, aMsg.messageId, ctx) == {}
    
        dmMsgs = dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
    
        theMsg = dmMsgs['messages'][0]
    
>       assert not theMsg['isPinned']
E       KeyError: 'isPinned'

httpTests/messageTests/test_message_unpin.py:43: KeyError
___________________ testSuccessfulUnpinGlobalOwnerInChannel ____________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='456691375', handleStr='buzzlightyear')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='941315511', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d76d9d0>
ctx = None

    @iteration3
    def testSuccessfulUnpinGlobalOwnerInChannel(userBuzz, userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
    
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
>       msgPin(userBuzz.token, aMsg.messageId, ctx) == {}

httpTests/messageTests/test_message_unpin.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:50: in messagePin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
>           raise error.Forbidden403()
E           httpTests.error.Forbidden403: 403 Forbidden: None

httpTests/fakepi/util.py:153: Forbidden403
____________________________ testNonmemberCantUnpin ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='274318756', handleStr='sheriffwoody')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='755133914', handleStr='lordzerg')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d8e4940>
ctx = None

    @iteration3
    def testNonmemberCantUnpin(userWoody, userZerg, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        msgPin(userWoody.token, aMsg.messageId, ctx)
        with pytest.raises(BadRequest400):
>           messageUnpin(userZerg.token, aMsg.messageId, ctx)

httpTests/messageTests/test_message_unpin.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:63: in messageUnpin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
>           raise error.Forbidden403()
E           httpTests.error.Forbidden403: 403 Forbidden: None

httpTests/fakepi/util.py:153: Forbidden403
________________________ testSuccessfulUnreactInChannel ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='217868971', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='62838997', handleStr='buzzlightyear')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d8bfca0>
ctx = None

    @iteration3
    def testSuccessfulUnreactInChannel(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
        aMsg = messageFactory(userWoody, woodysPublicToybox)
    
        msgReact(userWoody.token, aMsg.messageId, REACT, ctx)
        msgReact(userBuzz.token, aMsg.messageId, REACT, ctx)
    
        assert messageUnreact(userWoody.token, aMsg.messageId, REACT, ctx) == {}
        assert messageUnreact(userBuzz.token, aMsg.messageId, REACT, ctx) == {}
    
>       woodysReacts = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)['messages'][0]['reacts']
E       KeyError: 'reacts'

httpTests/messageTests/test_message_unreact.py:31: KeyError
_______________________ testSuccessfulUnreactToDmMessage _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='760975586', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='333485189', handleStr='buzzlightyear')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d796c10>
ctx = None

    @iteration3
    def testSuccessfulUnreactToDmMessage(userWoody, userBuzz, woodyAndBuzzDm, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodyAndBuzzDm)
    
>       msgReact(userWoody.token, aMsg.messageId, REACT, ctx)

httpTests/messageTests/test_message_unreact.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:76: in messageReact
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
__________________________ testNonmemberCannotUnreact __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='673745221', handleStr='sheriffwoody')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='157214569', handleStr='lordzerg')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d83ed30>
ctx = None

    @iteration3
    def testNonmemberCannotUnreact(userWoody, userZerg, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        msgReact(userWoody.token, aMsg.messageId, REACT, ctx)
        with pytest.raises(BadRequest400):
>           messageUnreact(userZerg.token, aMsg.messageId, REACT, ctx)

httpTests/messageTests/test_message_unreact.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:89: in messageUnreact
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [403]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
>           raise error.Forbidden403()
E           httpTests.error.Forbidden403: 403 Forbidden: None

httpTests/fakepi/util.py:153: Forbidden403
________________________________ testClearWorks ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='124496690', handleStr='sheriffwoody')
userFactory = <function userFactory.<locals>.makeUser at 0x7fac6d83e550>
ctx = None

    def testClearWorks(userWoody, userFactory, ctx):
        # an existing user can do something
        assert usersAll(userWoody.token, ctx) is not None
    
        clear(ctx)
    
        with pytest.raises(Forbidden403):
            #  ex-existing user now can't do the original action because they don't exist
>           usersAll(userWoody.token, ctx)

httpTests/otherTests/test_clear.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:11: in usersAll
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
__________________ testTagThruMessageSendTriggersNotification __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='563818972', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='83446693', handleStr='buzzlightyear')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d83e820>
ctx = None

    @iteration3
    def testTagThruMessageSendTriggersNotification(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        content = f'@{userWoody.handleStr} hi'
        messageFactory(userBuzz, woodysPublicToybox, content)
    
>       notifs = notificationsGet(userWoody.token, ctx)

httpTests/otherTests/test_notifications_get.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:59: in notificationsGet
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
_____________________________ testTagNotInChannel ______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='668473742', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='794100219', handleStr='buzzlightyear')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d885ee0>
ctx = None

    @iteration3
    def testTagNotInChannel(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        content = f'@{userBuzz.handleStr} hi'
        messageFactory(userWoody, woodysPublicToybox, content)
    
>       notifs = notificationsGet(userBuzz.token, ctx)

httpTests/otherTests/test_notifications_get.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:59: in notificationsGet
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
___________________ testMultipleSameTagsOnlyOneNotification ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='570879810', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='85310256', handleStr='buzzlightyear')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d87f160>
ctx = None

    @iteration3
    def testMultipleSameTagsOnlyOneNotification(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        content = f'@{userWoody.handleStr} @{userWoody.handleStr} hi'
        messageFactory(userBuzz, woodysPublicToybox, content)
    
>       notifs = notificationsGet(userWoody.token, ctx)

httpTests/otherTests/test_notifications_get.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:59: in notificationsGet
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
_________________________________ testTagSelf __________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='553124790', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d7a61f0>
ctx = None

    @iteration3
    def testTagSelf(userWoody, woodysPublicToybox, messageFactory, ctx):
        content = f'@{userWoody.handleStr} hi'
        messageFactory(userWoody, woodysPublicToybox, content)
    
>       notifs = notificationsGet(userWoody.token, ctx)

httpTests/otherTests/test_notifications_get.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:59: in notificationsGet
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
_______________________________ testMultipleTags _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='370947930', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='140653487', handleStr='buzzlightyear')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=2, token='413691648', handleStr='lordzerg')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d8e2e50>
ctx = None

    @iteration3
    def testMultipleTags(userWoody, userBuzz, userZerg, woodysPublicToybox, messageFactory, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userZerg.uId, ctx)
    
        content = f'@{userWoody.handleStr} hi @{userZerg.handleStr}'
        messageFactory(userBuzz, woodysPublicToybox, content)
    
>       notifsWoody = notificationsGet(userWoody.token, ctx)

httpTests/otherTests/test_notifications_get.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:59: in notificationsGet
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
_________________ testTagThruMessageSenddmTriggersNotification _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='731506820', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='503839292', handleStr='buzzlightyear')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d8e2790>
ctx = None

    @iteration3
    def testTagThruMessageSenddmTriggersNotification(userWoody, userBuzz, woodyAndBuzzDm, messageFactory, ctx):
        content = f'@{userWoody.handleStr} hi'
        messageFactory(userBuzz, woodyAndBuzzDm, content)
    
>       notifs = notificationsGet(userWoody.token, ctx)

httpTests/otherTests/test_notifications_get.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:59: in notificationsGet
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
__________________ testTagThruMessageEditTriggersNotification __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='22511868', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='11697951', handleStr='buzzlightyear')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d83e3a0>
ctx = None

    @iteration3
    def testTagThruMessageEditTriggersNotification(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        aMsg = messageFactory(userBuzz, woodysPublicToybox)
    
        content = f'@{userWoody.handleStr} hi'
        messageEdit(userBuzz.token, aMsg.messageId, content, ctx)
    
>       notifs = notificationsGet(userWoody.token, ctx)

httpTests/otherTests/test_notifications_get.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:59: in notificationsGet
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
________________________________ testNoMatches _________________________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='154180660', handleStr='buzzlightyear')
ctx = None

    @iteration3
    def testNoMatches(userBuzz, ctx):
>       msgs = search(userBuzz.token, 'No matches', ctx)

httpTests/otherTests/test_search.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:46: in search
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
_______________________________ testSingleMatch ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='526966171', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d81c5e0>
ctx = None

    @iteration3
    def testSingleMatch(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox, 'anything')
    
>       msgs = search(userWoody.token, 'any', ctx)

httpTests/otherTests/test_search.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:46: in search
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
___________________________ testCaseInsensitiveMatch ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='498880847', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d989820>
ctx = None

    @iteration3
    def testCaseInsensitiveMatch(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox, 'AnYthing')
    
>       msgs = search(userWoody.token, 'aNy', ctx)

httpTests/otherTests/test_search.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:46: in search
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
_____________________________ testMultipleMatches ______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='351453498', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7fac6d81c820>
ctx = None

    @iteration3
    def testMultipleMatches(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox, 'any 1')
        anotherMsg = messageFactory(userWoody, woodysPublicToybox, 'any 2')
    
>       msgs = search(userWoody.token, 'any', ctx)

httpTests/otherTests/test_search.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:46: in search
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='214733185', handleStr='sheriffwoody')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           usersAll(userWoody.token, ctx)

httpTests/otherTests/test_users_all.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:11: in usersAll
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='275966648', handleStr='sheriffwoody')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           userProfile(userWoody.token, userWoody.uId, ctx)

httpTests/userTests/test_user_profile.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='418295599', handleStr='sheriffwoody')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           userProfileSetemail(userWoody.token, userWoody.email, ctx)

httpTests/userTests/test_user_profile_setemail.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:37: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
__________________________ testSuccessfulHandleChange __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='787426824', handleStr='sheriffwoody')
ctx = None

    def testSuccessfulHandleChange(userWoody, ctx):
        newHandle = 'www'
>       userProfileSethandle(userWoody.token, newHandle, ctx)

httpTests/userTests/test_user_profile_sethandle.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:50: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.BadRequest400()
E           httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:151: BadRequest400
________________________ testCannotChangeToTakenHandle _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='91717208', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='941459916', handleStr='buzzlightyear')
ctx = None

    def testCannotChangeToTakenHandle(userWoody, userBuzz, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSethandle(userWoody.token, userBuzz.handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/userTests/test_user_profile_sethandle.py:25: Failed
_________________________ testInvalidHandle[newh@ndle] _________________________

handleStr = 'newh@ndle'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='85637903', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSethandle(userWoody.token, handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/userTests/test_user_profile_sethandle.py:31: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='915471840', handleStr='sheriffwoody')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           userProfileSethandle(userWoody.token, userWoody.handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/userTests/test_user_profile_sethandle.py:37: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='92950203', handleStr='sheriffwoody')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           userProfileSetname(userWoody.token, userWoody.nameLast, userWoody.nameFirst, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.Forbidden403'>

httpTests/userTests/test_user_profile_setname.py:34: Failed
___________________________ testReturnFormatCorrect ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='74156805', handleStr='sheriffwoody')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testReturnFormatCorrect(userWoody, img, ctx):
>       assert userProfileUploadphoto(userWoody.token, img.url, img.xmin, img.ymin, img.xmax, img.ymax, ctx) == {}

httpTests/userTests/test_user_profile_uploadphoto.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
___________________________ testCannotUploadNonJpeg ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='928118814', handleStr='sheriffwoody')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testCannotUploadNonJpeg(userWoody, img, ctx):
        with pytest.raises(BadRequest400):
>           userProfileUploadphoto(userWoody.token, 'https://i.imgur.com/L0mzsun.png', img.xmin, img.ymin, img.xmax, img.ymax, ctx)

httpTests/userTests/test_user_profile_uploadphoto.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
______________________ testInvalidDimensions[-1000-0-0-0] ______________________

xminDiff = -1000, ymaxDiff = 0, xmaxDiff = 0, yminDiff = 0
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='623081133', handleStr='sheriffwoody')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    @pytest.mark.parametrize('xminDiff, yminDiff, xmaxDiff, ymaxDiff', [
        (-1000, 0, 0, 0),
        (0, -1000, 0, 0),
        (0, 0, -1000, 0),
        (0, 0, 0, -1000),
        (0, 0, 1000, 1000),
    ])
    def testInvalidDimensions(xminDiff, ymaxDiff, xmaxDiff, yminDiff, userWoody, img, ctx):
        with pytest.raises(BadRequest400):
            if xminDiff == yminDiff == xmaxDiff == ymaxDiff == 0:
                raise BadRequest400('lol this actually is valid')
            else:
>               userProfileUploadphoto(
                    userWoody.token,
                    img.url,
                    img.xmin + xminDiff,
                    img.ymin + yminDiff,
                    img.xmax + xmaxDiff,
                    img.ymax + ymaxDiff,
                    ctx
                )

httpTests/userTests/test_user_profile_uploadphoto.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
______________________ testInvalidDimensions[0--1000-0-0] ______________________

xminDiff = 0, ymaxDiff = 0, xmaxDiff = 0, yminDiff = -1000
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='905798505', handleStr='sheriffwoody')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    @pytest.mark.parametrize('xminDiff, yminDiff, xmaxDiff, ymaxDiff', [
        (-1000, 0, 0, 0),
        (0, -1000, 0, 0),
        (0, 0, -1000, 0),
        (0, 0, 0, -1000),
        (0, 0, 1000, 1000),
    ])
    def testInvalidDimensions(xminDiff, ymaxDiff, xmaxDiff, yminDiff, userWoody, img, ctx):
        with pytest.raises(BadRequest400):
            if xminDiff == yminDiff == xmaxDiff == ymaxDiff == 0:
                raise BadRequest400('lol this actually is valid')
            else:
>               userProfileUploadphoto(
                    userWoody.token,
                    img.url,
                    img.xmin + xminDiff,
                    img.ymin + yminDiff,
                    img.xmax + xmaxDiff,
                    img.ymax + ymaxDiff,
                    ctx
                )

httpTests/userTests/test_user_profile_uploadphoto.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
______________________ testInvalidDimensions[0-0--1000-0] ______________________

xminDiff = 0, ymaxDiff = 0, xmaxDiff = -1000, yminDiff = 0
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='993019166', handleStr='sheriffwoody')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    @pytest.mark.parametrize('xminDiff, yminDiff, xmaxDiff, ymaxDiff', [
        (-1000, 0, 0, 0),
        (0, -1000, 0, 0),
        (0, 0, -1000, 0),
        (0, 0, 0, -1000),
        (0, 0, 1000, 1000),
    ])
    def testInvalidDimensions(xminDiff, ymaxDiff, xmaxDiff, yminDiff, userWoody, img, ctx):
        with pytest.raises(BadRequest400):
            if xminDiff == yminDiff == xmaxDiff == ymaxDiff == 0:
                raise BadRequest400('lol this actually is valid')
            else:
>               userProfileUploadphoto(
                    userWoody.token,
                    img.url,
                    img.xmin + xminDiff,
                    img.ymin + yminDiff,
                    img.xmax + xmaxDiff,
                    img.ymax + ymaxDiff,
                    ctx
                )

httpTests/userTests/test_user_profile_uploadphoto.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
______________________ testInvalidDimensions[0-0-0--1000] ______________________

xminDiff = 0, ymaxDiff = -1000, xmaxDiff = 0, yminDiff = 0
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='857375950', handleStr='sheriffwoody')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    @pytest.mark.parametrize('xminDiff, yminDiff, xmaxDiff, ymaxDiff', [
        (-1000, 0, 0, 0),
        (0, -1000, 0, 0),
        (0, 0, -1000, 0),
        (0, 0, 0, -1000),
        (0, 0, 1000, 1000),
    ])
    def testInvalidDimensions(xminDiff, ymaxDiff, xmaxDiff, yminDiff, userWoody, img, ctx):
        with pytest.raises(BadRequest400):
            if xminDiff == yminDiff == xmaxDiff == ymaxDiff == 0:
                raise BadRequest400('lol this actually is valid')
            else:
>               userProfileUploadphoto(
                    userWoody.token,
                    img.url,
                    img.xmin + xminDiff,
                    img.ymin + yminDiff,
                    img.xmax + xmaxDiff,
                    img.ymax + ymaxDiff,
                    ctx
                )

httpTests/userTests/test_user_profile_uploadphoto.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
_____________________ testInvalidDimensions[0-0-1000-1000] _____________________

xminDiff = 0, ymaxDiff = 1000, xmaxDiff = 1000, yminDiff = 0
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='930468748', handleStr='sheriffwoody')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    @pytest.mark.parametrize('xminDiff, yminDiff, xmaxDiff, ymaxDiff', [
        (-1000, 0, 0, 0),
        (0, -1000, 0, 0),
        (0, 0, -1000, 0),
        (0, 0, 0, -1000),
        (0, 0, 1000, 1000),
    ])
    def testInvalidDimensions(xminDiff, ymaxDiff, xmaxDiff, yminDiff, userWoody, img, ctx):
        with pytest.raises(BadRequest400):
            if xminDiff == yminDiff == xmaxDiff == ymaxDiff == 0:
                raise BadRequest400('lol this actually is valid')
            else:
>               userProfileUploadphoto(
                    userWoody.token,
                    img.url,
                    img.xmin + xminDiff,
                    img.ymin + yminDiff,
                    img.xmax + xmaxDiff,
                    img.ymax + ymaxDiff,
                    ctx
                )

httpTests/userTests/test_user_profile_uploadphoto.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
__________________________ testXEndLessThanStartValue __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='110559710', handleStr='sheriffwoody')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testXEndLessThanStartValue(userWoody, img, ctx):
        with pytest.raises(BadRequest400):
>           userProfileUploadphoto(userWoody.token, img.url, 60, 0, 30, 30, ctx)

httpTests/userTests/test_user_profile_uploadphoto.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
__________________________ testYEndLessThanStartValue __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='812406449', handleStr='sheriffwoody')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testYEndLessThanStartValue(userWoody, img, ctx):
        with pytest.raises(BadRequest400):
>           userProfileUploadphoto(userWoody.token, img.url, 0, 60, 30, 30, ctx)

httpTests/userTests/test_user_profile_uploadphoto.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
________________________________ testInvalidUrl ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='924576431', handleStr='sheriffwoody')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testInvalidUrl(userWoody, img, ctx):
        with pytest.raises(BadRequest400):
>           userProfileUploadphoto(userWoody.token, 'http://cgi.cse.unsw.edu.au/~jas/home/pics/jas5.jpg', img.xmin, img.ymin, img.xmax, img.ymax, ctx)

httpTests/userTests/test_user_profile_uploadphoto.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='751776443', handleStr='sheriffwoody')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testInvalidToken(userWoody, img, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           userProfileUploadphoto(userWoody.token, img.url, img.xmin, img.ymin, img.xmax, img.ymax, ctx)

httpTests/userTests/test_user_profile_uploadphoto.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.BadRequest400()
        elif res.status_code == 403:
            raise error.Forbidden403()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:155: Exception
=========================== short test summary info ============================
FAILED httpTests/adminTests/test_admin_user_remove.py::testOnceRemovedUserCantDoAnything
FAILED httpTests/adminTests/test_admin_user_remove.py::testRemovedProfileStillFetchableWithUserProfile
FAILED httpTests/adminTests/test_admin_user_remove.py::testRemovalNotInUsersAll
FAILED httpTests/adminTests/test_admin_user_remove.py::testInvalidUser - Exce...
FAILED httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveLastOwner
FAILED httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveUserNonowner
FAILED httpTests/adminTests/test_admin_user_remove.py::testInvalidToken - Fai...
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testSuccessfulPermissionChange
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testCannotDemoteLastOwner
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testCannotPromoteOwner
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testNonownerCantChangePermissions
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testInvalidUser
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testInvalidPermission
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testSamePermission
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testInvalidToken
FAILED httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions - httpT...
FAILED httpTests/authTests/test_auth_logout.py::testForbidden403WhenAlreadyLoggedOut
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1]
FAILED httpTests/authTests/test_passwordreset_request.py::testReturnFormatCorrect
FAILED httpTests/authTests/test_passwordreset_request.py::testPasswordRequestLogsOutEverywhere
FAILED httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerMemberCanAddowner
FAILED httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner
FAILED httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate
FAILED httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic
FAILED httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId - ...
FAILED httpTests/channelTests/test_channel_addowner.py::testInvalidToken - Fa...
FAILED httpTests/channelTests/test_channel_details.py::testInvalidToken - Fai...
FAILED httpTests/channelTests/test_channel_invite.py::testInvalidatedToken - ...
FAILED httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate
FAILED httpTests/channelTests/test_channel_join.py::testInvalidatedToken - Fa...
FAILED httpTests/channelTests/test_channel_leave.py::testInvalidToken - Faile...
FAILED httpTests/channelTests/test_channel_messages.py::testMessageTimestamp
FAILED httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent
FAILED httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent
FAILED httpTests/channelTests/test_channel_messages.py::testForbidden403WhenInvalidTokenGiven
FAILED httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testInvalidUId - F...
FAILED httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken
FAILED httpTests/channels_tests/test_channels_create.py::testInvalidatedToken
FAILED httpTests/channels_tests/test_channels_list.py::testInvalidatedToken
FAILED httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken
FAILED httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation - IndexE...
FAILED httpTests/dmTests/test_dm_create.py::testDmToInvalidUsers - Failed: DI...
FAILED httpTests/dmTests/test_dm_create.py::testDmToUsersButOneInvalid - Fail...
FAILED httpTests/dmTests/test_dm_create.py::testDmToUsersButDuplicate - Faile...
FAILED httpTests/dmTests/test_dm_create.py::testInvalidToken - Failed: DID NO...
FAILED httpTests/dmTests/test_dm_details.py::testInvalidToken - Failed: DID N...
FAILED httpTests/dmTests/test_dm_leave.py::testInvalidToken - Failed: DID NOT...
FAILED httpTests/dmTests/test_dm_list.py::testWhenInOneDm - AssertionError: a...
FAILED httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms - AssertionEr...
FAILED httpTests/dmTests/test_dm_list.py::testInvalidatedToken - Failed: DID ...
FAILED httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent - as...
FAILED httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent - ass...
FAILED httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected - Ex...
FAILED httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected
FAILED httpTests/dmTests/test_dm_messages.py::testForbidden403WhenInvalidTokenGiven
FAILED httpTests/dmTests/test_dm_remove.py::testRemovalRemovesMessages - Exce...
FAILED httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm
FAILED httpTests/dmTests/test_dm_remove.py::testInvalidToken - Failed: DID NO...
FAILED httpTests/messageTests/test_message_edit.py::testOwnerCanEditMembersMessageChannel
FAILED httpTests/messageTests/test_message_edit.py::testOwnerCanEditMembersMessageDm
FAILED httpTests/messageTests/test_message_edit.py::testGlobalOwnerCanEditMembersMessageChannel
FAILED httpTests/messageTests/test_message_edit.py::testInvalidToken - Failed...
FAILED httpTests/messageTests/test_message_meta.py::testMessageIdsUniqueIter3
FAILED httpTests/messageTests/test_message_pin.py::testSuccessfulPinChannelOwnerInChannel
FAILED httpTests/messageTests/test_message_pin.py::testSuccessfulPinDmOwnerInDm
FAILED httpTests/messageTests/test_message_pin.py::testSuccessfulPinGlobalOwnerInChannel
FAILED httpTests/messageTests/test_message_pin.py::testNonmemberCantPin - htt...
FAILED httpTests/messageTests/test_message_react.py::testSuccessfulReactInChannel
FAILED httpTests/messageTests/test_message_react.py::testSuccessfulReactToDmMessage
FAILED httpTests/messageTests/test_message_react.py::testTwoSuccessfulReactsToChannelMessage
FAILED httpTests/messageTests/test_message_react.py::testNonmemberCannotReact
FAILED httpTests/messageTests/test_message_remove.py::testOwnerCanRemoveMembersMessage
FAILED httpTests/messageTests/test_message_remove.py::testGlobalOwnerCanRemoveMembersMessageChannel
FAILED httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm
FAILED httpTests/messageTests/test_message_remove.py::testInvalidToken - Fail...
FAILED httpTests/messageTests/test_message_send.py::testInvalidToken - Failed...
FAILED httpTests/messageTests/test_message_senddm.py::testInvalidToken - Fail...
FAILED httpTests/messageTests/test_message_sendlater.py::testValidFutureMessage
FAILED httpTests/messageTests/test_message_sendlater.py::testCannotTimeTravelAkaSendMessageInPast
FAILED httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[]
FAILED httpTests/messageTests/test_message_sendlater.py::testInvalidToken - h...
FAILED httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedChannel
FAILED httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedDm
FAILED httpTests/messageTests/test_message_share.py::testInvalidToken - httpT...
FAILED httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinChannelOwnerInChannel
FAILED httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinDmOwnerInDm
FAILED httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinGlobalOwnerInChannel
FAILED httpTests/messageTests/test_message_unpin.py::testNonmemberCantUnpin
FAILED httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactInChannel
FAILED httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactToDmMessage
FAILED httpTests/messageTests/test_message_unreact.py::testNonmemberCannotUnreact
FAILED httpTests/otherTests/test_clear.py::testClearWorks - httpTests.error.B...
FAILED httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendTriggersNotification
FAILED httpTests/otherTests/test_notifications_get.py::testTagNotInChannel - ...
FAILED httpTests/otherTests/test_notifications_get.py::testMultipleSameTagsOnlyOneNotification
FAILED httpTests/otherTests/test_notifications_get.py::testTagSelf - httpTest...
FAILED httpTests/otherTests/test_notifications_get.py::testMultipleTags - htt...
FAILED httpTests/otherTests/test_notifications_get.py::testTagThruMessageSenddmTriggersNotification
FAILED httpTests/otherTests/test_notifications_get.py::testTagThruMessageEditTriggersNotification
FAILED httpTests/otherTests/test_search.py::testNoMatches - Exception: <Respo...
FAILED httpTests/otherTests/test_search.py::testSingleMatch - Exception: <Res...
FAILED httpTests/otherTests/test_search.py::testCaseInsensitiveMatch - Except...
FAILED httpTests/otherTests/test_search.py::testMultipleMatches - Exception: ...
FAILED httpTests/otherTests/test_users_all.py::testInvalidToken - httpTests.e...
FAILED httpTests/userTests/test_user_profile.py::testInvalidToken - httpTests...
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidToken - ...
FAILED httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange
FAILED httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidToken - F...
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testReturnFormatCorrect
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testCannotUploadNonJpeg
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[-1000-0-0-0]
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0--1000-0-0]
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0--1000-0]
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0-0--1000]
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0-1000-1000]
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testXEndLessThanStartValue
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testYEndLessThanStartValue
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidUrl
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidToken
======================= 128 failed, 162 passed in 19.41s =======================
