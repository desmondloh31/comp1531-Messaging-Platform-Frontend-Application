============================= test session starts ==============================
platform linux -- Python 3.9.2, pytest-6.2.2, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/import/cage/2/z5295293/CS1531/mark/project-automarking/tempstore/.hypothesis/examples')
rootdir: /import/cage/2/z5295293/CS1531/mark/project-automarking/tempstore
plugins: hypothesis-6.1.1, timeout-1.4.2, flask-0.15.1
collecting ... collected 378 items

httpTests/adminTests/test_admin_user_remove.py::testOnceRemovedUserCantDoAnything ERROR [  0%]
httpTests/adminTests/test_admin_user_remove.py::testMessagesAfterUserRemovalCorrectFormat ERROR [  0%]
httpTests/adminTests/test_admin_user_remove.py::testRemovedProfileStillFetchableWithUserProfile FAILED [  0%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromChannel ERROR [  1%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromDm ERROR [  1%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalNotInUsersAll FAILED [  1%]
httpTests/adminTests/test_admin_user_remove.py::testEmailReusable PASSED [  1%]
httpTests/adminTests/test_admin_user_remove.py::testHandleReusable FAILED [  2%]
httpTests/adminTests/test_admin_user_remove.py::testInvalidUser FAILED   [  2%]
httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveLastOwner FAILED [  2%]
httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveUserNonowner FAILED [  2%]
httpTests/adminTests/test_admin_user_remove.py::testInvalidToken FAILED  [  3%]
httpTests/adminTests/test_admin_userpermission_change.py::testSuccessfulPermissionChange FAILED [  3%]
httpTests/adminTests/test_admin_userpermission_change.py::testCannotDemoteLastOwner FAILED [  3%]
httpTests/adminTests/test_admin_userpermission_change.py::testCannotPromoteOwner FAILED [  3%]
httpTests/adminTests/test_admin_userpermission_change.py::testNonownerCantChangePermissions FAILED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidUser FAILED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidPermission FAILED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testSamePermission FAILED [  5%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidToken FAILED [  5%]
httpTests/authTests/test_auth_login.py::testSuccessfulLogin PASSED       [  5%]
httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions FAILED    [  5%]
httpTests/authTests/test_auth_login.py::testUnregisteredUser FAILED      [  6%]
httpTests/authTests/test_auth_login.py::testRegisteredButIncorrectPassword FAILED [  6%]
httpTests/authTests/test_auth_logout.py::testSuccessfulLogout FAILED     [  6%]
httpTests/authTests/test_auth_logout.py::testForbidden403WhenAlreadyLoggedOut FAILED [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[@gmail.com] FAILED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob] FAILED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob@bob@bob.com] FAILED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[12345] FAILED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[] FAILED  [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[] FAILED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] FAILED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[] FAILED  [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] FAILED [  9%]
httpTests/authTests/test_auth_register.py::testDuplicateEmail FAILED     [  9%]
httpTests/authTests/test_auth_register.py::testRemovedUserName FAILED    [  9%]
httpTests/authTests/test_auth_register.py::testSuccessfulRegistration FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] ERROR [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] ERROR [ 11%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] ERROR [ 11%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] ERROR [ 11%]
httpTests/authTests/test_passwordreset_request.py::testReturnFormatCorrect FAILED [ 11%]
httpTests/authTests/test_passwordreset_request.py::testPasswordRequestLogsOutEverywhere FAILED [ 12%]
httpTests/authTests/test_passwordreset_reset.py::testInvalidPassword FAILED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember ERROR [ 12%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerMemberCanAddowner ERROR [ 12%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCantAddownerWhenNonMember ERROR [ 13%]
httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner ERROR [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate ERROR [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic ERROR [ 14%]
httpTests/channelTests/test_channel_addowner.py::testMemberCannotAddOwner ERROR [ 14%]
httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner ERROR [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId ERROR [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidChannelId PASSED [ 15%]
httpTests/channelTests/test_channel_addowner.py::testInvalidToken ERROR  [ 15%]
httpTests/channelTests/test_channel_details.py::testMemberSuccessful ERROR [ 15%]
httpTests/channelTests/test_channel_details.py::testNonMemberNotSuccessful ERROR [ 15%]
httpTests/channelTests/test_channel_details.py::testInvalidChannelId FAILED [ 16%]
httpTests/channelTests/test_channel_details.py::testInvalidToken ERROR   [ 16%]
httpTests/channelTests/test_channel_invite.py::testDuplicateInvite ERROR [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalOwner ERROR [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalMember ERROR [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvitationFromNonChannelMember ERROR [ 17%]
httpTests/channelTests/test_channel_invite.py::testChannelIdInvalid PASSED [ 17%]
httpTests/channelTests/test_channel_invite.py::testUIdInvalid ERROR      [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvalidatedToken ERROR [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPublic ERROR [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate ERROR [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberJoinPublic ERROR [ 19%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberCantJoinPrivate ERROR [ 19%]
httpTests/channelTests/test_channel_join.py::testAlreadyJoinedChannel ERROR [ 19%]
httpTests/channelTests/test_channel_join.py::testJoinInvalidChannelId PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testInvalidatedToken ERROR  [ 20%]
httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully ERROR [ 20%]
httpTests/channelTests/test_channel_leave.py::testLeaveChannelWhenNotMember ERROR [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidChannelId FAILED [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidToken ERROR     [ 21%]
httpTests/channelTests/test_channel_messages.py::testMessageTimestamp ERROR [ 21%]
httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent ERROR [ 21%]
httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent ERROR [ 21%]
httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected ERROR [ 22%]
httpTests/channelTests/test_channel_messages.py::testRemovalByDeletionReflected ERROR [ 22%]
httpTests/channelTests/test_channel_messages.py::testBadRequest400WhenStartGreaterThanMessageNum ERROR [ 22%]
httpTests/channelTests/test_channel_messages.py::testForbidden403WhenUserIsNonMember ERROR [ 23%]
httpTests/channelTests/test_channel_messages.py::testBadRequest400WhenChannelIdInvalid PASSED [ 23%]
httpTests/channelTests/test_channel_messages.py::testForbidden403WhenInvalidTokenGiven ERROR [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner ERROR [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner ERROR [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner ERROR [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner ERROR [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner ERROR [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner ERROR [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner ERROR [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveNonOwner ERROR [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidUId ERROR [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testWithInvalidChannelId PASSED [ 26%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken ERROR [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[True-andys room] FAILED [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[False-andys room] FAILED [ 26%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 28%]
httpTests/channels_tests/test_channels_create.py::testInvalidatedToken FAILED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInNoChannels FAILED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[True-andy] FAILED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[False-andy] FAILED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-True-ZERG-andy] FAILED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-False-ZERG-andy] FAILED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-True-ZERG-andy] FAILED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-False-ZERG-andy] FAILED [ 30%]
httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel ERROR [ 30%]
httpTests/channels_tests/test_channels_list.py::testInvalidatedToken FAILED [ 30%]
httpTests/channels_tests/test_channels_listall.py::testWhenNoChannels FAILED [ 30%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPrivate ERROR [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPublic ERROR [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenMultipleChannelsExist ERROR [ 31%]
httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken FAILED [ 32%]
httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation FAILED     [ 32%]
httpTests/dmTests/test_dm_create.py::testDmNameCreationSingle FAILED     [ 32%]
httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple FAILED   [ 32%]
httpTests/dmTests/test_dm_create.py::testDmToInvalidUsers PASSED         [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButOneInvalid PASSED   [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButDuplicate PASSED    [ 33%]
httpTests/dmTests/test_dm_create.py::testInvalidToken FAILED             [ 33%]
httpTests/dmTests/test_dm_details.py::testMemberSuccessful ERROR         [ 34%]
httpTests/dmTests/test_dm_details.py::testNonMemberNotSuccessful ERROR   [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidDmId PASSED             [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidToken ERROR             [ 34%]
httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully ERROR  [ 35%]
httpTests/dmTests/test_dm_leave.py::testLeaveDmWhenNotMember ERROR       [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidDmId PASSED               [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidToken ERROR               [ 35%]
httpTests/dmTests/test_dm_list.py::testWhenInNoDms PASSED                [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInOneDm ERROR                 [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms FAILED          [ 36%]
httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm ERROR            [ 37%]
httpTests/dmTests/test_dm_list.py::testInvalidatedToken FAILED           [ 37%]
httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent ERROR  [ 37%]
httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent ERROR   [ 37%]
httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected ERROR  [ 38%]
httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected ERROR [ 38%]
httpTests/dmTests/test_dm_messages.py::testBadRequest400WhenStartGreaterThanMessageNum ERROR [ 38%]
httpTests/dmTests/test_dm_messages.py::testForbidden403WhenUserIsNonMember ERROR [ 38%]
httpTests/dmTests/test_dm_messages.py::testBadRequest400WhenDmIdInvalid PASSED [ 39%]
httpTests/dmTests/test_dm_messages.py::testForbidden403WhenInvalidTokenGiven ERROR [ 39%]
httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval ERROR       [ 39%]
httpTests/dmTests/test_dm_remove.py::testRemovalRemovesMessages ERROR    [ 39%]
httpTests/dmTests/test_dm_remove.py::testNonownerCannotRemoveDm ERROR    [ 40%]
httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm ERROR [ 40%]
httpTests/dmTests/test_dm_remove.py::testInvalidDmId ERROR               [ 40%]
httpTests/dmTests/test_dm_remove.py::testInvalidToken ERROR              [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel ERROR [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm ERROR [ 41%]
httpTests/messageTests/test_message_edit.py::testOwnerCanEditMembersMessageChannel ERROR [ 41%]
httpTests/messageTests/test_message_edit.py::testOwnerCanEditMembersMessageDm ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testGlobalOwnerCanEditMembersMessageChannel ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage ERROR [ 42%]
httpTests/messageTests/test_message_edit.py::testInvalidMessageLength ERROR [ 43%]
httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage ERROR [ 43%]
httpTests/messageTests/test_message_edit.py::testNonownerNonposterCantEdit ERROR [ 43%]
httpTests/messageTests/test_message_edit.py::testInvalidToken ERROR      [ 43%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUnique ERROR  [ 44%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUniqueIter3 ERROR [ 44%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinChannelOwnerInChannel ERROR [ 44%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinDmOwnerInDm ERROR [ 44%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinGlobalOwnerInChannel ERROR [ 45%]
httpTests/messageTests/test_message_pin.py::testInvalidMessageId FAILED  [ 45%]
httpTests/messageTests/test_message_pin.py::testCannotPinTwice ERROR     [ 45%]
httpTests/messageTests/test_message_pin.py::testChannelMemberCantPin ERROR [ 46%]
httpTests/messageTests/test_message_pin.py::testDmMemberCantPin ERROR    [ 46%]
httpTests/messageTests/test_message_pin.py::testGlobalOwnerCantPinInDm ERROR [ 46%]
httpTests/messageTests/test_message_pin.py::testNonmemberCantPin ERROR   [ 46%]
httpTests/messageTests/test_message_pin.py::testInvalidToken ERROR       [ 47%]
httpTests/messageTests/test_message_react.py::testSuccessfulReactInChannel ERROR [ 47%]
httpTests/messageTests/test_message_react.py::testSuccessfulReactToDmMessage ERROR [ 47%]
httpTests/messageTests/test_message_react.py::testTwoSuccessfulReactsToChannelMessage ERROR [ 47%]
httpTests/messageTests/test_message_react.py::testInvalidMessageId FAILED [ 48%]
httpTests/messageTests/test_message_react.py::testInvalidReactId ERROR   [ 48%]
httpTests/messageTests/test_message_react.py::testCantReactTwice ERROR   [ 48%]
httpTests/messageTests/test_message_react.py::testNonmemberCannotReact ERROR [ 48%]
httpTests/messageTests/test_message_react.py::testInvalidToken ERROR     [ 49%]
httpTests/messageTests/test_message_remove.py::testOriginalPosterCanRemoveMessage ERROR [ 49%]
httpTests/messageTests/test_message_remove.py::testOwnerCanRemoveMembersMessage ERROR [ 49%]
httpTests/messageTests/test_message_remove.py::testGlobalOwnerCanRemoveMembersMessageChannel ERROR [ 50%]
httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm ERROR [ 50%]
httpTests/messageTests/test_message_remove.py::testCannotRemoveDeletedMessage ERROR [ 50%]
httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage ERROR [ 50%]
httpTests/messageTests/test_message_remove.py::testInvalidToken ERROR    [ 51%]
httpTests/messageTests/test_message_send.py::testValidMessage ERROR      [ 51%]
httpTests/messageTests/test_message_send.py::testNonmemberPost ERROR     [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidChannel FAILED   [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[] ERROR  [ 52%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] ERROR [ 52%]
httpTests/messageTests/test_message_send.py::testInvalidToken ERROR      [ 52%]
httpTests/messageTests/test_message_senddm.py::testValidMessage ERROR    [ 52%]
httpTests/messageTests/test_message_senddm.py::testNonmemberPost ERROR   [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidDm FAILED      [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[] ERROR [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] ERROR [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidToken ERROR    [ 54%]
httpTests/messageTests/test_message_sendlater.py::testValidFutureMessage ERROR [ 54%]
httpTests/messageTests/test_message_sendlater.py::testReturnsImmediately ERROR [ 54%]
httpTests/messageTests/test_message_sendlater.py::testInvalidReturnedIdUntilSent ERROR [ 55%]
httpTests/messageTests/test_message_sendlater.py::testNonmemberCannotSendlater ERROR [ 55%]
httpTests/messageTests/test_message_sendlater.py::testCannotTimeTravelAkaSendMessageInPast ERROR [ 55%]
httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[] ERROR [ 55%]
httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] ERROR [ 56%]
httpTests/messageTests/test_message_sendlater.py::testInvalidChannel ERROR [ 56%]
httpTests/messageTests/test_message_sendlater.py::testInvalidToken ERROR [ 56%]
httpTests/messageTests/test_message_sendlaterdm.py::testValidFutureMessage ERROR [ 56%]
httpTests/messageTests/test_message_sendlaterdm.py::testReturnsImmediately ERROR [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidReturnedIdUntilSent ERROR [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testNonmemberCannotSendlater ERROR [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testCannotTimeTravelAkaSendMessageInPast ERROR [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidMessage[] ERROR [ 58%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] ERROR [ 58%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidDm ERROR  [ 58%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidToken ERROR [ 58%]
httpTests/messageTests/test_message_share.py::testSuccessfulShareToChannel ERROR [ 59%]
httpTests/messageTests/test_message_share.py::testSuccessfulShareToDm ERROR [ 59%]
httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[True] ERROR [ 59%]
httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[False] ERROR [ 60%]
httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedDm ERROR [ 60%]
httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedChannel ERROR [ 60%]
httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedChannel ERROR [ 60%]
httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedDm ERROR [ 61%]
httpTests/messageTests/test_message_share.py::testInvalidOgMessageId ERROR [ 61%]
httpTests/messageTests/test_message_share.py::testInvalidMessageLength ERROR [ 61%]
httpTests/messageTests/test_message_share.py::testShareToInvalidChannelId ERROR [ 61%]
httpTests/messageTests/test_message_share.py::testShareToInvalidDmId ERROR [ 62%]
httpTests/messageTests/test_message_share.py::testInvalidToken ERROR     [ 62%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinChannelOwnerInChannel ERROR [ 62%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinDmOwnerInDm ERROR [ 62%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinGlobalOwnerInChannel ERROR [ 63%]
httpTests/messageTests/test_message_unpin.py::testInvalidMessageId FAILED [ 63%]
httpTests/messageTests/test_message_unpin.py::testCannotUnpinTwice ERROR [ 63%]
httpTests/messageTests/test_message_unpin.py::testChannelMemberCantUnpin ERROR [ 64%]
httpTests/messageTests/test_message_unpin.py::testDmMemberCantUnpin ERROR [ 64%]
httpTests/messageTests/test_message_unpin.py::testGlobalOwnerCantUnpinInDm ERROR [ 64%]
httpTests/messageTests/test_message_unpin.py::testNonmemberCantUnpin ERROR [ 64%]
httpTests/messageTests/test_message_unpin.py::testInvalidToken ERROR     [ 65%]
httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactInChannel ERROR [ 65%]
httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactToDmMessage ERROR [ 65%]
httpTests/messageTests/test_message_unreact.py::testInvalidMessageId FAILED [ 65%]
httpTests/messageTests/test_message_unreact.py::testInvalidReactId ERROR [ 66%]
httpTests/messageTests/test_message_unreact.py::testCantUnreactTwice ERROR [ 66%]
httpTests/messageTests/test_message_unreact.py::testNonmemberCannotUnreact ERROR [ 66%]
httpTests/messageTests/test_message_unreact.py::testInvalidToken ERROR   [ 66%]
httpTests/otherTests/test_clear.py::testClearWorks FAILED                [ 67%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendTriggersNotification ERROR [ 67%]
httpTests/otherTests/test_notifications_get.py::testTagNotInChannel ERROR [ 67%]
httpTests/otherTests/test_notifications_get.py::testMultipleSameTagsOnlyOneNotification ERROR [ 67%]
httpTests/otherTests/test_notifications_get.py::testTagSelf ERROR        [ 68%]
httpTests/otherTests/test_notifications_get.py::testMultipleTags ERROR   [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSenddmTriggersNotification ERROR [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageEditTriggersNotification ERROR [ 69%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageShareTriggersNotification ERROR [ 69%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterTriggersNotification ERROR [ 69%]
httpTests/otherTests/test_notifications_get.py::testMessageSendlaterTagNotifiesWhenSent ERROR [ 69%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterdmTriggersNotification ERROR [ 70%]
httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[a small message] ERROR [ 70%]
httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] ERROR [ 70%]
httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[ch] ERROR [ 70%]
httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[dm] ERROR [ 71%]
httpTests/otherTests/test_notifications_get.py::testAddThruChInviteTriggersNotification ERROR [ 71%]
httpTests/otherTests/test_notifications_get.py::testAddThruDmCreateTriggersNotification ERROR [ 71%]
httpTests/otherTests/test_notifications_get.py::testMostRecent_20NotificationsFetched ERROR [ 71%]
httpTests/otherTests/test_notifications_get.py::testInvalidToken FAILED  [ 72%]
httpTests/otherTests/test_search.py::testNoMatches FAILED                [ 72%]
httpTests/otherTests/test_search.py::testSingleMatch ERROR               [ 72%]
httpTests/otherTests/test_search.py::testCaseInsensitiveMatch ERROR      [ 73%]
httpTests/otherTests/test_search.py::testMultipleMatches ERROR           [ 73%]
httpTests/otherTests/test_search.py::testMultipleChannelsJoined ERROR    [ 73%]
httpTests/otherTests/test_search.py::testSearchIncludesOnlyJoinedChannels ERROR [ 73%]
httpTests/otherTests/test_search.py::testSearchMatchesMoreThanJustAuthorisedUser ERROR [ 74%]
httpTests/otherTests/test_search.py::testInvalidSearch[] FAILED          [ 74%]
httpTests/otherTests/test_search.py::testInvalidSearch[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] FAILED [ 74%]
httpTests/otherTests/test_search.py::testInvalidToken FAILED             [ 74%]
httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll FAILED    [ 75%]
httpTests/otherTests/test_users_all.py::testInvalidToken FAILED          [ 75%]
httpTests/standupTests/test_standup_active.py::testCorrectReturnFormat[True] ERROR [ 75%]
httpTests/standupTests/test_standup_active.py::testCorrectReturnFormat[False] ERROR [ 75%]
httpTests/standupTests/test_standup_active.py::testActiveStandup ERROR   [ 76%]
httpTests/standupTests/test_standup_active.py::testInactiveStandup ERROR [ 76%]
httpTests/standupTests/test_standup_active.py::testInvalidChannelId FAILED [ 76%]
httpTests/standupTests/test_standup_active.py::testInvalidToken ERROR    [ 76%]
httpTests/standupTests/test_standup_send.py::testMessagesBufferedAndDisplayedCorrectly ERROR [ 77%]
httpTests/standupTests/test_standup_send.py::testStandupSendsAfterLoggedOut ERROR [ 77%]
httpTests/standupTests/test_standup_send.py::testReturnFormat ERROR      [ 77%]
httpTests/standupTests/test_standup_send.py::testNonMemberCannotStandupSend ERROR [ 78%]
httpTests/standupTests/test_standup_send.py::testSendWhenStandupInactive ERROR [ 78%]
httpTests/standupTests/test_standup_send.py::testInvalidMessageLength ERROR [ 78%]
httpTests/standupTests/test_standup_send.py::testInvalidChannelId FAILED [ 78%]
httpTests/standupTests/test_standup_send.py::testInvalidToken ERROR      [ 79%]
httpTests/standupTests/test_standup_start.py::testStandupStartReturnFormat ERROR [ 79%]
httpTests/standupTests/test_standup_start.py::testStandupNoMessages ERROR [ 79%]
httpTests/standupTests/test_standup_start.py::testReturnsImmediately ERROR [ 79%]
httpTests/standupTests/test_standup_start.py::testStandupRestartableAfterLapse ERROR [ 80%]
httpTests/standupTests/test_standup_start.py::testStandupAffectsOnlyOneChannel ERROR [ 80%]
httpTests/standupTests/test_standup_start.py::testCreatorCannotLeaveDuringStartup ERROR [ 80%]
httpTests/standupTests/test_standup_start.py::testNonmemberCannotStartStandup ERROR [ 80%]
httpTests/standupTests/test_standup_start.py::testCannotStartStandupWhenAlreadyActive ERROR [ 81%]
httpTests/standupTests/test_standup_start.py::testInvalidStandupLength ERROR [ 81%]
httpTests/standupTests/test_standup_start.py::testInvalidChannelId FAILED [ 81%]
httpTests/standupTests/test_standup_start.py::testInvalidToken ERROR     [ 82%]
httpTests/statsTests/test_user_stats.py::testReturnTypeCorrect FAILED    [ 82%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelsCreate FAILED [ 82%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelJoin ERROR [ 82%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelInvite ERROR [ 83%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelLeave ERROR [ 83%]
httpTests/statsTests/test_user_stats.py::testDmsTrackedDmCreate FAILED   [ 83%]
httpTests/statsTests/test_user_stats.py::testDmsTrackedDmLeave ERROR     [ 83%]
httpTests/statsTests/test_user_stats.py::testDmsTrackedDmRemove ERROR    [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSend ERROR [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSendlater ERROR [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddm ERROR [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddmlater ERROR [ 85%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageShare ERROR [ 85%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedStandupFinish ERROR [ 85%]
httpTests/statsTests/test_user_stats.py::testInvolvementTracked FAILED   [ 85%]
httpTests/statsTests/test_user_stats.py::testInvalidToken FAILED         [ 86%]
httpTests/statsTests/test_users_stats.py::testReturnTypeCorrect FAILED   [ 86%]
httpTests/statsTests/test_users_stats.py::testChannelsTrackedChannelsCreate FAILED [ 86%]
httpTests/statsTests/test_users_stats.py::testDmsTrackedDmCreate FAILED  [ 87%]
httpTests/statsTests/test_users_stats.py::testDmsTrackedDmRemove ERROR   [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSend ERROR [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSendlater ERROR [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddm ERROR [ 88%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddmlater ERROR [ 88%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageShare ERROR [ 88%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedStandupFinish ERROR [ 88%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedEditedToRemoval ERROR [ 89%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedDeleted ERROR [ 89%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedDmRemoved ERROR [ 89%]
httpTests/statsTests/test_users_stats.py::testUtilizationTracked FAILED  [ 89%]
httpTests/statsTests/test_users_stats.py::testInvalidToken FAILED        [ 90%]
httpTests/userTests/test_user_profile.py::testUserProfileValid FAILED    [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidUser FAILED         [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidToken FAILED        [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange FAILED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testCannotChangeToTakenEmail FAILED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[] FAILED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[bob] FAILED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab.com] FAILED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[@gmail.com] FAILED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab@ab@gmail.com] FAILED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidToken FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[] FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a] FAILED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa] FAILED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] FAILED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle] FAILED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle] FAILED [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken FAILED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName FAILED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-] FAILED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] FAILED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] FAILED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] FAILED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidToken FAILED [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testReturnFormatCorrect FAILED [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testCannotUploadNonJpeg FAILED [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[-1000-0-0-0] FAILED [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0--1000-0-0] FAILED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0--1000-0] FAILED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0-0--1000] FAILED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0-1000-1000] FAILED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testXEndLessThanStartValue FAILED [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testYEndLessThanStartValue FAILED [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidUrl FAILED [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidToken FAILED [100%]

====== Marks recorded: 10.23 ======


==================================== ERRORS ====================================
_____________ ERROR at setup of testOnceRemovedUserCantDoAnything ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='145473901', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e7f7670>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________ ERROR at setup of testMessagesAfterUserRemovalCorrectFormat __________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='739560855', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e658670>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testRemovalRemovedFromChannel ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='808120397', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e6abf70>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________________ ERROR at setup of testRemovalRemovedFromDm __________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e6afdc0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='274104810', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='292217765', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_ ERROR at setup of testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] _

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='787968250', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e73f3a0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_ ERROR at setup of testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] _

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='611256113', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e6cd280>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_ ERROR at setup of testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] _

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='746465911', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e768280>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_ ERROR at setup of testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] _

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='602049437', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e768d30>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
___________ ERROR at setup of testChannelOwnerCanAddownerWhenMember ____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='482345060', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e61f700>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testGlobalOwnerMemberCanAddowner ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='679913984', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e5f6670>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________ ERROR at setup of testChannelOwnerCantAddownerWhenNonMember __________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='148486107', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e5f6b80>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
________________ ERROR at setup of testNonMemberCannotAddOwner _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='750759516', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e604430>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
________ ERROR at setup of testGlobalOwnerNonMemberCantAddownerPrivate _________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='899068622', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e5f25e0>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________ ERROR at setup of testGlobalOwnerNonMemberCantAddownerPublic _________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='187344394', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e5f5550>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________________ ERROR at setup of testMemberCannotAddOwner __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='649486010', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e5f5f70>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________ ERROR at setup of testCannotAddownerPrexistingChannelOwner __________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='910458728', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e5afaf0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________________ ERROR at setup of testWithInvalidUId _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='68277402', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e5f2f70>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='579067924', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e59e430>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________________ ERROR at setup of testMemberSuccessful ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='747146636', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e5c9670>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________________ ERROR at setup of testNonMemberNotSuccessful _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='355759196', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e61fca0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='463843927', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e6ab310>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________________ ERROR at setup of testDuplicateInvite _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='475272507', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e716430>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
___________________ ERROR at setup of testInviteGlobalOwner ____________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='886850815', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e737430>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
___________________ ERROR at setup of testInviteGlobalMember ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='798308542', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e736040>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________ ERROR at setup of testInvitationFromNonChannelMember _____________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=2, token='445003832', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e55b160>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________________ ERROR at setup of testUIdInvalid _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='578336815', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e5774c0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________________ ERROR at setup of testInvalidatedToken ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='686794659', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e55b700>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testGlobalOwnerJoinChannelPublic ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='492774790', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e577c10>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________ ERROR at setup of testGlobalOwnerJoinChannelPrivate ______________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='115801158', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e57cc10>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________________ ERROR at setup of testGlobalMemberJoinPublic _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='626441', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e56d700>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testGlobalMemberCantJoinPrivate _______________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=0, token='83382133', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e736700>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________________ ERROR at setup of testAlreadyJoinedChannel __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='100749856', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e55f3a0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________________ ERROR at setup of testInvalidatedToken ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='774596252', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e518310>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________ ERROR at setup of testMemberLeaveChannelSuccessfully _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='716813921', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e5189d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testLeaveChannelWhenNotMember ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='990491813', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e534430>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='722963139', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e513550>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________________ ERROR at setup of testMessageTimestamp ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='981535125', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e513f70>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________________ ERROR at setup of testUnderFiftyMessagesSent _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='284701948', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e502af0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________________ ERROR at setup of testOverFiftyMessagesSent __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='144317101', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e4d65e0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________________ ERROR at setup of testRemovalByEditReflected _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='498757848', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e4cd0d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testRemovalByDeletionReflected _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='135607418', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e4cdca0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______ ERROR at setup of testBadRequest400WhenStartGreaterThanMessageNum _______

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='407728577', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e4ba790>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________ ERROR at setup of testForbidden403WhenUserIsNonMember _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='976457440', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e49e280>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
___________ ERROR at setup of testForbidden403WhenInvalidTokenGiven ____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='63654516', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e4c11f0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________________ ERROR at setup of testOwnerCanRemoveOwner ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='530770147', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e4c1790>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________ ERROR at setup of testGlobalOwnerMmberCanRemoveOwner _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='37709016', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e47d790>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________ ERROR at setup of testGlobalOwnerNonmemberCannotRemoveOwner __________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='688793963', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e45b790>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testNonmemberCannotRemoveOwner _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='906316927', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e45bd30>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________________ ERROR at setup of testMmberCannotRemoveOwner _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='584057426', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e473280>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________________ ERROR at setup of testCannotRemoveLastOwner __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='681350925', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e46f280>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________ ERROR at setup of testGlobalOwnerCannotRemoveOnlyOwner ____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='796093799', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e412310>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________________ ERROR at setup of testCannotRemoveNonOwner __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='334113021', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e534a60>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________________ ERROR at setup of testInvalidUId _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='618523478', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e63a1f0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________________ ERROR at setup of testInvalidatedToken ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='154223110', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e4355e0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________________ ERROR at setup of testListAfterLeaveChannel __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='931324567', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e435b80>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testWhenOneChannelExistsPrivate _______________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='700709111', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e3f6f70>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testWhenOneChannelExistsPublic _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='632203918', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e3ffee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testWhenMultipleChannelsExist ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='311880724', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e424790>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________________ ERROR at setup of testMemberSuccessful ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e3af4c0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='72120656', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='212756175', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_________________ ERROR at setup of testNonMemberNotSuccessful _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e3f64c0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='169769175', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='356978926', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
______________________ ERROR at setup of testInvalidToken ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e372160>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='606563507', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='942837458', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_______________ ERROR at setup of testMemberLeaveDmSuccessfully ________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e379160>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='872794355', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='772449007', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
__________________ ERROR at setup of testLeaveDmWhenNotMember __________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e35f550>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='566670633', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='595785686', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
______________________ ERROR at setup of testInvalidToken ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e358ca0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='93584137', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='666217039', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
______________________ ERROR at setup of testWhenInOneDm _______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e33a670>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='607661043', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='229777199', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
____________________ ERROR at setup of testListAfterLeaveDm ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e32d5e0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='220063898', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='256067725', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_________________ ERROR at setup of testUnderFiftyMessagesSent _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e32bf70>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='184306939', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='243031820', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_________________ ERROR at setup of testOverFiftyMessagesSent __________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e32d1f0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='325060636', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='345735813', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_________________ ERROR at setup of testRemovalByEditReflected _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e3aff70>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='217756656', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='892979210', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_______________ ERROR at setup of testRemovalByDeletionReflected _______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e3da310>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='272059033', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='285789240', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
______ ERROR at setup of testBadRequest400WhenStartGreaterThanMessageNum _______

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e4240d0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='507914847', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='7881735', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
____________ ERROR at setup of testForbidden403WhenUserIsNonMember _____________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e301d30>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='825291638', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='577078170', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
___________ ERROR at setup of testForbidden403WhenInvalidTokenGiven ____________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e2ebf70>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='719367125', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='587557296', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
__________________ ERROR at setup of testSuccessfulDmRemoval ___________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e2d64c0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='523213466', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='895960684', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_________________ ERROR at setup of testRemovalRemovesMessages _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e2db940>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='249066278', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='84312654', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_________________ ERROR at setup of testNonownerCannotRemoveDm _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e2e0550>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='66560165', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='154844528', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
______________ ERROR at setup of testOwnerNonmemberCannotRemoveDm ______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e28d5e0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='74065940', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='276761325', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
______________________ ERROR at setup of testInvalidDmId _______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e2c2430>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='794630244', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='780462538', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
______________________ ERROR at setup of testInvalidToken ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e2af280>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='756870961', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='271487505', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
__________ ERROR at setup of testOriginalPosterCanEditMessageChannel ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='600156917', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e2bd160>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________ ERROR at setup of testOriginalPosterCanEditMessageDm _____________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e2bdc10>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='13071164', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='876005349', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
___________ ERROR at setup of testOwnerCanEditMembersMessageChannel ____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='807869217', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e258a60>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testOwnerCanEditMembersMessageDm ______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e2544c0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='407574567', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='590071343', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
________ ERROR at setup of testGlobalOwnerCanEditMembersMessageChannel _________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='342520668', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e2748b0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________ ERROR at setup of testGlobalOwnerCantEditMembersMessageDm ___________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e28c790>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='722373734', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='971784584', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
________________ ERROR at setup of testEmptyEditDeletesMessage _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='684676043', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e28cca0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________________ ERROR at setup of testInvalidMessageLength __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='616705958', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e246700>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
________________ ERROR at setup of testCannotEditDeletedMessage ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='668085169', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e2481f0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testNonownerNonposterCantEdit ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='561106648', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e248ca0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='994346958', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e21d790>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________________ ERROR at setup of testMessageIdsUnique ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e202700>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='403888951', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='50328881', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_________________ ERROR at setup of testMessageIdsUniqueIter3 __________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e1f19d0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='233506455', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='113856978', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
___________ ERROR at setup of testSuccessfulPinChannelOwnerInChannel ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='791482150', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e1fe8b0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
________________ ERROR at setup of testSuccessfulPinDmOwnerInDm ________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e1feee0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='528080381', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='107696334', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
___________ ERROR at setup of testSuccessfulPinGlobalOwnerInChannel ____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='686518306', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e1c81f0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________________ ERROR at setup of testCannotPinTwice _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='732266767', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e46f5e0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________________ ERROR at setup of testChannelMemberCantPin __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='245032228', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e1ed700>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________________ ERROR at setup of testDmMemberCantPin _____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e1bcc10>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='627440912', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='267716140', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_________________ ERROR at setup of testGlobalOwnerCantPinInDm _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e19ff70>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='948498206', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='966787824', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
____________________ ERROR at setup of testNonmemberCantPin ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='858860119', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e182dc0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='801259930', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e1638b0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
________________ ERROR at setup of testSuccessfulReactInChannel ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='156383456', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e161700>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testSuccessfulReactToDmMessage _______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e18a670>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='255233286', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='258700798', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
__________ ERROR at setup of testTwoSuccessfulReactsToChannelMessage ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='774103614', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e11d0d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________________ ERROR at setup of testInvalidReactId _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='794523635', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e1303a0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________________ ERROR at setup of testCantReactTwice _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='580252636', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e1309d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________________ ERROR at setup of testNonmemberCannotReact __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='31514804', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e0f4940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='932578038', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e0d3430>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________ ERROR at setup of testOriginalPosterCanRemoveMessage _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='365991606', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e0d3af0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testOwnerCanRemoveMembersMessage ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='816658423', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e1055e0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______ ERROR at setup of testGlobalOwnerCanRemoveMembersMessageChannel ________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='863820263', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e0e95e0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________ ERROR at setup of testGlobalOwnerCantRemoveMembersMessageDm __________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e0b0550>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='512645596', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='664218772', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_______________ ERROR at setup of testCannotRemoveDeletedMessage _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='383155619', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e0b04c0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
___________ ERROR at setup of testNonownerNonposterCantRemoveMessage ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='990444315', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e0c9940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='311703063', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e0c13a0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testValidMessage ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='5219185', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e0c1e50>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________________ ERROR at setup of testNonmemberPost ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='632021657', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e0a6940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________________ ERROR at setup of testInvalidMessage[] ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='441282730', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e059c10>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_ ERROR at setup of testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='641951659', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e06d700>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='851391560', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e06b1f0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testValidMessage ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e06bca0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='148514075', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='306769811', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_____________________ ERROR at setup of testNonmemberPost ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e026af0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='230042497', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='116554859', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
____________________ ERROR at setup of testInvalidMessage[] ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e0204c0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='455099797', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='824306846', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_ ERROR at setup of testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e0c9ca0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='852442084', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='867725949', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
______________________ ERROR at setup of testInvalidToken ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e182700>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='417727045', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='521531485', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
___________________ ERROR at setup of testValidFutureMessage ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='518368294', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e0208b0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
___________________ ERROR at setup of testReturnsImmediately ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='308613336', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67e0429d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testInvalidReturnedIdUntilSent _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='96980789', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dfe7550>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
________________ ERROR at setup of testNonmemberCannotSendlater ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='343173524', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dfe9430>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________ ERROR at setup of testCannotTimeTravelAkaSendMessageInPast __________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='265378411', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dfe9ee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________________ ERROR at setup of testInvalidMessage[] ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='792052968', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dfd9a60>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_ ERROR at setup of testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='977948361', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dfc34c0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________________ ERROR at setup of testInvalidChannel _____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67dfc3f70>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='636925050', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='446992179', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='441255048', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67df92dc0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
___________________ ERROR at setup of testValidFutureMessage ___________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67dfa88b0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='239308386', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='764550036', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
___________________ ERROR at setup of testReturnsImmediately ___________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67dfba700>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='616850303', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='979505853', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_______________ ERROR at setup of testInvalidReturnedIdUntilSent _______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67df50820>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='245735210', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='599960251', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
________________ ERROR at setup of testNonmemberCannotSendlater ________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67df76670>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='287228407', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='167849086', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
__________ ERROR at setup of testCannotTimeTravelAkaSendMessageInPast __________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67df6c9d0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='591897720', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='545124198', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
____________________ ERROR at setup of testInvalidMessage[] ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67df6c3a0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='664653266', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='658676330', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_ ERROR at setup of testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] _

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67df80b80>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='749104588', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='949887024', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_______________________ ERROR at setup of testInvalidDm ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='582630974', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67df29ee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testInvalidToken ______________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67df329d0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='660811043', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='290165598', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
________________ ERROR at setup of testSuccessfulShareToChannel ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='90912098', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67df22820>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________________ ERROR at setup of testSuccessfulShareToDm ___________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67def6310>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='557642439', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='789331832', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_______________ ERROR at setup of testSuccessfulCrossShare[True] _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='827790211', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67ded2160>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testSuccessfulCrossShare[False] _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='481664107', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67ded2c10>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
________________ ERROR at setup of testCannotShareToUnjoinedDm _________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=0, token='89541523', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67defe700>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testCannotShareToUnjoinedChannel ______________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=0, token='44628901', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67df011f0>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________ ERROR at setup of testCannotShareFromUnjoinedChannel _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='58892392', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67de9e1f0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testCannotShareFromUnjoinedDm ________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67de9ef70>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='844017696', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='957358764', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
___________________ ERROR at setup of testInvalidOgMessageId ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='1290819', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67deb9ee0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________________ ERROR at setup of testInvalidMessageLength __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='479052372', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67deb39d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
________________ ERROR at setup of testShareToInvalidChannelId _________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67deb3f70>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='636877995', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='374418798', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
___________________ ERROR at setup of testShareToInvalidDmId ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='285683955', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67deb1e50>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='629147376', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67de8b940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________ ERROR at setup of testSuccessfulUnpinChannelOwnerInChannel __________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='619160469', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dfe7af0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testSuccessfulUnpinDmOwnerInDm _______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67de505e0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='827659001', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='315492047', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
__________ ERROR at setup of testSuccessfulUnpinGlobalOwnerInChannel ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='371479676', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67de62940>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________________ ERROR at setup of testCannotUnpinTwice ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='171232464', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67de48dc0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________________ ERROR at setup of testChannelMemberCantUnpin _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='603937715', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67de16c10>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
___________________ ERROR at setup of testDmMemberCantUnpin ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67de3cb80>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='617555666', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='738426119', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
________________ ERROR at setup of testGlobalOwnerCantUnpinInDm ________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67de4caf0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='95320491', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='597672429', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
___________________ ERROR at setup of testNonmemberCantUnpin ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='146833377', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dded4c0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='187149467', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67ddedf70>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testSuccessfulUnreactInChannel _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='418185567', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dde0dc0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testSuccessfulUnreactToDmMessage ______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67de04940>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='932141844', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='892407539', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_____________________ ERROR at setup of testInvalidReactId _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='530994702', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67ddaab80>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________________ ERROR at setup of testCantUnreactTwice ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='599416623', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67ddc4670>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________________ ERROR at setup of testNonmemberCannotUnreact _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='602812232', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dd8f5e0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='608599729', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dd8faf0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________ ERROR at setup of testTagThruMessageSendTriggersNotification _________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='565855058', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dd7a790>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________________ ERROR at setup of testTagNotInChannel _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='615644018', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dd7f040>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________ ERROR at setup of testMultipleSameTagsOnlyOneNotification ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='607799765', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dd7f670>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
________________________ ERROR at setup of testTagSelf _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='513609806', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dd841f0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testMultipleTags ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='506415523', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dd82af0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
________ ERROR at setup of testTagThruMessageSenddmTriggersNotification ________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67dd365e0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='124067322', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='536878445', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_________ ERROR at setup of testTagThruMessageEditTriggersNotification _________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='385949487', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dd19430>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
________ ERROR at setup of testTagThruMessageShareTriggersNotification _________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='478218924', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dd4b3a0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______ ERROR at setup of testTagThruMessageSendlaterTriggersNotification _______

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='622792978', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dd4b820>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________ ERROR at setup of testMessageSendlaterTagNotifiesWhenSent ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='592155250', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dd25d30>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____ ERROR at setup of testTagThruMessageSendlaterdmTriggersNotification ______

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67dd02ca0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='999617600', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='955002345', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
__ ERROR at setup of testTagNotificationMessagePreviewLength[a small message] __

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='507474010', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dd02d30>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_ ERROR at setup of testTagNotificationMessagePreviewLength[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] _

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='853755578', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dd070d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________ ERROR at setup of testReactTriggersNotification[ch] ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='682738094', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dcb80d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________ ERROR at setup of testReactTriggersNotification[dm] ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='329562461', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dda4a60>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________ ERROR at setup of testAddThruChInviteTriggersNotification ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='990178052', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dde0ca0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________ ERROR at setup of testAddThruDmCreateTriggersNotification ___________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e031c10>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='221797572', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='556286283', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
___________ ERROR at setup of testMostRecent_20NotificationsFetched ____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='236773674', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dce5790>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testSingleMatch _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='386231565', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dcbfd30>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________________ ERROR at setup of testCaseInsensitiveMatch __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='741604640', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dc52820>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________________ ERROR at setup of testMultipleMatches _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='197224131', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dc7b310>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________________ ERROR at setup of testMultipleChannelsJoined _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='784272940', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dc71280>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________ ERROR at setup of testSearchIncludesOnlyJoinedChannels ____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='921181882', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dc5a1f0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
________ ERROR at setup of testSearchMatchesMoreThanJustAuthorisedUser _________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='198965586', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dc5a700>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testCorrectReturnFormat[True] ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='46613112', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dc459d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testCorrectReturnFormat[False] _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='26304204', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dc3baf0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________________ ERROR at setup of testActiveStandup ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='21201972', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dc45d30>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________________ ERROR at setup of testInactiveStandup _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='163079519', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dbddf70>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='866442063', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dbe81f0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________ ERROR at setup of testMessagesBufferedAndDisplayedCorrectly __________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='89498510', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dbfd0d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testStandupSendsAfterLoggedOut _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='249187371', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dbfdf70>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testReturnFormat ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='169660817', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dbc7700>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testNonMemberCannotStandupSend _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='362963256', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dbb2550>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
________________ ERROR at setup of testSendWhenStandupInactive _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='34619949', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67db8d040>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________________ ERROR at setup of testInvalidMessageLength __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='918304037', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67db8d790>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='290393394', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67db7bb80>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
________________ ERROR at setup of testStandupStartReturnFormat ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='797270833', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67db5f670>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
___________________ ERROR at setup of testStandupNoMessages ____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='804126417', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67db75160>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
___________________ ERROR at setup of testReturnsImmediately ___________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='524278227', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67db75c10>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testStandupRestartableAfterLapse ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='168469712', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67db34700>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testStandupAffectsOnlyOneChannel ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='217862320', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67db25670>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________ ERROR at setup of testCreatorCannotLeaveDuringStartup _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='485445344', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67db29550>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testNonmemberCannotStartStandup _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='404142753', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dc3b4c0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________ ERROR at setup of testCannotStartStandupWhenAlreadyActive ___________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='747710081', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dc45ca0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
__________________ ERROR at setup of testInvalidStandupLength __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='858522774', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dd820d0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________________ ERROR at setup of testInvalidToken ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='693789998', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67db25310>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_______________ ERROR at setup of testChannelsTrackedChannelJoin _______________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='746966625', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67daf19d0>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testChannelsTrackedChannelInvite ______________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='149623672', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dad7940>

    @pytest.fixture
    def zergsPrivateLair(userZerg, channelFactory):
>       return channelFactory(userZerg, 'zergs lair', False)

httpTests/fixtures.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testChannelsTrackedChannelLeave _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='992418672', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dafb430>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
___________________ ERROR at setup of testDmsTrackedDmLeave ____________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67dac94c0>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='910465394', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='662215484', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
___________________ ERROR at setup of testDmsTrackedDmRemove ___________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67da93670>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='97940605', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='500660442', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_______________ ERROR at setup of testMessagesTrackedMessageSend _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='563284282', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67daa5160>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________ ERROR at setup of testMessagesTrackedMessageSendlater _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='372914947', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67daa5c10>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testMessagesTrackedMessageSenddm ______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67daa8700>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='507293856', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='112877817', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
___________ ERROR at setup of testMessagesTrackedMessageSenddmlater ____________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67da64550>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='381541488', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='301466725', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
______________ ERROR at setup of testMessagesTrackedMessageShare _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='200976863', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67da623a0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testMessagesTrackedStandupFinish ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='411488305', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67da62e50>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
___________________ ERROR at setup of testDmsTrackedDmRemove ___________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67da35280>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='953618717', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='916795973', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
_______________ ERROR at setup of testMessagesTrackedMessageSend _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='474421430', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67da35b80>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
____________ ERROR at setup of testMessagesTrackedMessageSendlater _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='566035033', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67da2db80>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testMessagesTrackedMessageSenddm ______________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67da49670>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='82233188', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='165040217', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
___________ ERROR at setup of testMessagesTrackedMessageSenddmlater ____________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67d9d9550>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='20561006', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='367590956', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
______________ ERROR at setup of testMessagesTrackedMessageShare _______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='996157126', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67d9ff310>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
______________ ERROR at setup of testMessagesTrackedStandupFinish ______________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='30903536', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67d9ffdc0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_____________ ERROR at setup of testMessagesTrackedEditedToRemoval _____________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='159853912', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67d9d38b0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
_________________ ERROR at setup of testMessagesTrackedDeleted _________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='34086007', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67d9bc3a0>

    @pytest.fixture
    def woodysPublicToybox(userWoody, channelFactory):
>       return channelFactory(userWoody, 'woodys toybox', True)

httpTests/fixtures.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'authUserId is invalid'}
________________ ERROR at setup of testMessagesTrackedDmRemoved ________________

dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67d9bce50>
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='562491975', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='592027195', handleStr='')

    @pytest.fixture
    def woodyAndBuzzDm(dmFactory, userWoody, userBuzz):
>       return dmFactory(userWoody, [userBuzz])

httpTests/fixtures.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
---------------------------- Captured stdout setup -----------------------------
{'error': 'Invalid Token'}
=================================== FAILURES ===================================
_______________ testRemovedProfileStillFetchableWithUserProfile ________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='457756493', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='506619567', handleStr='')
ctx = None

    @iteration3
    def testRemovedProfileStillFetchableWithUserProfile(userWoody, userZerg, ctx):
        adminUserRemove(userWoody.token, userZerg.uId, ctx)
    
>       profile = userProfile(userWoody.token, userZerg.uId, ctx)['user']

httpTests/adminTests/test_admin_user_remove.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
___________________________ testRemovalNotInUsersAll ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='477661188', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='798684595', handleStr='')
ctx = None

    @iteration3
    def testRemovalNotInUsersAll(userWoody, userZerg, ctx):
        adminUserRemove(userWoody.token, userZerg.uId, ctx)
    
        users = usersAll(userWoody.token, ctx)['users']
    
>       assert userZerg.uId not in [u['uId'] for u in users]
E       AssertionError: assert 1 not in [0, 1]
E        +  where 1 = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='798684595', handleStr='').uId

httpTests/adminTests/test_admin_user_remove.py:70: AssertionError
______________________________ testHandleReusable ______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='5949833', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='120955708', handleStr='')
ctx = None

    @iteration3
    def testHandleReusable(userWoody, userZerg, ctx):
        adminUserRemove(userWoody.token, userZerg.uId, ctx)
    
        session = authRegister(userZerg.email, userZerg.password, userZerg.nameFirst, userZerg.nameLast, ctx)
    
>       assert userProfile(session['token'], session['authUserId'], ctx)['user']['handleStr'] == userZerg.handleStr

httpTests/adminTests/test_admin_user_remove.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_______________________________ testInvalidUser ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='369383566', handleStr='')
ctx = None

    @iteration3
    def testInvalidUser(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           adminUserRemove(userWoody.token, -1, ctx)

httpTests/adminTests/test_admin_user_remove.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:12: in adminUserRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:143: Exception
__________________________ testCannotRemoveLastOwner ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='566328213', handleStr='')
ctx = None

    @iteration3
    def testCannotRemoveLastOwner(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           adminUserRemove(userWoody.token, userWoody.uId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/adminTests/test_admin_user_remove.py:95: Failed
_________________________ testCannotRemoveUserNonowner _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='835998784', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='545103526', handleStr='')
ctx = None

    @iteration3
    def testCannotRemoveUserNonowner(userWoody, userBuzz, ctx):
        with pytest.raises(Forbidden403):
>           adminUserRemove(userBuzz.token, userWoody.uId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/adminTests/test_admin_user_remove.py:100: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='416220332', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='836636449', handleStr='')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, userBuzz, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/adminTests/test_admin_user_remove.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
________________________ testSuccessfulPermissionChange ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='800972872', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='491372156', handleStr='')
ctx = None

    @iteration3
    def testSuccessfulPermissionChange(userWoody, userBuzz, ctx):
>       adminUserpermissionChange(userWoody.token, userBuzz.uId, Permissions.DREAMSOWNER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:25: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
__________________________ testCannotDemoteLastOwner ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='485582923', handleStr='')
ctx = None

    @iteration3
    def testCannotDemoteLastOwner(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           adminUserpermissionChange(userWoody.token, userWoody.uId, Permissions.DREAMSMEMBER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:25: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
____________________________ testCannotPromoteOwner ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='412667084', handleStr='')
ctx = None

    @iteration3
    def testCannotPromoteOwner(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           adminUserpermissionChange(userWoody.token, userWoody.uId, Permissions.DREAMSOWNER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:25: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
______________________ testNonownerCantChangePermissions _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='621369188', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='684951943', handleStr='')
ctx = None

    @iteration3
    def testNonownerCantChangePermissions(userWoody, userBuzz, ctx):
        with pytest.raises(Forbidden403):
>           adminUserpermissionChange(userBuzz.token, userWoody.uId, Permissions.DREAMSMEMBER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:25: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
_______________________________ testInvalidUser ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='615467510', handleStr='')
ctx = None

    @iteration3
    def testInvalidUser(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           adminUserpermissionChange(userWoody.token, -1, Permissions.DREAMSOWNER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:25: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
____________________________ testInvalidPermission _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='916728358', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='351371190', handleStr='')
ctx = None

    @iteration3
    def testInvalidPermission(userWoody, userBuzz, ctx):
        with pytest.raises(BadRequest400):
>           adminUserpermissionChange(userWoody.token, userBuzz.uId, 1531, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:25: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
______________________________ testSamePermission ______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='269076820', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='804307081', handleStr='')
ctx = None

    @iteration3
    def testSamePermission(userWoody, userBuzz, ctx):
        with pytest.raises(BadRequest400):
>           adminUserpermissionChange(userWoody.token, userBuzz.uId, Permissions.DREAMSMEMBER, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/admin.py:25: in adminUserpermissionChange
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='624089013', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='646059270', handleStr='')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, userBuzz, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/adminTests/test_admin_userpermission_change.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
____________________________ testCanHaveTwoSessions ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='788437071', handleStr='')
ctx = None

    @pytest.mark.overrideMarks(2)
    def testCanHaveTwoSessions(userWoody, ctx):
        session2 = authLogin(userWoody.email, userWoody.password, ctx)
    
        # succeeds
>       assert userProfile(session2['token'], userWoody.uId, ctx) == userProfile(userWoody.token, userWoody.uId, ctx)

httpTests/authTests/test_auth_login.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testUnregisteredUser _____________________________

ctx = None

    def testUnregisteredUser(ctx):
        #  this test also covers 'invalid' emails, as an invalid email belongs to no user
        with pytest.raises(BadRequest400):
>           authLogin('bob.jane@example.com', 'qazwsx!!', ctx)

httpTests/authTests/test_auth_login.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:12: in authLogin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
______________________ testRegisteredButIncorrectPassword ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='658596574', handleStr='')
ctx = None

    def testRegisteredButIncorrectPassword(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           authLogin(userWoody.email, userWoody.password + 'AAAAAA', ctx)

httpTests/authTests/test_auth_login.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:12: in authLogin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testSuccessfulLogout _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='38186042', handleStr='')
ctx = None

    def testSuccessfulLogout(userWoody, ctx):
>       assert authLogout(userWoody.token, ctx) is not None

httpTests/authTests/test_auth_logout.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_____________________ testForbidden403WhenAlreadyLoggedOut _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='21845894', handleStr='')
ctx = None

    def testForbidden403WhenAlreadyLoggedOut(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/authTests/test_auth_logout.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_________________________ testInvalidEmail[@gmail.com] _________________________

email = '@gmail.com', ctx = None

    @pytest.mark.parametrize('email', ['@gmail.com', 'bob', 'bob@bob@bob.com'])
    def testInvalidEmail(email, ctx):
        with pytest.raises(BadRequest400):
>           authRegister(email, PASSWORD, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
____________________________ testInvalidEmail[bob] _____________________________

email = 'bob', ctx = None

    @pytest.mark.parametrize('email', ['@gmail.com', 'bob', 'bob@bob@bob.com'])
    def testInvalidEmail(email, ctx):
        with pytest.raises(BadRequest400):
>           authRegister(email, PASSWORD, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
______________________ testInvalidEmail[bob@bob@bob.com] _______________________

email = 'bob@bob@bob.com', ctx = None

    @pytest.mark.parametrize('email', ['@gmail.com', 'bob', 'bob@bob@bob.com'])
    def testInvalidEmail(email, ctx):
        with pytest.raises(BadRequest400):
>           authRegister(email, PASSWORD, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
__________________________ testInvalidPassword[12345] __________________________

password = '12345', ctx = None

    @pytest.mark.parametrize('password', ['12345', ''])
    def testInvalidPassword(password, ctx):
        with pytest.raises(BadRequest400):
>           authRegister(EMAIL, password, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
____________________________ testInvalidPassword[] _____________________________

password = '', ctx = None

    @pytest.mark.parametrize('password', ['12345', ''])
    def testInvalidPassword(password, ctx):
        with pytest.raises(BadRequest400):
>           authRegister(EMAIL, password, FIRST, LAST, ctx)

httpTests/authTests/test_auth_register.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
____________________________ testInvalidNameFirst[] ____________________________

nameFirst = '', ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'a' * 51])
    def testInvalidNameFirst(nameFirst, ctx):
        with pytest.raises(BadRequest400):
>           authRegister(EMAIL, PASSWORD, nameFirst, LAST, ctx)

httpTests/authTests/test_auth_register.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
__ testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] ___

nameFirst = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'a' * 51])
    def testInvalidNameFirst(nameFirst, ctx):
        with pytest.raises(BadRequest400):
>           authRegister(EMAIL, PASSWORD, nameFirst, LAST, ctx)

httpTests/authTests/test_auth_register.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
____________________________ testInvalidNameLast[] _____________________________

nameLast = '', ctx = None

    @pytest.mark.parametrize('nameLast', ['', 'b' * 51])
    def testInvalidNameLast(nameLast, ctx):
        with pytest.raises(BadRequest400):
>           authRegister(EMAIL, PASSWORD, FIRST, nameLast, ctx)

httpTests/authTests/test_auth_register.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
___ testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] ___

nameLast = 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb', ctx = None

    @pytest.mark.parametrize('nameLast', ['', 'b' * 51])
    def testInvalidNameLast(nameLast, ctx):
        with pytest.raises(BadRequest400):
>           authRegister(EMAIL, PASSWORD, FIRST, nameLast, ctx)

httpTests/authTests/test_auth_register.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
______________________________ testDuplicateEmail ______________________________

ctx = None

    def testDuplicateEmail(ctx):
        authRegister('ab@gmail.com', 'password1', 'name-first-a', 'name-last-a', ctx)
        with pytest.raises(BadRequest400):
>           authRegister('ab@gmail.com', 'password2', 'name-first-b', 'name-last-b', ctx)

httpTests/authTests/test_auth_register.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:35: in authRegister
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testRemovedUserName ______________________________

ctx = None

    def testRemovedUserName(ctx):
        session = authRegister('abc@gmail.com', 'password1', 'Removed', 'user', ctx)
>       profile = userProfile(session['token'], session['authUserId'], ctx)['user']

httpTests/authTests/test_auth_register.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
__________________________ testSuccessfulRegistration __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='700292337', handleStr='')
ctx = None

    def testSuccessfulRegistration(userWoody, ctx):
>       woodyProf = userProfile(userWoody.token, userWoody.uId, ctx)['user']

httpTests/authTests/test_auth_register.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
____________ testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] _____________

nameFirst = 'Bob', nameLast = 'Smith', expectedHandle = 'bobsmith', ctx = None

    @pytest.mark.parametrize('nameFirst, nameLast, expectedHandle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def testBasicHandleGeneratedCorrectly(nameFirst, nameLast, expectedHandle, ctx):
        session = authRegister('bob.jane@gmail.com', '~~qazwsx', nameFirst, nameLast, ctx)
    
>       actualHandle = userProfile(session['token'], session['authUserId'], ctx)['user']['handleStr']

httpTests/authTests/test_auth_register.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_ testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] _

nameFirst = 'ababababab', nameLast = 'cdcdcdcdcdcd'
expectedHandle = 'abababababcdcdcdcdcd', ctx = None

    @pytest.mark.parametrize('nameFirst, nameLast, expectedHandle', [
        ('Bob', 'Smith', 'bobsmith'),
        ('ab' * 5, 'cd' * 6, f'{"ab" * 5}{"cd" * 5}')
    ])
    def testBasicHandleGeneratedCorrectly(nameFirst, nameLast, expectedHandle, ctx):
        session = authRegister('bob.jane@gmail.com', '~~qazwsx', nameFirst, nameLast, ctx)
    
>       actualHandle = userProfile(session['token'], session['authUserId'], ctx)['user']['handleStr']

httpTests/authTests/test_auth_register.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
___________________________ testReturnFormatCorrect ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='133418920', handleStr='')
ctx = None

    @iteration3
    def testReturnFormatCorrect(userWoody, ctx):
>       assert authPasswordresetRequest(userWoody.email, ctx) == {}

httpTests/authTests/test_passwordreset_request.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:46: in authPasswordresetRequest
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
_____________________ testPasswordRequestLogsOutEverywhere _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='610421912', handleStr='')
ctx = None

    @iteration3
    def testPasswordRequestLogsOutEverywhere(userWoody, ctx):
        sess2 = authLogin(userWoody.email, userWoody.password, ctx)
    
>       authPasswordresetRequest(userWoody.email, ctx)

httpTests/authTests/test_passwordreset_request.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:46: in authPasswordresetRequest
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testInvalidPassword ______________________________

ctx = None

    @iteration3
    def testInvalidPassword(ctx):
        with pytest.raises(BadRequest400):
>           authPasswordresetReset('ur a wizard herry', 'ord', ctx)

httpTests/authTests/test_passwordreset_reset.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:56: in authPasswordresetReset
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testInvalidChannelId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='802364726', handleStr='')
ctx = None

    def testInvalidChannelId(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           channelDetails(userWoody.token, -1, ctx)

httpTests/channelTests/test_channel_details.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:25: in channelDetails
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testInvalidChannelId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='147394351', handleStr='')
ctx = None

    def testInvalidChannelId(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           channelLeave(userWoody.token, -1, ctx)

httpTests/channelTests/test_channel_leave.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:51: in channelLeave
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
______________________ testCreateChannel[True-andys room] ______________________

name = 'andys room', isPublic = True
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=0, token='375775435', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='640432464', handleStr='')
ctx = None

    @pytest.mark.parametrize('name', ['andys room'])
    @pytest.mark.parametrize('isPublic', [True, False])
    def testCreateChannel(name, isPublic, userZerg, userWoody, ctx):
>       chId = channelsCreate(userZerg.token, name, isPublic, ctx)['channelId']

httpTests/channels_tests/test_channels_create.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is invalid'}
_____________________ testCreateChannel[False-andys room] ______________________

name = 'andys room', isPublic = False
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=0, token='612439676', handleStr='')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='188949472', handleStr='')
ctx = None

    @pytest.mark.parametrize('name', ['andys room'])
    @pytest.mark.parametrize('isPublic', [True, False])
    def testCreateChannel(name, isPublic, userZerg, userWoody, ctx):
>       chId = channelsCreate(userZerg.token, name, isPublic, ctx)['channelId']

httpTests/channels_tests/test_channels_create.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is invalid'}
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='263164154', handleStr='')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/channels_tests/test_channels_create.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testWhenInNoChannels _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='695293461', handleStr='')
ctx = None

    def testWhenInNoChannels(userWoody, ctx):
>       assert channelsList(userWoody.token, ctx)['channels'] == []

httpTests/channels_tests/test_channels_list.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channels.py:13: in channelsList
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is invalid'}
_______________________ testWhenInOneChannel[True-andy] ________________________

name = 'andy', isPublic = True
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='9924762', handleStr='')
ctx = None

    @pytest.mark.parametrize('name', ['andy'])
    @pytest.mark.parametrize('isPublic', [True, False])
    def testWhenInOneChannel(name, isPublic, userWoody, ctx):
>       ch = channelsCreate(userWoody.token, name, isPublic, ctx)['channelId']

httpTests/channels_tests/test_channels_list.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is invalid'}
_______________________ testWhenInOneChannel[False-andy] _______________________

name = 'andy', isPublic = False
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='144497107', handleStr='')
ctx = None

    @pytest.mark.parametrize('name', ['andy'])
    @pytest.mark.parametrize('isPublic', [True, False])
    def testWhenInOneChannel(name, isPublic, userWoody, ctx):
>       ch = channelsCreate(userWoody.token, name, isPublic, ctx)['channelId']

httpTests/channels_tests/test_channels_list.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is invalid'}
_______________ testWhenInMultipleChannels[False-True-ZERG-andy] _______________

name1 = 'andy', name2 = 'ZERG', isPublic1 = True, isPublic2 = False
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='281049773', handleStr='')
ctx = None

    @pytest.mark.parametrize('name1', ['andy'])
    @pytest.mark.parametrize('name2', ['ZERG'])
    @pytest.mark.parametrize('isPublic1', [True, False])
    @pytest.mark.parametrize('isPublic2', [False, True])
    def testWhenInMultipleChannels(name1, name2, isPublic1, isPublic2, userWoody, ctx):
>       ch_1 = channelsCreate(userWoody.token, name1, isPublic1, ctx)['channelId']

httpTests/channels_tests/test_channels_list.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is invalid'}
______________ testWhenInMultipleChannels[False-False-ZERG-andy] _______________

name1 = 'andy', name2 = 'ZERG', isPublic1 = False, isPublic2 = False
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='438319811', handleStr='')
ctx = None

    @pytest.mark.parametrize('name1', ['andy'])
    @pytest.mark.parametrize('name2', ['ZERG'])
    @pytest.mark.parametrize('isPublic1', [True, False])
    @pytest.mark.parametrize('isPublic2', [False, True])
    def testWhenInMultipleChannels(name1, name2, isPublic1, isPublic2, userWoody, ctx):
>       ch_1 = channelsCreate(userWoody.token, name1, isPublic1, ctx)['channelId']

httpTests/channels_tests/test_channels_list.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is invalid'}
_______________ testWhenInMultipleChannels[True-True-ZERG-andy] ________________

name1 = 'andy', name2 = 'ZERG', isPublic1 = True, isPublic2 = True
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='952434869', handleStr='')
ctx = None

    @pytest.mark.parametrize('name1', ['andy'])
    @pytest.mark.parametrize('name2', ['ZERG'])
    @pytest.mark.parametrize('isPublic1', [True, False])
    @pytest.mark.parametrize('isPublic2', [False, True])
    def testWhenInMultipleChannels(name1, name2, isPublic1, isPublic2, userWoody, ctx):
>       ch_1 = channelsCreate(userWoody.token, name1, isPublic1, ctx)['channelId']

httpTests/channels_tests/test_channels_list.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is invalid'}
_______________ testWhenInMultipleChannels[True-False-ZERG-andy] _______________

name1 = 'andy', name2 = 'ZERG', isPublic1 = False, isPublic2 = True
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='664868493', handleStr='')
ctx = None

    @pytest.mark.parametrize('name1', ['andy'])
    @pytest.mark.parametrize('name2', ['ZERG'])
    @pytest.mark.parametrize('isPublic1', [True, False])
    @pytest.mark.parametrize('isPublic2', [False, True])
    def testWhenInMultipleChannels(name1, name2, isPublic1, isPublic2, userWoody, ctx):
>       ch_1 = channelsCreate(userWoody.token, name1, isPublic1, ctx)['channelId']

httpTests/channels_tests/test_channels_list.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is invalid'}
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='462745928', handleStr='')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/channels_tests/test_channels_list.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
______________________________ testWhenNoChannels ______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='750791113', handleStr='')
ctx = None

    def testWhenNoChannels(userWoody, ctx):
>       assert channelsListAll(userWoody.token, ctx)['channels'] == []

httpTests/channels_tests/test_channels_listall.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channels.py:26: in channelsListAll
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is invalid'}
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='90776082', handleStr='')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/channels_tests/test_channels_listall.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
___________________________ testSuccessfulDmCreation ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='897707192', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='39056060', handleStr='')
ctx = None

    def testSuccessfulDmCreation(userWoody, userBuzz, ctx):
>       aDm = dmCreate(userWoody.token, [userBuzz.uId], ctx)

httpTests/dmTests/test_dm_create.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'Invalid Token'}
___________________________ testDmNameCreationSingle ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='901004676', handleStr='')
ctx = None

    def testDmNameCreationSingle(userWoody, ctx):
>       theDm = dmCreate(userWoody.token, [], ctx)

httpTests/dmTests/test_dm_create.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'Invalid Token'}
__________________________ testDmNameCreationMultiple __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='271669944', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='986342951', handleStr='')
ctx = None

    def testDmNameCreationMultiple(userWoody, userBuzz, ctx):
>       theDm = dmCreate(userWoody.token, [userBuzz.uId], ctx)

httpTests/dmTests/test_dm_create.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'Invalid Token'}
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='46891567', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/dmTests/test_dm_create.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
____________________________ testWhenInMultipleDms _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='744661465', handleStr='')
dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67e33aee0>, ctx = None

    def testWhenInMultipleDms(userWoody, dmFactory, ctx):
>       dm_1 = dmFactory(userWoody, [])

httpTests/dmTests/test_dm_list.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'Invalid Token'}
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='740717979', handleStr='')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/dmTests/test_dm_list.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testInvalidMessageId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='792590754', handleStr='')
ctx = None

    @iteration3
    def testInvalidMessageId(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           messagePin(userWoody.token, -1, ctx)

httpTests/messageTests/test_message_pin.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:50: in messagePin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testInvalidMessageId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='713642283', handleStr='')
ctx = None

    @iteration3
    def testInvalidMessageId(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           messageReact(userWoody.token, -1, REACT, ctx)

httpTests/messageTests/test_message_react.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:76: in messageReact
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
______________________________ testInvalidChannel ______________________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='24747210', handleStr='')
ctx = None

    def testInvalidChannel(userBuzz, ctx):
        with pytest.raises(BadRequest400):
>           messageSend(userBuzz.token, -1, 'Hello world', ctx)

httpTests/messageTests/test_message_send.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:11: in messageSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
________________________________ testInvalidDm _________________________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='648133338', handleStr='')
ctx = None

    def testInvalidDm(userBuzz, ctx):
        with pytest.raises(BadRequest400):
>           messageSenddm(userBuzz.token, -1, 'Hello world', ctx)

httpTests/messageTests/test_message_senddm.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:115: in messageSenddm
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testInvalidMessageId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='437789233', handleStr='')
ctx = None

    @iteration3
    def testInvalidMessageId(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           messageUnpin(userWoody.token, -1, ctx)

httpTests/messageTests/test_message_unpin.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:63: in messageUnpin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testInvalidMessageId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='45915723', handleStr='')
ctx = None

    @iteration3
    def testInvalidMessageId(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           messageUnreact(userWoody.token, -1, REACT, ctx)

httpTests/messageTests/test_message_unreact.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:89: in messageUnreact
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
________________________________ testClearWorks ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='307478470', handleStr='')
userFactory = <function userFactory.<locals>.makeUser at 0x7fd67ddc4f70>
ctx = None

    def testClearWorks(userWoody, userFactory, ctx):
        # an existing user can do something
        assert usersAll(userWoody.token, ctx) is not None
    
        clear(ctx)
    
        with pytest.raises(Forbidden403):
            #  ex-existing user now can't do the original action because they don't exist
>           usersAll(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/otherTests/test_clear.py:23: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='70213368', handleStr='')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/otherTests/test_notifications_get.py:302: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
________________________________ testNoMatches _________________________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='251536380', handleStr='')
ctx = None

    @iteration3
    def testNoMatches(userBuzz, ctx):
>       msgs = search(userBuzz.token, 'No matches', ctx)

httpTests/otherTests/test_search.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:46: in search
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testInvalidSearch[] ______________________________

queryStr = ''
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='791215788', handleStr='')
ctx = None

    @iteration3
    @pytest.mark.parametrize('queryStr', ['', 'a' * 1001])
    def testInvalidSearch(queryStr, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           search(userWoody.token, queryStr, ctx)

httpTests/otherTests/test_search.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:46: in search
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:143: Exception
_ testInvalidSearch[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] _

queryStr = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='884634945', handleStr='')
ctx = None

    @iteration3
    @pytest.mark.parametrize('queryStr', ['', 'a' * 1001])
    def testInvalidSearch(queryStr, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           search(userWoody.token, queryStr, ctx)

httpTests/otherTests/test_search.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:46: in search
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:143: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='164230944', handleStr='')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/otherTests/test_search.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
____________________________ testSuccessfulUsersAll ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='38582176', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='561488708', handleStr='')
ctx = None

    def testSuccessfulUsersAll(userWoody, userBuzz, ctx):
        users = usersAll(userWoody.token, ctx)['users']
        users.sort(key=lambda u: u['handleStr'])
    
        for detail, usr in zip(users, (userBuzz, userWoody)):
            assert detail['uId'] == usr.uId
            assert detail['email'] == usr.email
            assert detail['nameFirst'] == usr.nameFirst
            assert detail['nameLast'] == usr.nameLast
>           assert detail['handleStr'] == usr.handleStr
E           AssertionError: assert 'buzzlightyear' == ''
E             + buzzlightyear

httpTests/otherTests/test_users_all.py:23: AssertionError
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='644925968', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/otherTests/test_users_all.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testInvalidChannelId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='154712801', handleStr='')
ctx = None

    @iteration3
    def testInvalidChannelId(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           standupActive(userWoody.token, -1, ctx)

httpTests/standupTests/test_standup_active.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/standup.py:24: in standupActive
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testInvalidChannelId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='983626972', handleStr='')
ctx = None

    @iteration3
    def testInvalidChannelId(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           standupSend(userWoody.token, -1, '1', ctx)

httpTests/standupTests/test_standup_send.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/standup.py:37: in standupSend
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testInvalidChannelId _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='225215239', handleStr='')
ctx = None

    @iteration3
    def testInvalidChannelId(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           standupStart(userWoody.token, -1, 15, ctx)

httpTests/standupTests/test_standup_start.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/standup.py:11: in standupStart
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
____________________________ testReturnTypeCorrect _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='631211419', handleStr='')
ctx = None

    @iteration3
    def testReturnTypeCorrect(userWoody, ctx):
>       stats = userStats(userWoody.token, ctx)

httpTests/statsTests/test_user_stats.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:63: in userStats
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
______________________ testChannelsTrackedChannelsCreate _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='870051837', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67dadaaf0>
ctx = None

    @iteration3
    def testChannelsTrackedChannelsCreate(userWoody, channelFactory, ctx):
>       channelFactory(userWoody, 'poop', True)

httpTests/statsTests/test_user_stats.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is invalid'}
____________________________ testDmsTrackedDmCreate ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='362281503', handleStr='')
dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67dafbee0>, ctx = None

    @iteration3
    def testDmsTrackedDmCreate(userWoody, dmFactory, ctx):
>       dmFactory(userWoody, [])

httpTests/statsTests/test_user_stats.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'Invalid Token'}
____________________________ testInvolvementTracked ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='462415715', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='942888132', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67da56dc0>
ctx = None

    @iteration3
    def testInvolvementTracked(userWoody, userZerg, channelFactory, ctx):
>       stats = userStats(userWoody.token, ctx)['userStats']

httpTests/statsTests/test_user_stats.py:197: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:63: in userStats
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='891812609', handleStr='')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/statsTests/test_user_stats.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
____________________________ testReturnTypeCorrect _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='258384745', handleStr='')
ctx = None

    @iteration3
    def testReturnTypeCorrect(userWoody, ctx):
>       stats = usersStats(userWoody.token, ctx)

httpTests/statsTests/test_users_stats.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:24: in usersStats
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
______________________ testChannelsTrackedChannelsCreate _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='469433649', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67da3e310>
ctx = None

    @iteration3
    def testChannelsTrackedChannelsCreate(userWoody, channelFactory, ctx):
>       channelFactory(userWoody, 'poop', True)

httpTests/statsTests/test_users_stats.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:84: in makeChannel
    ch = channels.channelsCreate(creator.token, name, isPublic, ctx)['channelId']
httpTests/fakepi/channels.py:39: in channelsCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is invalid'}
____________________________ testDmsTrackedDmCreate ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='90683123', handleStr='')
dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67da3eee0>, ctx = None

    @iteration3
    def testDmsTrackedDmCreate(userWoody, dmFactory, ctx):
>       dmFactory(userWoody, [])

httpTests/statsTests/test_users_stats.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fixtures.py:128: in makeDm
    theDm = dm.dmCreate(creator.token, [m.uId for m in members], ctx)
httpTests/fakepi/dm.py:39: in dmCreate
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'Invalid Token'}
____________________________ testUtilizationTracked ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='365084799', handleStr='')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='636121321', handleStr='')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7fd67d9af040>
dmFactory = <function dmFactory.<locals>.makeDm at 0x7fd67d9af0d0>, ctx = None

    @iteration3
    def testUtilizationTracked(userWoody, userZerg, channelFactory, dmFactory, ctx):
>       stats = usersStats(userWoody.token, ctx)['workspaceStats']

httpTests/statsTests/test_users_stats.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/other.py:24: in usersStats
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='416033695', handleStr='')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/statsTests/test_users_stats.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testUserProfileValid _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='615683118', handleStr='')
ctx = None

    def testUserProfileValid(userWoody, ctx):
>       deets = userProfile(userWoody.token, userWoody.uId, ctx)['user']

httpTests/userTests/test_user_profile.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_______________________________ testInvalidUser ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='531293570', handleStr='')
ctx = None

    def testInvalidUser(userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfile(userWoody.token, -1, ctx)

httpTests/userTests/test_user_profile.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='202713984', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/userTests/test_user_profile.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
__________________________ testSuccessfulEmailChange ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='717253213', handleStr='')
ctx = None

    def testSuccessfulEmailChange(userWoody, ctx):
        newEmail = 'toystory3@pixar.com'
>       userProfileSetemail(userWoody.token, newEmail, ctx)

httpTests/userTests/test_user_profile_setemail.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:37: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_________________________ testCannotChangeToTakenEmail _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='252399536', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='553478178', handleStr='')
ctx = None

    def testCannotChangeToTakenEmail(userWoody, userBuzz, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSetemail(userWoody.token, userBuzz.email, ctx)

httpTests/userTests/test_user_profile_setemail.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:37: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
______________________________ testInvalidEmail[] ______________________________

email = ''
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='483187402', handleStr='')
ctx = None

    @pytest.mark.parametrize('email', ['', 'bob', 'ab.com', '@gmail.com', 'ab@ab@gmail.com'])
    def testInvalidEmail(email, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSetemail(userWoody.token, email, ctx)

httpTests/userTests/test_user_profile_setemail.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:37: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
____________________________ testInvalidEmail[bob] _____________________________

email = 'bob'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='826890247', handleStr='')
ctx = None

    @pytest.mark.parametrize('email', ['', 'bob', 'ab.com', '@gmail.com', 'ab@ab@gmail.com'])
    def testInvalidEmail(email, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSetemail(userWoody.token, email, ctx)

httpTests/userTests/test_user_profile_setemail.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:37: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
___________________________ testInvalidEmail[ab.com] ___________________________

email = 'ab.com'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='819263872', handleStr='')
ctx = None

    @pytest.mark.parametrize('email', ['', 'bob', 'ab.com', '@gmail.com', 'ab@ab@gmail.com'])
    def testInvalidEmail(email, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSetemail(userWoody.token, email, ctx)

httpTests/userTests/test_user_profile_setemail.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:37: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_________________________ testInvalidEmail[@gmail.com] _________________________

email = '@gmail.com'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='960629340', handleStr='')
ctx = None

    @pytest.mark.parametrize('email', ['', 'bob', 'ab.com', '@gmail.com', 'ab@ab@gmail.com'])
    def testInvalidEmail(email, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSetemail(userWoody.token, email, ctx)

httpTests/userTests/test_user_profile_setemail.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:37: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
______________________ testInvalidEmail[ab@ab@gmail.com] _______________________

email = 'ab@ab@gmail.com'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='553273280', handleStr='')
ctx = None

    @pytest.mark.parametrize('email', ['', 'bob', 'ab.com', '@gmail.com', 'ab@ab@gmail.com'])
    def testInvalidEmail(email, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSetemail(userWoody.token, email, ctx)

httpTests/userTests/test_user_profile_setemail.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:37: in userProfileSetemail
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='300856734', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/userTests/test_user_profile_setemail.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
__________________________ testSuccessfulHandleChange __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='144441234', handleStr='')
ctx = None

    def testSuccessfulHandleChange(userWoody, ctx):
        newHandle = 'www'
>       userProfileSethandle(userWoody.token, newHandle, ctx)

httpTests/userTests/test_user_profile_sethandle.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:50: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
________________________ testCannotChangeToTakenHandle _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='880455080', handleStr='')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='486931171', handleStr='')
ctx = None

    def testCannotChangeToTakenHandle(userWoody, userBuzz, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSethandle(userWoody.token, userBuzz.handleStr, ctx)

httpTests/userTests/test_user_profile_sethandle.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:50: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testInvalidHandle[] ______________________________

handleStr = ''
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='631152896', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSethandle(userWoody.token, handleStr, ctx)

httpTests/userTests/test_user_profile_sethandle.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:50: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_____________________________ testInvalidHandle[a] _____________________________

handleStr = 'a'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='6478769', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSethandle(userWoody.token, handleStr, ctx)

httpTests/userTests/test_user_profile_sethandle.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:50: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
____________________________ testInvalidHandle[aa] _____________________________

handleStr = 'aa'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='773874807', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSethandle(userWoody.token, handleStr, ctx)

httpTests/userTests/test_user_profile_sethandle.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:50: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
___________________ testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] ___________________

handleStr = 'aaaaaaaaaaaaaaaaaaaaa'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='340396710', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSethandle(userWoody.token, handleStr, ctx)

httpTests/userTests/test_user_profile_sethandle.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:50: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
________________________ testInvalidHandle[new handle] _________________________

handleStr = 'new handle'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='248709759', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSethandle(userWoody.token, handleStr, ctx)

httpTests/userTests/test_user_profile_sethandle.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:50: in userProfileSethandle
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_________________________ testInvalidHandle[newh@ndle] _________________________

handleStr = 'newh@ndle'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='181008729', handleStr='')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSethandle(userWoody.token, handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/userTests/test_user_profile_sethandle.py:31: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='82244279', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/userTests/test_user_profile_sethandle.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_______________________ testUserProfileSetnameValidName ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='572891195', handleStr='')
ctx = None

    def testUserProfileSetnameValidName(userWoody, ctx):
        #  woody became japanese with family coming first
        userProfileSetname(userWoody.token, userWoody.nameLast, userWoody.nameFirst, ctx)
    
>       deets = userProfile(userWoody.token, userWoody.uId, ctx)['user']

httpTests/userTests/test_user_profile_setname.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:11: in userProfile
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
______________________________ testInvalidName[-] ______________________________

nameFirst = '', nameLast = ''
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='47777479', handleStr='')
ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'M' * 51])
    @pytest.mark.parametrize('nameLast', ['', 'P' * 51])
    def testInvalidName(nameFirst, nameLast, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSetname(userWoody.token, nameFirst, nameLast, ctx)

httpTests/userTests/test_user_profile_setname.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:24: in userProfileSetname
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
____ testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] _____

nameFirst = 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM', nameLast = ''
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='410703655', handleStr='')
ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'M' * 51])
    @pytest.mark.parametrize('nameLast', ['', 'P' * 51])
    def testInvalidName(nameFirst, nameLast, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSetname(userWoody.token, nameFirst, nameLast, ctx)

httpTests/userTests/test_user_profile_setname.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:24: in userProfileSetname
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
____ testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] _____

nameFirst = '', nameLast = 'PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='812043031', handleStr='')
ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'M' * 51])
    @pytest.mark.parametrize('nameLast', ['', 'P' * 51])
    def testInvalidName(nameFirst, nameLast, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSetname(userWoody.token, nameFirst, nameLast, ctx)

httpTests/userTests/test_user_profile_setname.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:24: in userProfileSetname
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_ testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] _

nameFirst = 'MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM'
nameLast = 'PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='237891383', handleStr='')
ctx = None

    @pytest.mark.parametrize('nameFirst', ['', 'M' * 51])
    @pytest.mark.parametrize('nameLast', ['', 'P' * 51])
    def testInvalidName(nameFirst, nameLast, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSetname(userWoody.token, nameFirst, nameLast, ctx)

httpTests/userTests/test_user_profile_setname.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:24: in userProfileSetname
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='172047870', handleStr='')
ctx = None

    def testInvalidToken(userWoody, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/userTests/test_user_profile_setname.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
___________________________ testReturnFormatCorrect ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='361050402', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testReturnFormatCorrect(userWoody, img, ctx):
>       assert userProfileUploadphoto(userWoody.token, img.url, img.xmin, img.ymin, img.xmax, img.ymax, ctx) == {}

httpTests/userTests/test_user_profile_uploadphoto.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
___________________________ testCannotUploadNonJpeg ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='669617993', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testCannotUploadNonJpeg(userWoody, img, ctx):
        with pytest.raises(BadRequest400):
>           userProfileUploadphoto(userWoody.token, 'https://i.imgur.com/L0mzsun.png', img.xmin, img.ymin, img.xmax, img.ymax, ctx)

httpTests/userTests/test_user_profile_uploadphoto.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
______________________ testInvalidDimensions[-1000-0-0-0] ______________________

xminDiff = -1000, ymaxDiff = 0, xmaxDiff = 0, yminDiff = 0
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='165887339', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    @pytest.mark.parametrize('xminDiff, yminDiff, xmaxDiff, ymaxDiff', [
        (-1000, 0, 0, 0),
        (0, -1000, 0, 0),
        (0, 0, -1000, 0),
        (0, 0, 0, -1000),
        (0, 0, 1000, 1000),
    ])
    def testInvalidDimensions(xminDiff, ymaxDiff, xmaxDiff, yminDiff, userWoody, img, ctx):
        with pytest.raises(BadRequest400):
            if xminDiff == yminDiff == xmaxDiff == ymaxDiff == 0:
                raise BadRequest400('lol this actually is valid')
            else:
>               userProfileUploadphoto(
                    userWoody.token,
                    img.url,
                    img.xmin + xminDiff,
                    img.ymin + yminDiff,
                    img.xmax + xmaxDiff,
                    img.ymax + ymaxDiff,
                    ctx
                )

httpTests/userTests/test_user_profile_uploadphoto.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
______________________ testInvalidDimensions[0--1000-0-0] ______________________

xminDiff = 0, ymaxDiff = 0, xmaxDiff = 0, yminDiff = -1000
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='941144161', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    @pytest.mark.parametrize('xminDiff, yminDiff, xmaxDiff, ymaxDiff', [
        (-1000, 0, 0, 0),
        (0, -1000, 0, 0),
        (0, 0, -1000, 0),
        (0, 0, 0, -1000),
        (0, 0, 1000, 1000),
    ])
    def testInvalidDimensions(xminDiff, ymaxDiff, xmaxDiff, yminDiff, userWoody, img, ctx):
        with pytest.raises(BadRequest400):
            if xminDiff == yminDiff == xmaxDiff == ymaxDiff == 0:
                raise BadRequest400('lol this actually is valid')
            else:
>               userProfileUploadphoto(
                    userWoody.token,
                    img.url,
                    img.xmin + xminDiff,
                    img.ymin + yminDiff,
                    img.xmax + xmaxDiff,
                    img.ymax + ymaxDiff,
                    ctx
                )

httpTests/userTests/test_user_profile_uploadphoto.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
______________________ testInvalidDimensions[0-0--1000-0] ______________________

xminDiff = 0, ymaxDiff = 0, xmaxDiff = -1000, yminDiff = 0
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='494149999', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    @pytest.mark.parametrize('xminDiff, yminDiff, xmaxDiff, ymaxDiff', [
        (-1000, 0, 0, 0),
        (0, -1000, 0, 0),
        (0, 0, -1000, 0),
        (0, 0, 0, -1000),
        (0, 0, 1000, 1000),
    ])
    def testInvalidDimensions(xminDiff, ymaxDiff, xmaxDiff, yminDiff, userWoody, img, ctx):
        with pytest.raises(BadRequest400):
            if xminDiff == yminDiff == xmaxDiff == ymaxDiff == 0:
                raise BadRequest400('lol this actually is valid')
            else:
>               userProfileUploadphoto(
                    userWoody.token,
                    img.url,
                    img.xmin + xminDiff,
                    img.ymin + yminDiff,
                    img.xmax + xmaxDiff,
                    img.ymax + ymaxDiff,
                    ctx
                )

httpTests/userTests/test_user_profile_uploadphoto.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
______________________ testInvalidDimensions[0-0-0--1000] ______________________

xminDiff = 0, ymaxDiff = -1000, xmaxDiff = 0, yminDiff = 0
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='937692581', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    @pytest.mark.parametrize('xminDiff, yminDiff, xmaxDiff, ymaxDiff', [
        (-1000, 0, 0, 0),
        (0, -1000, 0, 0),
        (0, 0, -1000, 0),
        (0, 0, 0, -1000),
        (0, 0, 1000, 1000),
    ])
    def testInvalidDimensions(xminDiff, ymaxDiff, xmaxDiff, yminDiff, userWoody, img, ctx):
        with pytest.raises(BadRequest400):
            if xminDiff == yminDiff == xmaxDiff == ymaxDiff == 0:
                raise BadRequest400('lol this actually is valid')
            else:
>               userProfileUploadphoto(
                    userWoody.token,
                    img.url,
                    img.xmin + xminDiff,
                    img.ymin + yminDiff,
                    img.xmax + xmaxDiff,
                    img.ymax + ymaxDiff,
                    ctx
                )

httpTests/userTests/test_user_profile_uploadphoto.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
_____________________ testInvalidDimensions[0-0-1000-1000] _____________________

xminDiff = 0, ymaxDiff = 1000, xmaxDiff = 1000, yminDiff = 0
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='327545626', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    @pytest.mark.parametrize('xminDiff, yminDiff, xmaxDiff, ymaxDiff', [
        (-1000, 0, 0, 0),
        (0, -1000, 0, 0),
        (0, 0, -1000, 0),
        (0, 0, 0, -1000),
        (0, 0, 1000, 1000),
    ])
    def testInvalidDimensions(xminDiff, ymaxDiff, xmaxDiff, yminDiff, userWoody, img, ctx):
        with pytest.raises(BadRequest400):
            if xminDiff == yminDiff == xmaxDiff == ymaxDiff == 0:
                raise BadRequest400('lol this actually is valid')
            else:
>               userProfileUploadphoto(
                    userWoody.token,
                    img.url,
                    img.xmin + xminDiff,
                    img.ymin + yminDiff,
                    img.xmax + xmaxDiff,
                    img.ymax + ymaxDiff,
                    ctx
                )

httpTests/userTests/test_user_profile_uploadphoto.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
__________________________ testXEndLessThanStartValue __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='242411806', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testXEndLessThanStartValue(userWoody, img, ctx):
        with pytest.raises(BadRequest400):
>           userProfileUploadphoto(userWoody.token, img.url, 60, 0, 30, 30, ctx)

httpTests/userTests/test_user_profile_uploadphoto.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
__________________________ testYEndLessThanStartValue __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='549884185', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testYEndLessThanStartValue(userWoody, img, ctx):
        with pytest.raises(BadRequest400):
>           userProfileUploadphoto(userWoody.token, img.url, 0, 60, 30, 30, ctx)

httpTests/userTests/test_user_profile_uploadphoto.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
________________________________ testInvalidUrl ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='791825946', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testInvalidUrl(userWoody, img, ctx):
        with pytest.raises(BadRequest400):
>           userProfileUploadphoto(userWoody.token, 'http://cgi.cse.unsw.edu.au/~jas/home/pics/jas5.jpg', img.xmin, img.ymin, img.xmax, img.ymax, ctx)

httpTests/userTests/test_user_profile_uploadphoto.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/user.py:76: in userProfileUploadphoto
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [404]>

httpTests/fakepi/util.py:143: Exception
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='559880469', handleStr='')
img = IMG(url='http://cgi.cse.unsw.edu.au/~jas/home/pics/jas.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    @iteration3
    def testInvalidToken(userWoody, img, ctx):
>       authLogout(userWoody.token, ctx)

httpTests/userTests/test_user_profile_uploadphoto.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/auth.py:23: in authLogout
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [400]>

httpTests/fakepi/util.py:143: Exception
=========================== short test summary info ============================
FAILED httpTests/adminTests/test_admin_user_remove.py::testRemovedProfileStillFetchableWithUserProfile
FAILED httpTests/adminTests/test_admin_user_remove.py::testRemovalNotInUsersAll
FAILED httpTests/adminTests/test_admin_user_remove.py::testHandleReusable - E...
FAILED httpTests/adminTests/test_admin_user_remove.py::testInvalidUser - Exce...
FAILED httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveLastOwner
FAILED httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveUserNonowner
FAILED httpTests/adminTests/test_admin_user_remove.py::testInvalidToken - Exc...
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testSuccessfulPermissionChange
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testCannotDemoteLastOwner
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testCannotPromoteOwner
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testNonownerCantChangePermissions
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testInvalidUser
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testInvalidPermission
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testSamePermission
FAILED httpTests/adminTests/test_admin_userpermission_change.py::testInvalidToken
FAILED httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions - Excep...
FAILED httpTests/authTests/test_auth_login.py::testUnregisteredUser - Excepti...
FAILED httpTests/authTests/test_auth_login.py::testRegisteredButIncorrectPassword
FAILED httpTests/authTests/test_auth_logout.py::testSuccessfulLogout - Except...
FAILED httpTests/authTests/test_auth_logout.py::testForbidden403WhenAlreadyLoggedOut
FAILED httpTests/authTests/test_auth_register.py::testInvalidEmail[@gmail.com]
FAILED httpTests/authTests/test_auth_register.py::testInvalidEmail[bob] - Exc...
FAILED httpTests/authTests/test_auth_register.py::testInvalidEmail[bob@bob@bob.com]
FAILED httpTests/authTests/test_auth_register.py::testInvalidPassword[12345]
FAILED httpTests/authTests/test_auth_register.py::testInvalidPassword[] - Exc...
FAILED httpTests/authTests/test_auth_register.py::testInvalidNameFirst[] - Ex...
FAILED httpTests/authTests/test_auth_register.py::testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]
FAILED httpTests/authTests/test_auth_register.py::testInvalidNameLast[] - Exc...
FAILED httpTests/authTests/test_auth_register.py::testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateEmail - Except...
FAILED httpTests/authTests/test_auth_register.py::testRemovedUserName - Excep...
FAILED httpTests/authTests/test_auth_register.py::testSuccessfulRegistration
FAILED httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith]
FAILED httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd]
FAILED httpTests/authTests/test_passwordreset_request.py::testReturnFormatCorrect
FAILED httpTests/authTests/test_passwordreset_request.py::testPasswordRequestLogsOutEverywhere
FAILED httpTests/authTests/test_passwordreset_reset.py::testInvalidPassword
FAILED httpTests/channelTests/test_channel_details.py::testInvalidChannelId
FAILED httpTests/channelTests/test_channel_leave.py::testInvalidChannelId - E...
FAILED httpTests/channels_tests/test_channels_create.py::testCreateChannel[True-andys room]
FAILED httpTests/channels_tests/test_channels_create.py::testCreateChannel[False-andys room]
FAILED httpTests/channels_tests/test_channels_create.py::testInvalidatedToken
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInNoChannels
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[True-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[False-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-True-ZERG-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-False-ZERG-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-True-ZERG-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-False-ZERG-andy]
FAILED httpTests/channels_tests/test_channels_list.py::testInvalidatedToken
FAILED httpTests/channels_tests/test_channels_listall.py::testWhenNoChannels
FAILED httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken
FAILED httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation - httpTe...
FAILED httpTests/dmTests/test_dm_create.py::testDmNameCreationSingle - httpTe...
FAILED httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple - http...
FAILED httpTests/dmTests/test_dm_create.py::testInvalidToken - Exception: <Re...
FAILED httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms - httpTests.e...
FAILED httpTests/dmTests/test_dm_list.py::testInvalidatedToken - Exception: <...
FAILED httpTests/messageTests/test_message_pin.py::testInvalidMessageId - Exc...
FAILED httpTests/messageTests/test_message_react.py::testInvalidMessageId - E...
FAILED httpTests/messageTests/test_message_send.py::testInvalidChannel - Exce...
FAILED httpTests/messageTests/test_message_senddm.py::testInvalidDm - Excepti...
FAILED httpTests/messageTests/test_message_unpin.py::testInvalidMessageId - E...
FAILED httpTests/messageTests/test_message_unreact.py::testInvalidMessageId
FAILED httpTests/otherTests/test_clear.py::testClearWorks - Failed: DID NOT R...
FAILED httpTests/otherTests/test_notifications_get.py::testInvalidToken - Exc...
FAILED httpTests/otherTests/test_search.py::testNoMatches - Exception: <Respo...
FAILED httpTests/otherTests/test_search.py::testInvalidSearch[] - Exception: ...
FAILED httpTests/otherTests/test_search.py::testInvalidSearch[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]
FAILED httpTests/otherTests/test_search.py::testInvalidToken - Exception: <Re...
FAILED httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll - Asser...
FAILED httpTests/otherTests/test_users_all.py::testInvalidToken - Exception: ...
FAILED httpTests/standupTests/test_standup_active.py::testInvalidChannelId - ...
FAILED httpTests/standupTests/test_standup_send.py::testInvalidChannelId - Ex...
FAILED httpTests/standupTests/test_standup_start.py::testInvalidChannelId - E...
FAILED httpTests/statsTests/test_user_stats.py::testReturnTypeCorrect - Excep...
FAILED httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelsCreate
FAILED httpTests/statsTests/test_user_stats.py::testDmsTrackedDmCreate - http...
FAILED httpTests/statsTests/test_user_stats.py::testInvolvementTracked - Exce...
FAILED httpTests/statsTests/test_user_stats.py::testInvalidToken - Exception:...
FAILED httpTests/statsTests/test_users_stats.py::testReturnTypeCorrect - Exce...
FAILED httpTests/statsTests/test_users_stats.py::testChannelsTrackedChannelsCreate
FAILED httpTests/statsTests/test_users_stats.py::testDmsTrackedDmCreate - htt...
FAILED httpTests/statsTests/test_users_stats.py::testUtilizationTracked - Exc...
FAILED httpTests/statsTests/test_users_stats.py::testInvalidToken - Exception...
FAILED httpTests/userTests/test_user_profile.py::testUserProfileValid - Excep...
FAILED httpTests/userTests/test_user_profile.py::testInvalidUser - Exception:...
FAILED httpTests/userTests/test_user_profile.py::testInvalidToken - Exception...
FAILED httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange
FAILED httpTests/userTests/test_user_profile_setemail.py::testCannotChangeToTakenEmail
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[]
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[bob]
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab.com]
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[@gmail.com]
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab@ab@gmail.com]
FAILED httpTests/userTests/test_user_profile_setemail.py::testInvalidToken - ...
FAILED httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange
FAILED httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken
FAILED httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidName[-]
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM]
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-]
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM]
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidToken - E...
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testReturnFormatCorrect
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testCannotUploadNonJpeg
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[-1000-0-0-0]
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0--1000-0-0]
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0--1000-0]
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0-0--1000]
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0-1000-1000]
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testXEndLessThanStartValue
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testYEndLessThanStartValue
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidUrl
FAILED httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidToken
ERROR httpTests/adminTests/test_admin_user_remove.py::testOnceRemovedUserCantDoAnything
ERROR httpTests/adminTests/test_admin_user_remove.py::testMessagesAfterUserRemovalCorrectFormat
ERROR httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromChannel
ERROR httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromDm
ERROR httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0]
ERROR httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0]
ERROR httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0]
ERROR httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1]
ERROR httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember
ERROR httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerMemberCanAddowner
ERROR httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCantAddownerWhenNonMember
ERROR httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner
ERROR httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate
ERROR httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic
ERROR httpTests/channelTests/test_channel_addowner.py::testMemberCannotAddOwner
ERROR httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner
ERROR httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId - h...
ERROR httpTests/channelTests/test_channel_addowner.py::testInvalidToken - htt...
ERROR httpTests/channelTests/test_channel_details.py::testMemberSuccessful - ...
ERROR httpTests/channelTests/test_channel_details.py::testNonMemberNotSuccessful
ERROR httpTests/channelTests/test_channel_details.py::testInvalidToken - http...
ERROR httpTests/channelTests/test_channel_invite.py::testDuplicateInvite - ht...
ERROR httpTests/channelTests/test_channel_invite.py::testInviteGlobalOwner - ...
ERROR httpTests/channelTests/test_channel_invite.py::testInviteGlobalMember
ERROR httpTests/channelTests/test_channel_invite.py::testInvitationFromNonChannelMember
ERROR httpTests/channelTests/test_channel_invite.py::testUIdInvalid - httpTes...
ERROR httpTests/channelTests/test_channel_invite.py::testInvalidatedToken - h...
ERROR httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPublic
ERROR httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate
ERROR httpTests/channelTests/test_channel_join.py::testGlobalMemberJoinPublic
ERROR httpTests/channelTests/test_channel_join.py::testGlobalMemberCantJoinPrivate
ERROR httpTests/channelTests/test_channel_join.py::testAlreadyJoinedChannel
ERROR httpTests/channelTests/test_channel_join.py::testInvalidatedToken - htt...
ERROR httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully
ERROR httpTests/channelTests/test_channel_leave.py::testLeaveChannelWhenNotMember
ERROR httpTests/channelTests/test_channel_leave.py::testInvalidToken - httpTe...
ERROR httpTests/channelTests/test_channel_messages.py::testMessageTimestamp
ERROR httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent
ERROR httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent
ERROR httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected
ERROR httpTests/channelTests/test_channel_messages.py::testRemovalByDeletionReflected
ERROR httpTests/channelTests/test_channel_messages.py::testBadRequest400WhenStartGreaterThanMessageNum
ERROR httpTests/channelTests/test_channel_messages.py::testForbidden403WhenUserIsNonMember
ERROR httpTests/channelTests/test_channel_messages.py::testForbidden403WhenInvalidTokenGiven
ERROR httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveNonOwner
ERROR httpTests/channelTests/test_channel_removeowner.py::testInvalidUId - ht...
ERROR httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken
ERROR httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel
ERROR httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPrivate
ERROR httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPublic
ERROR httpTests/channels_tests/test_channels_listall.py::testWhenMultipleChannelsExist
ERROR httpTests/dmTests/test_dm_details.py::testMemberSuccessful - httpTests....
ERROR httpTests/dmTests/test_dm_details.py::testNonMemberNotSuccessful - http...
ERROR httpTests/dmTests/test_dm_details.py::testInvalidToken - httpTests.erro...
ERROR httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully - htt...
ERROR httpTests/dmTests/test_dm_leave.py::testLeaveDmWhenNotMember - httpTest...
ERROR httpTests/dmTests/test_dm_leave.py::testInvalidToken - httpTests.error....
ERROR httpTests/dmTests/test_dm_list.py::testWhenInOneDm - httpTests.error.Ba...
ERROR httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm - httpTests.err...
ERROR httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent - htt...
ERROR httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent - http...
ERROR httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected - htt...
ERROR httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected
ERROR httpTests/dmTests/test_dm_messages.py::testBadRequest400WhenStartGreaterThanMessageNum
ERROR httpTests/dmTests/test_dm_messages.py::testForbidden403WhenUserIsNonMember
ERROR httpTests/dmTests/test_dm_messages.py::testForbidden403WhenInvalidTokenGiven
ERROR httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval - httpTest...
ERROR httpTests/dmTests/test_dm_remove.py::testRemovalRemovesMessages - httpT...
ERROR httpTests/dmTests/test_dm_remove.py::testNonownerCannotRemoveDm - httpT...
ERROR httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm
ERROR httpTests/dmTests/test_dm_remove.py::testInvalidDmId - httpTests.error....
ERROR httpTests/dmTests/test_dm_remove.py::testInvalidToken - httpTests.error...
ERROR httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel
ERROR httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm
ERROR httpTests/messageTests/test_message_edit.py::testOwnerCanEditMembersMessageChannel
ERROR httpTests/messageTests/test_message_edit.py::testOwnerCanEditMembersMessageDm
ERROR httpTests/messageTests/test_message_edit.py::testGlobalOwnerCanEditMembersMessageChannel
ERROR httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm
ERROR httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage
ERROR httpTests/messageTests/test_message_edit.py::testInvalidMessageLength
ERROR httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage
ERROR httpTests/messageTests/test_message_edit.py::testNonownerNonposterCantEdit
ERROR httpTests/messageTests/test_message_edit.py::testInvalidToken - httpTes...
ERROR httpTests/messageTests/test_message_meta.py::testMessageIdsUnique - htt...
ERROR httpTests/messageTests/test_message_meta.py::testMessageIdsUniqueIter3
ERROR httpTests/messageTests/test_message_pin.py::testSuccessfulPinChannelOwnerInChannel
ERROR httpTests/messageTests/test_message_pin.py::testSuccessfulPinDmOwnerInDm
ERROR httpTests/messageTests/test_message_pin.py::testSuccessfulPinGlobalOwnerInChannel
ERROR httpTests/messageTests/test_message_pin.py::testCannotPinTwice - httpTe...
ERROR httpTests/messageTests/test_message_pin.py::testChannelMemberCantPin - ...
ERROR httpTests/messageTests/test_message_pin.py::testDmMemberCantPin - httpT...
ERROR httpTests/messageTests/test_message_pin.py::testGlobalOwnerCantPinInDm
ERROR httpTests/messageTests/test_message_pin.py::testNonmemberCantPin - http...
ERROR httpTests/messageTests/test_message_pin.py::testInvalidToken - httpTest...
ERROR httpTests/messageTests/test_message_react.py::testSuccessfulReactInChannel
ERROR httpTests/messageTests/test_message_react.py::testSuccessfulReactToDmMessage
ERROR httpTests/messageTests/test_message_react.py::testTwoSuccessfulReactsToChannelMessage
ERROR httpTests/messageTests/test_message_react.py::testInvalidReactId - http...
ERROR httpTests/messageTests/test_message_react.py::testCantReactTwice - http...
ERROR httpTests/messageTests/test_message_react.py::testNonmemberCannotReact
ERROR httpTests/messageTests/test_message_react.py::testInvalidToken - httpTe...
ERROR httpTests/messageTests/test_message_remove.py::testOriginalPosterCanRemoveMessage
ERROR httpTests/messageTests/test_message_remove.py::testOwnerCanRemoveMembersMessage
ERROR httpTests/messageTests/test_message_remove.py::testGlobalOwnerCanRemoveMembersMessageChannel
ERROR httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm
ERROR httpTests/messageTests/test_message_remove.py::testCannotRemoveDeletedMessage
ERROR httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage
ERROR httpTests/messageTests/test_message_remove.py::testInvalidToken - httpT...
ERROR httpTests/messageTests/test_message_send.py::testValidMessage - httpTes...
ERROR httpTests/messageTests/test_message_send.py::testNonmemberPost - httpTe...
ERROR httpTests/messageTests/test_message_send.py::testInvalidMessage[] - htt...
ERROR httpTests/messageTests/test_message_send.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
ERROR httpTests/messageTests/test_message_send.py::testInvalidToken - httpTes...
ERROR httpTests/messageTests/test_message_senddm.py::testValidMessage - httpT...
ERROR httpTests/messageTests/test_message_senddm.py::testNonmemberPost - http...
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidMessage[] - h...
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
ERROR httpTests/messageTests/test_message_senddm.py::testInvalidToken - httpT...
ERROR httpTests/messageTests/test_message_sendlater.py::testValidFutureMessage
ERROR httpTests/messageTests/test_message_sendlater.py::testReturnsImmediately
ERROR httpTests/messageTests/test_message_sendlater.py::testInvalidReturnedIdUntilSent
ERROR httpTests/messageTests/test_message_sendlater.py::testNonmemberCannotSendlater
ERROR httpTests/messageTests/test_message_sendlater.py::testCannotTimeTravelAkaSendMessageInPast
ERROR httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[]
ERROR httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
ERROR httpTests/messageTests/test_message_sendlater.py::testInvalidChannel - ...
ERROR httpTests/messageTests/test_message_sendlater.py::testInvalidToken - ht...
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testValidFutureMessage
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testReturnsImmediately
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testInvalidReturnedIdUntilSent
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testNonmemberCannotSendlater
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testCannotTimeTravelAkaSendMessageInPast
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testInvalidMessage[]
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm]
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testInvalidDm - htt...
ERROR httpTests/messageTests/test_message_sendlaterdm.py::testInvalidToken - ...
ERROR httpTests/messageTests/test_message_share.py::testSuccessfulShareToChannel
ERROR httpTests/messageTests/test_message_share.py::testSuccessfulShareToDm
ERROR httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[True]
ERROR httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[False]
ERROR httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedDm
ERROR httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedChannel
ERROR httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedChannel
ERROR httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedDm
ERROR httpTests/messageTests/test_message_share.py::testInvalidOgMessageId - ...
ERROR httpTests/messageTests/test_message_share.py::testInvalidMessageLength
ERROR httpTests/messageTests/test_message_share.py::testShareToInvalidChannelId
ERROR httpTests/messageTests/test_message_share.py::testShareToInvalidDmId - ...
ERROR httpTests/messageTests/test_message_share.py::testInvalidToken - httpTe...
ERROR httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinChannelOwnerInChannel
ERROR httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinDmOwnerInDm
ERROR httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinGlobalOwnerInChannel
ERROR httpTests/messageTests/test_message_unpin.py::testCannotUnpinTwice - ht...
ERROR httpTests/messageTests/test_message_unpin.py::testChannelMemberCantUnpin
ERROR httpTests/messageTests/test_message_unpin.py::testDmMemberCantUnpin - h...
ERROR httpTests/messageTests/test_message_unpin.py::testGlobalOwnerCantUnpinInDm
ERROR httpTests/messageTests/test_message_unpin.py::testNonmemberCantUnpin - ...
ERROR httpTests/messageTests/test_message_unpin.py::testInvalidToken - httpTe...
ERROR httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactInChannel
ERROR httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactToDmMessage
ERROR httpTests/messageTests/test_message_unreact.py::testInvalidReactId - ht...
ERROR httpTests/messageTests/test_message_unreact.py::testCantUnreactTwice - ...
ERROR httpTests/messageTests/test_message_unreact.py::testNonmemberCannotUnreact
ERROR httpTests/messageTests/test_message_unreact.py::testInvalidToken - http...
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagNotInChannel - h...
ERROR httpTests/otherTests/test_notifications_get.py::testMultipleSameTagsOnlyOneNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagSelf - httpTests...
ERROR httpTests/otherTests/test_notifications_get.py::testMultipleTags - http...
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageSenddmTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageEditTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageShareTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testMessageSendlaterTagNotifiesWhenSent
ERROR httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterdmTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[a small message]
ERROR httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
ERROR httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[ch]
ERROR httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[dm]
ERROR httpTests/otherTests/test_notifications_get.py::testAddThruChInviteTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testAddThruDmCreateTriggersNotification
ERROR httpTests/otherTests/test_notifications_get.py::testMostRecent_20NotificationsFetched
ERROR httpTests/otherTests/test_search.py::testSingleMatch - httpTests.error....
ERROR httpTests/otherTests/test_search.py::testCaseInsensitiveMatch - httpTes...
ERROR httpTests/otherTests/test_search.py::testMultipleMatches - httpTests.er...
ERROR httpTests/otherTests/test_search.py::testMultipleChannelsJoined - httpT...
ERROR httpTests/otherTests/test_search.py::testSearchIncludesOnlyJoinedChannels
ERROR httpTests/otherTests/test_search.py::testSearchMatchesMoreThanJustAuthorisedUser
ERROR httpTests/standupTests/test_standup_active.py::testCorrectReturnFormat[True]
ERROR httpTests/standupTests/test_standup_active.py::testCorrectReturnFormat[False]
ERROR httpTests/standupTests/test_standup_active.py::testActiveStandup - http...
ERROR httpTests/standupTests/test_standup_active.py::testInactiveStandup - ht...
ERROR httpTests/standupTests/test_standup_active.py::testInvalidToken - httpT...
ERROR httpTests/standupTests/test_standup_send.py::testMessagesBufferedAndDisplayedCorrectly
ERROR httpTests/standupTests/test_standup_send.py::testStandupSendsAfterLoggedOut
ERROR httpTests/standupTests/test_standup_send.py::testReturnFormat - httpTes...
ERROR httpTests/standupTests/test_standup_send.py::testNonMemberCannotStandupSend
ERROR httpTests/standupTests/test_standup_send.py::testSendWhenStandupInactive
ERROR httpTests/standupTests/test_standup_send.py::testInvalidMessageLength
ERROR httpTests/standupTests/test_standup_send.py::testInvalidToken - httpTes...
ERROR httpTests/standupTests/test_standup_start.py::testStandupStartReturnFormat
ERROR httpTests/standupTests/test_standup_start.py::testStandupNoMessages - h...
ERROR httpTests/standupTests/test_standup_start.py::testReturnsImmediately - ...
ERROR httpTests/standupTests/test_standup_start.py::testStandupRestartableAfterLapse
ERROR httpTests/standupTests/test_standup_start.py::testStandupAffectsOnlyOneChannel
ERROR httpTests/standupTests/test_standup_start.py::testCreatorCannotLeaveDuringStartup
ERROR httpTests/standupTests/test_standup_start.py::testNonmemberCannotStartStandup
ERROR httpTests/standupTests/test_standup_start.py::testCannotStartStandupWhenAlreadyActive
ERROR httpTests/standupTests/test_standup_start.py::testInvalidStandupLength
ERROR httpTests/standupTests/test_standup_start.py::testInvalidToken - httpTe...
ERROR httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelJoin
ERROR httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelInvite
ERROR httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelLeave
ERROR httpTests/statsTests/test_user_stats.py::testDmsTrackedDmLeave - httpTe...
ERROR httpTests/statsTests/test_user_stats.py::testDmsTrackedDmRemove - httpT...
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSend
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSendlater
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddm
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddmlater
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageShare
ERROR httpTests/statsTests/test_user_stats.py::testMessagesTrackedStandupFinish
ERROR httpTests/statsTests/test_users_stats.py::testDmsTrackedDmRemove - http...
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSend
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSendlater
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddm
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddmlater
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageShare
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedStandupFinish
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedEditedToRemoval
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedDeleted - ...
ERROR httpTests/statsTests/test_users_stats.py::testMessagesTrackedDmRemoved
================= 122 failed, 18 passed, 238 errors in 10.24s ==================
