============================= test session starts ==============================
platform linux -- Python 3.9.2, pytest-6.2.2, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/import/cage/2/z5295293/CS1531/mark/project-automarking/tempstore/.hypothesis/examples')
rootdir: /import/cage/2/z5295293/CS1531/mark/project-automarking/tempstore
plugins: hypothesis-6.1.1, timeout-1.4.2, flask-0.15.1
collecting ... collected 378 items

httpTests/authTests/test_auth_login.py::testSuccessfulLogin PASSED       [  5%]
httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions PASSED    [  5%]
httpTests/authTests/test_auth_login.py::testUnregisteredUser PASSED      [  6%]
httpTests/authTests/test_auth_login.py::testRegisteredButIncorrectPassword PASSED [  6%]
httpTests/authTests/test_auth_logout.py::testSuccessfulLogout PASSED     [  6%]
httpTests/authTests/test_auth_logout.py::testForbidden403WhenAlreadyLoggedOut PASSED [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[@gmail.com] PASSED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob] PASSED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob@bob@bob.com] PASSED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[12345] PASSED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[] PASSED  [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[] PASSED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[] PASSED  [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] PASSED [  9%]
httpTests/authTests/test_auth_register.py::testDuplicateEmail PASSED     [  9%]
httpTests/authTests/test_auth_register.py::testRemovedUserName PASSED    [  9%]
httpTests/authTests/test_auth_register.py::testSuccessfulRegistration PASSED [ 10%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] PASSED [ 10%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] PASSED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] FAILED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] FAILED [ 11%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] FAILED [ 11%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] FAILED [ 11%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember PASSED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerMemberCanAddowner FAILED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCantAddownerWhenNonMember PASSED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner PASSED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate PASSED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testMemberCannotAddOwner PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidChannelId PASSED [ 15%]
httpTests/channelTests/test_channel_addowner.py::testInvalidToken PASSED [ 15%]
httpTests/channelTests/test_channel_details.py::testMemberSuccessful PASSED [ 15%]
httpTests/channelTests/test_channel_details.py::testNonMemberNotSuccessful PASSED [ 15%]
httpTests/channelTests/test_channel_details.py::testInvalidChannelId PASSED [ 16%]
httpTests/channelTests/test_channel_details.py::testInvalidToken PASSED  [ 16%]
httpTests/channelTests/test_channel_invite.py::testDuplicateInvite PASSED [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalOwner PASSED [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalMember PASSED [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvitationFromNonChannelMember PASSED [ 17%]
httpTests/channelTests/test_channel_invite.py::testChannelIdInvalid PASSED [ 17%]
httpTests/channelTests/test_channel_invite.py::testUIdInvalid PASSED     [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvalidatedToken PASSED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPublic PASSED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate FAILED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberJoinPublic PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberCantJoinPrivate PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testAlreadyJoinedChannel PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testJoinInvalidChannelId PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testInvalidatedToken PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testLeaveChannelWhenNotMember PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidChannelId PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidToken PASSED    [ 21%]
httpTests/channelTests/test_channel_messages.py::testMessageTimestamp FAILED [ 21%]
httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent FAILED [ 21%]
httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent FAILED [ 21%]
httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testRemovalByDeletionReflected PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testBadRequest400WhenStartGreaterThanMessageNum PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testForbidden403WhenUserIsNonMember PASSED [ 23%]
httpTests/channelTests/test_channel_messages.py::testBadRequest400WhenChannelIdInvalid PASSED [ 23%]
httpTests/channelTests/test_channel_messages.py::testForbidden403WhenInvalidTokenGiven PASSED [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner PASSED [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner FAILED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner PASSED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner PASSED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner PASSED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner FAILED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveNonOwner PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidUId PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testWithInvalidChannelId PASSED [ 26%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken PASSED [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[True-andys room] PASSED [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[False-andys room] PASSED [ 26%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 28%]
httpTests/channels_tests/test_channels_create.py::testInvalidatedToken PASSED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInNoChannels PASSED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[True-andy] PASSED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[False-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-True-ZERG-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-False-ZERG-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-True-ZERG-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-False-ZERG-andy] PASSED [ 30%]
httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel PASSED [ 30%]
httpTests/channels_tests/test_channels_list.py::testInvalidatedToken PASSED [ 30%]
httpTests/channels_tests/test_channels_listall.py::testWhenNoChannels PASSED [ 30%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPrivate PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPublic PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenMultipleChannelsExist PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken PASSED [ 32%]
httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation FAILED     [ 32%]
httpTests/dmTests/test_dm_create.py::testDmNameCreationSingle PASSED     [ 32%]
httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple PASSED   [ 32%]
httpTests/dmTests/test_dm_create.py::testDmToInvalidUsers PASSED         [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButOneInvalid PASSED   [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButDuplicate PASSED    [ 33%]
httpTests/dmTests/test_dm_create.py::testInvalidToken PASSED             [ 33%]
httpTests/dmTests/test_dm_details.py::testMemberSuccessful PASSED        [ 34%]
httpTests/dmTests/test_dm_details.py::testNonMemberNotSuccessful PASSED  [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidDmId PASSED             [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidToken PASSED            [ 34%]
httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully PASSED [ 35%]
httpTests/dmTests/test_dm_leave.py::testLeaveDmWhenNotMember PASSED      [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidDmId PASSED               [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidToken PASSED              [ 35%]
httpTests/dmTests/test_dm_list.py::testWhenInNoDms PASSED                [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInOneDm FAILED                [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms FAILED          [ 36%]
httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm PASSED           [ 37%]
httpTests/dmTests/test_dm_list.py::testInvalidatedToken FAILED           [ 37%]
httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent FAILED [ 37%]
httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent FAILED  [ 37%]
httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected FAILED [ 38%]
httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected FAILED [ 38%]
httpTests/dmTests/test_dm_messages.py::testBadRequest400WhenStartGreaterThanMessageNum PASSED [ 38%]
httpTests/dmTests/test_dm_messages.py::testForbidden403WhenUserIsNonMember PASSED [ 38%]
httpTests/dmTests/test_dm_messages.py::testBadRequest400WhenDmIdInvalid PASSED [ 39%]
httpTests/dmTests/test_dm_messages.py::testForbidden403WhenInvalidTokenGiven PASSED [ 39%]
httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval PASSED      [ 39%]
httpTests/dmTests/test_dm_remove.py::testNonownerCannotRemoveDm PASSED   [ 40%]
httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm FAILED [ 40%]
httpTests/dmTests/test_dm_remove.py::testInvalidDmId PASSED              [ 40%]
httpTests/dmTests/test_dm_remove.py::testInvalidToken PASSED             [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel PASSED [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm PASSED [ 41%]
httpTests/messageTests/test_message_edit.py::testOwnerCanEditMembersMessageChannel FAILED [ 41%]
httpTests/messageTests/test_message_edit.py::testOwnerCanEditMembersMessageDm FAILED [ 42%]
httpTests/messageTests/test_message_edit.py::testGlobalOwnerCanEditMembersMessageChannel FAILED [ 42%]
httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm PASSED [ 42%]
httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage PASSED [ 42%]
httpTests/messageTests/test_message_edit.py::testInvalidMessageLength PASSED [ 43%]
httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage PASSED [ 43%]
httpTests/messageTests/test_message_edit.py::testNonownerNonposterCantEdit PASSED [ 43%]
httpTests/messageTests/test_message_edit.py::testInvalidToken PASSED     [ 43%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUnique PASSED [ 44%]
httpTests/messageTests/test_message_remove.py::testOriginalPosterCanRemoveMessage PASSED [ 49%]
httpTests/messageTests/test_message_remove.py::testOwnerCanRemoveMembersMessage FAILED [ 49%]
httpTests/messageTests/test_message_remove.py::testGlobalOwnerCanRemoveMembersMessageChannel FAILED [ 50%]
httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm FAILED [ 50%]
httpTests/messageTests/test_message_remove.py::testCannotRemoveDeletedMessage PASSED [ 50%]
httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage PASSED [ 50%]
httpTests/messageTests/test_message_remove.py::testInvalidToken PASSED   [ 51%]
httpTests/messageTests/test_message_send.py::testValidMessage PASSED     [ 51%]
httpTests/messageTests/test_message_send.py::testNonmemberPost PASSED    [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidChannel PASSED   [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[] PASSED [ 52%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 52%]
httpTests/messageTests/test_message_send.py::testInvalidToken PASSED     [ 52%]
httpTests/messageTests/test_message_senddm.py::testValidMessage PASSED   [ 52%]
httpTests/messageTests/test_message_senddm.py::testNonmemberPost PASSED  [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidDm PASSED      [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[] PASSED [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidToken PASSED   [ 54%]
httpTests/otherTests/test_clear.py::testClearWorks FAILED                [ 67%]
httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll PASSED    [ 75%]
httpTests/otherTests/test_users_all.py::testInvalidToken FAILED          [ 75%]
httpTests/userTests/test_user_profile.py::testUserProfileValid PASSED    [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidUser PASSED         [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidToken PASSED        [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange PASSED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testCannotChangeToTakenEmail PASSED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[] PASSED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[bob] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab.com] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[@gmail.com] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab@ab@gmail.com] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidToken PASSED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange PASSED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[] FAILED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a] FAILED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa] FAILED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] FAILED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle] FAILED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle] FAILED [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken FAILED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName PASSED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidToken FAILED [ 97%]

====== Marks recorded: 85.68 ======


=================================== FAILURES ===================================
_ testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] _

first1 = 'abcdefghij', last1 = 'klmnopqrs', handle1 = 'abcdefghijklmnopqrs'
first2 = 'abcdefghij', last2 = 'klmnopqrs', handle2 = 'abcdefghijklmnopqrs0'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='642809697', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
        assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
    
        user2 = authRegister(email2, 'password1', first2, last2, ctx)
>       assert handle2 == userProfile(user2['token'], user2['authUserId'], ctx)['user']['handleStr']
E       AssertionError: assert 'abcdefghijklmnopqrs0' == 'abcdefghijklmnopqrs'
E         - abcdefghijklmnopqrs
E         + abcdefghijklmnopqrs0
E         ?                    +

httpTests/authTests/test_auth_register.py:99: AssertionError
_ testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] _

first1 = 'abcdefghij', last1 = 'klmnopqrst', handle1 = 'abcdefghijklmnopqrst'
first2 = 'abcdefghij', last2 = 'klmnopqrst', handle2 = 'abcdefghijklmnopqrst0'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='105155934', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
        assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
    
        user2 = authRegister(email2, 'password1', first2, last2, ctx)
>       assert handle2 == userProfile(user2['token'], user2['authUserId'], ctx)['user']['handleStr']
E       AssertionError: assert 'abcdefghijklmnopqrst0' == 'abcdefghijklmnopqrst'
E         - abcdefghijklmnopqrst
E         + abcdefghijklmnopqrst0
E         ?                     +

httpTests/authTests/test_auth_register.py:99: AssertionError
_ testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] _

first1 = '@bcdefgh!j', last1 = 'klmn opqrst', handle1 = 'bcdefghjklmnopqrst'
first2 = 'bcdefghj', last2 = 'klmnopqrst', handle2 = 'bcdefghjklmnopqrst0'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='344596498', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
>       assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
E       AssertionError: assert 'bcdefghjklmnopqrst' == '@bcdefgh!jklmn opqrs'
E         - @bcdefgh!jklmn opqrs
E         ? -       -     -
E         + bcdefghjklmnopqrst
E         ?                  +

httpTests/authTests/test_auth_register.py:96: AssertionError
___ testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] ___

first1 = 'abc', last1 = 'def0', handle1 = 'abcdef0', first2 = 'abc'
last2 = 'def', handle2 = 'abcdef1'
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='589438785', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('first1, last1, handle1, first2, last2, handle2', [
        ('abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs', 'abcdefghij', 'klmnopqrs', 'abcdefghijklmnopqrs0'),
        ('abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst', 'abcdefghij', 'klmnopqrst', 'abcdefghijklmnopqrst0'),
        ('@bcdefgh!j', 'klmn opqrst', 'bcdefghjklmnopqrst', 'bcdefghj', 'klmnopqrst', 'bcdefghjklmnopqrst0'),
        ('abc', 'def0', 'abcdef0', 'abc', 'def', 'abcdef1'),
    ])
    def testDuplicateHandlesGeneratedCorrectly(first1, last1, handle1, first2, last2, handle2, woodysPublicToybox, userWoody, ctx):
        email1 = 'blah1@email.com'
        email2 = 'blah2@email.com'
    
        authRegister('blah3@email.com', 'password1', 'abc', 'def', ctx)
    
        user1 = authRegister(email1, 'password1', first1, last1, ctx)
        assert handle1 == userProfile(user1['token'], user1['authUserId'], ctx)['user']['handleStr']
    
        user2 = authRegister(email2, 'password1', first2, last2, ctx)
>       assert handle2 == userProfile(user2['token'], user2['authUserId'], ctx)['user']['handleStr']
E       AssertionError: assert 'abcdef1' == 'abcdef'
E         - abcdef
E         + abcdef1
E         ?       +

httpTests/authTests/test_auth_register.py:99: AssertionError
_______________________ testGlobalOwnerMemberCanAddowner _______________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='197935016', handleStr='buzzlightyear')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[1], allMembers=[])
ctx = None

    def testGlobalOwnerMemberCanAddowner(userBuzz, woodysPublicToybox, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
>       channelAddowner(userBuzz.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:77: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'channelId is valid, but user is not an owner of the channel'}
______________________ testGlobalOwnerJoinChannelPrivate _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='986029919', handleStr='sheriffwoody')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=0, ownerMembers=[1], allMembers=[])
ctx = None

    def testGlobalOwnerJoinChannelPrivate(userWoody, zergsPrivateLair, ctx):
>       channelJoin(userWoody.token, zergsPrivateLair.channelId, ctx)

httpTests/channelTests/test_channel_join.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:64: in channelJoin
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'Channel is private'}
_____________________________ testMessageTimestamp _____________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='433898385', handleStr='sheriffwoody')
ctx = None

    def testMessageTimestamp(woodysPublicToybox, userWoody, ctx):
        expectedTime = utcNow()
        messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy', ctx)
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
>       assert abs(chMsgs['messages'][0]['timeSent'] - expectedTime) <= 2
E       assert 1679666724693 <= 2
E        +  where 1679666724693 = abs((1681348072765 - 1681348072))

httpTests/channelTests/test_channel_messages.py:19: AssertionError
__________________________ testUnderFiftyMessagesSent __________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='479470762', handleStr='sheriffwoody')
ctx = None

    def testUnderFiftyMessagesSent(woodysPublicToybox, userWoody, ctx):
        messageIds = [
            messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy', ctx)['messageId'] for x in
            range(10)
        ]
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
    
        assert chMsgs['start'] == 0
        assert chMsgs['end'] == -1
>       assert messageIds[::-1] == [m['messageId'] for m in chMsgs['messages']]
E       assert [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
E         At index 0 diff: 9 != 0
E         Full diff:
E         - [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
E         + [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

httpTests/channelTests/test_channel_messages.py:32: AssertionError
__________________________ testOverFiftyMessagesSent ___________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='404620819', handleStr='sheriffwoody')
ctx = None

    def testOverFiftyMessagesSent(woodysPublicToybox, userWoody, ctx):
        messageIds = [
            messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy', ctx)['messageId'] for x in
            range(51)
        ]
        messageIds.reverse()
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
        assert chMsgs['start'] == 0
        assert chMsgs['end'] == 50
>       assert messageIds[0: 50] == [m['messageId'] for m in chMsgs['messages']]
E       assert [50,\n 49,\n 48,\n 47,\n 46,\n 45,\n 44,\n 43,\n 42,\n 41,\n 40,\n 39,\n 38,\n 37,\n 36,\n 35,\n 34,\n 33,\n 32,\n 31,\n 30,\n 29,\n 28,\n 27,\n 26,\n 25,\n 24,\n 23,\n 22,\n 21,\n 20,\n 19,\n 18,\n 17,\n 16,\n 15,\n 14,\n 13,\n 12,\n 11,\n 10,\n 9,\n 8,\n 7,\n 6,\n 5,\n 4,\n 3,\n 2,\n 1] == [0,\n 1,\n 2,\n 3,\n 4,\n 5,\n 6,\n 7,\n 8,\n 9,\n 10,\n 11,\n 12,\n 13,\n 14,\n 15,\n 16,\n 17,\n 18,\n 19,\n 20,\n 21,\n 22,\n 23,\n 24,\n 25,\n 26,\n 27,\n 28,\n 29,\n 30,\n 31,\n 32,\n 33,\n 34,\n 35,\n 36,\n 37,\n 38,\n 39,\n 40,\n 41,\n 42,\n 43,\n 44,\n 45,\n 46,\n 47,\n 48,\n 49]
E         At index 0 diff: 50 != 0
E         Full diff:
E           [
E         -  0,
E         +  50,
E         ?  +
E         +  49,
E         +  48,
E         +  47,
E         +  46,
E         +  45,
E         +  44,
E         +  43,
E         +  42,
E         +  41,
E         +  40,
E         +  39,
E         +  38,
E         +  37,
E         +  36,
E         +  35,
E         +  34,
E         +  33,
E         +  32,
E         +  31,
E         +  30,
E         +  29,
E         +  28,
E         +  27,
E         +  26,
E         +  25,
E         +  24,
E         +  23,
E         +  22,
E         +  21,
E         +  20,
E         +  19,
E         +  18,
E         +  17,
E         +  16,
E         +  15,
E         +  14,
E         +  13,
E         +  12,
E         +  11,
E         +  10,
E         +  9,
E         +  8,
E         +  7,
E         +  6,
E         +  5,
E         +  4,
E         +  3,
E         +  2,
E            1,
E         -  2,
E         -  3,
E         -  4,
E         -  5,
E         -  6,
E         -  7,
E         -  8,
E         -  9,
E         -  10,
E         -  11,
E         -  12,
E         -  13,
E         -  14,
E         -  15,
E         -  16,
E         -  17,
E         -  18,
E         -  19,
E         -  20,
E         -  21,
E         -  22,
E         -  23,
E         -  24,
E         -  25,
E         -  26,
E         -  27,
E         -  28,
E         -  29,
E         -  30,
E         -  31,
E         -  32,
E         -  33,
E         -  34,
E         -  35,
E         -  36,
E         -  37,
E         -  38,
E         -  39,
E         -  40,
E         -  41,
E         -  42,
E         -  43,
E         -  44,
E         -  45,
E         -  46,
E         -  47,
E         -  48,
E         -  49,
E           ]

httpTests/channelTests/test_channel_messages.py:45: AssertionError
______________________ testGlobalOwnerMmberCanRemoveOwner ______________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=0, token='95945294', handleStr='lordzerg')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='753999516', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[1], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=2, token='28904899', handleStr='buzzlightyear')
ctx = None

    def testGlobalOwnerMmberCanRemoveOwner(userZerg, userWoody, woodysPublicToybox, userBuzz, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userZerg.uId, ctx)
    
        channelAddowner(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
>       channelRemoveowner(userZerg.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:90: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'channelId is valid, but user is not an owner of the channel'}
__________________________ testCannotRemoveLastOwner ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='239419584', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
ctx = None

    def testCannotRemoveLastOwner(userWoody, woodysPublicToybox, ctx):
        with pytest.raises(BadRequest400):
>           channelRemoveowner(userWoody.token, woodysPublicToybox.channelId, userWoody.uId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/channelTests/test_channel_removeowner.py:62: Failed
___________________________ testSuccessfulDmCreation ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='237534732', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='130072979', handleStr='buzzlightyear')
ctx = None

    def testSuccessfulDmCreation(userWoody, userBuzz, ctx):
        aDm = dmCreate(userWoody.token, [userBuzz.uId], ctx)
    
        woodysDms = dmList(userWoody.token, ctx)
        buzzsDms = dmList(userBuzz.token, ctx)
    
>       assert woodysDms['dms'][0]['dmId'] == aDm['dmId']
E       IndexError: list index out of range

httpTests/dmTests/test_dm_create.py:20: IndexError
_______________________________ testWhenInOneDm ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='530561163', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testWhenInOneDm(userWoody, woodyAndBuzzDm, ctx):
        dms = dmList(userWoody.token, ctx)
    
>       assert dms == {'dms': [{'name': woodyAndBuzzDm.name, 'dmId': woodyAndBuzzDm.dmId}]}
E       AssertionError: assert {'dms': []} == {'dms': [{'dmId': 0, 'name': 'buzzlightyear, sheriffwoody'}]}
E         Differing items:
E         {'dms': []} != {'dms': [{'dmId': 0, 'name': 'buzzlightyear, sheriffwoody'}]}
E         Full diff:
E         - {'dms': [{'dmId': 0, 'name': 'buzzlightyear, sheriffwoody'}]}
E         + {'dms': []}

httpTests/dmTests/test_dm_list.py:21: AssertionError
____________________________ testWhenInMultipleDms _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='882269797', handleStr='sheriffwoody')
dmFactory = <function dmFactory.<locals>.makeDm at 0x7f0a8fb97700>, ctx = None

    def testWhenInMultipleDms(userWoody, dmFactory, ctx):
        dm_1 = dmFactory(userWoody, [])
        dm_2 = dmFactory(userWoody, [])
    
        expected = [{'dmId': dm_1.dmId, 'name': dm_1.name}, {'dmId': dm_2.dmId, 'name': dm_2.name}]
        actual = dmList(userWoody.token, ctx)['dms']
    
>       assert sorted(actual, key=lambda d: d['dmId']) == sorted(expected, key=lambda d: d['dmId'])
E       AssertionError: assert [] == [{'dmId': 0, 'name': 'sheriffwoody'}, {'dmId': 1, 'name': 'sheriffwoody'}]
E         Right contains 2 more items, first extra item: {'dmId': 0, 'name': 'sheriffwoody'}
E         Full diff:
E         - [{'dmId': 0, 'name': 'sheriffwoody'}, {'dmId': 1, 'name': 'sheriffwoody'}]
E         + []

httpTests/dmTests/test_dm_list.py:31: AssertionError
_____________________________ testInvalidatedToken _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='574071436', handleStr='sheriffwoody')
ctx = None

    def testInvalidatedToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           dmList(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/dmTests/test_dm_list.py:43: Failed
__________________________ testUnderFiftyMessagesSent __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='557567705', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testUnderFiftyMessagesSent(userWoody, woodyAndBuzzDm, ctx):
        messageIds = [
            messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy', ctx)['messageId'] for x in
            range(10)
        ]
    
        dmMsgs = dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
    
        assert dmMsgs['start'] == 0
        assert dmMsgs['end'] == -1
>       assert messageIds[::-1] == [m['messageId'] for m in dmMsgs['messages']]
E       assert [10, 9, 8, 7, 6, 5, 4, 3, 2, 1] == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
E         At index 0 diff: 10 != 1
E         Full diff:
E         - [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
E         + [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

httpTests/dmTests/test_dm_messages.py:25: AssertionError
__________________________ testOverFiftyMessagesSent ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='674289523', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testOverFiftyMessagesSent(userWoody, woodyAndBuzzDm, ctx):
        messageIds = [
            messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy', ctx)['messageId'] for x in
            range(51)
        ]
        messageIds.reverse()
    
        dmMsgs = dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
        assert dmMsgs['start'] == 0
        assert dmMsgs['end'] == 50
>       assert messageIds[0: 50] == [m['messageId'] for m in dmMsgs['messages']]
E       assert [51,\n 50,\n 49,\n 48,\n 47,\n 46,\n 45,\n 44,\n 43,\n 42,\n 41,\n 40,\n 39,\n 38,\n 37,\n 36,\n 35,\n 34,\n 33,\n 32,\n 31,\n 30,\n 29,\n 28,\n 27,\n 26,\n 25,\n 24,\n 23,\n 22,\n 21,\n 20,\n 19,\n 18,\n 17,\n 16,\n 15,\n 14,\n 13,\n 12,\n 11,\n 10,\n 9,\n 8,\n 7,\n 6,\n 5,\n 4,\n 3,\n 2] == [1,\n 2,\n 3,\n 4,\n 5,\n 6,\n 7,\n 8,\n 9,\n 10,\n 11,\n 12,\n 13,\n 14,\n 15,\n 16,\n 17,\n 18,\n 19,\n 20,\n 21,\n 22,\n 23,\n 24,\n 25,\n 26,\n 27,\n 28,\n 29,\n 30,\n 31,\n 32,\n 33,\n 34,\n 35,\n 36,\n 37,\n 38,\n 39,\n 40,\n 41,\n 42,\n 43,\n 44,\n 45,\n 46,\n 47,\n 48,\n 49,\n 50]
E         At index 0 diff: 51 != 1
E         Full diff:
E           [
E         -  1,
E         +  51,
E         ?  +
E         +  50,
E         +  49,
E         +  48,
E         +  47,
E         +  46,
E         +  45,
E         +  44,
E         +  43,
E         +  42,
E         +  41,
E         +  40,
E         +  39,
E         +  38,
E         +  37,
E         +  36,
E         +  35,
E         +  34,
E         +  33,
E         +  32,
E         +  31,
E         +  30,
E         +  29,
E         +  28,
E         +  27,
E         +  26,
E         +  25,
E         +  24,
E         +  23,
E         +  22,
E         +  21,
E         +  20,
E         +  19,
E         +  18,
E         +  17,
E         +  16,
E         +  15,
E         +  14,
E         +  13,
E         +  12,
E         +  11,
E         +  10,
E         +  9,
E         +  8,
E         +  7,
E         +  6,
E         +  5,
E         +  4,
E         +  3,
E            2,
E         -  3,
E         -  4,
E         -  5,
E         -  6,
E         -  7,
E         -  8,
E         -  9,
E         -  10,
E         -  11,
E         -  12,
E         -  13,
E         -  14,
E         -  15,
E         -  16,
E         -  17,
E         -  18,
E         -  19,
E         -  20,
E         -  21,
E         -  22,
E         -  23,
E         -  24,
E         -  25,
E         -  26,
E         -  27,
E         -  28,
E         -  29,
E         -  30,
E         -  31,
E         -  32,
E         -  33,
E         -  34,
E         -  35,
E         -  36,
E         -  37,
E         -  38,
E         -  39,
E         -  40,
E         -  41,
E         -  42,
E         -  43,
E         -  44,
E         -  45,
E         -  46,
E         -  47,
E         -  48,
E         -  49,
E         -  50,
E           ]

httpTests/dmTests/test_dm_messages.py:38: AssertionError
__________________________ testRemovalByEditReflected __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='953521462', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testRemovalByEditReflected(userWoody, woodyAndBuzzDm, ctx):
        msg = messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy maybe?', ctx)['messageId']
    
        dmMsgs = dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
        assert dmMsgs['start'] == 0
        assert dmMsgs['end'] == -1
        assert msg in [m['messageId'] for m in dmMsgs['messages']]
    
>       messageEdit(userWoody.token, msg, '', ctx)

httpTests/dmTests/test_dm_messages.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:37: in messageEdit
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:143: Exception
________________________ testRemovalByDeletionReflected ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='970189016', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testRemovalByDeletionReflected(userWoody, woodyAndBuzzDm, ctx):
        msg = messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy maybe?', ctx)['messageId']
    
        chMsgs = dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
        assert chMsgs['start'] == 0
        assert chMsgs['end'] == -1
        assert msg in [m['messageId'] for m in chMsgs['messages']]
    
>       messageRemove(userWoody.token, msg, ctx)

httpTests/dmTests/test_dm_messages.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:24: in messageRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:143: Exception
_______________________ testOwnerNonmemberCannotRemoveDm _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='826841080', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testOwnerNonmemberCannotRemoveDm(userWoody, woodyAndBuzzDm, ctx):
        dmLeave(userWoody.token, woodyAndBuzzDm.dmId, ctx)
        with pytest.raises(Forbidden403):
>           dmRemove(userWoody.token, woodyAndBuzzDm.dmId, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/dmTests/test_dm_remove.py:42: Failed
____________________ testOwnerCanEditMembersMessageChannel _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='918078572', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='365734443', handleStr='buzzlightyear')
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f0a8fc62af0>
ctx = None

    def testOwnerCanEditMembersMessageChannel(userWoody, woodysPublicToybox, userBuzz, messageFactory, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
        buzzsMsg = messageFactory(userBuzz, woodysPublicToybox)
    
>       messageEdit(userWoody.token, buzzsMsg.messageId, 'hi', ctx)

httpTests/messageTests/test_message_edit.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:37: in messageEdit
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is not the sender of the message with ID messageId'}
_______________________ testOwnerCanEditMembersMessageDm _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='630166303', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='401197266', handleStr='buzzlightyear')
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f0a8fb97d30>
ctx = None

    def testOwnerCanEditMembersMessageDm(userWoody, woodyAndBuzzDm, userBuzz, messageFactory, ctx):
        buzzsMsg = messageFactory(userBuzz, woodyAndBuzzDm)
    
>       messageEdit(userWoody.token, buzzsMsg.messageId, 'hi', ctx)

httpTests/messageTests/test_message_edit.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:37: in messageEdit
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is not the sender of the message with ID messageId'}
_________________ testGlobalOwnerCanEditMembersMessageChannel __________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=0, token='22381276', handleStr='lordzerg')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='711382011', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f0a8fc08040>
ctx = None

    def testGlobalOwnerCanEditMembersMessageChannel(userZerg, userWoody, woodysPublicToybox, messageFactory, ctx):
        woodysMsg = messageFactory(userWoody, woodysPublicToybox)
        channelJoin(userZerg.token, woodysPublicToybox.channelId, ctx)
>       messageEdit(userZerg.token, woodysMsg.messageId, 'hi', ctx)

httpTests/messageTests/test_message_edit.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:37: in messageEdit
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is not the sender of the message with ID messageId'}
_______________________ testOwnerCanRemoveMembersMessage _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='170695479', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='306253716', handleStr='buzzlightyear')
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f0a8fc08ca0>
ctx = None

    def testOwnerCanRemoveMembersMessage(userWoody, woodysPublicToybox, userBuzz, messageFactory, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
        buzzsMsg = messageFactory(userBuzz, woodysPublicToybox)
    
>       messageRemove(userWoody.token, buzzsMsg.messageId, ctx)

httpTests/messageTests/test_message_remove.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:24: in messageRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is not the sender of the message with ID messageId'}
________________ testGlobalOwnerCanRemoveMembersMessageChannel _________________

userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=0, token='672759388', handleStr='lordzerg')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='583856995', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[1], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f0a8fc5a1f0>
ctx = None

    def testGlobalOwnerCanRemoveMembersMessageChannel(userZerg, userWoody, woodysPublicToybox, messageFactory, ctx):
        woodysMsg = messageFactory(userWoody, woodysPublicToybox)
        channelJoin(userZerg.token, woodysPublicToybox.channelId, ctx)
>       messageRemove(userZerg.token, woodysMsg.messageId, ctx)

httpTests/messageTests/test_message_remove.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:24: in messageRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [200]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
>               raise error.BadRequest400()
E               httpTests.error.BadRequest400: 400 Bad Request: None

httpTests/fakepi/util.py:139: BadRequest400
----------------------------- Captured stdout call -----------------------------
{'error': 'authUserId is not the sender of the message with ID messageId'}
__________________ testGlobalOwnerCantRemoveMembersMessageDm ___________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='660660930', handleStr='buzzlightyear')
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=1, token='90444585', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=1, members=[0], name='buzzlightyear, sheriffwoody', dmId=0)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f0a8fb97a60>
ctx = None

    def testGlobalOwnerCantRemoveMembersMessageDm(userBuzz, userWoody, woodyAndBuzzDm, messageFactory, ctx):
        woodysMsg = messageFactory(userWoody, woodyAndBuzzDm)
        with pytest.raises(Forbidden403):
>           messageRemove(userBuzz.token, woodysMsg.messageId, ctx)

httpTests/messageTests/test_message_remove.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/message.py:24: in messageRemove
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            data = json.loads(res.text)
            # error handling for iteration 2, without exceptions
            if 'error' in data:
                print(data)
                raise error.BadRequest400()
            else:
                return res.json()
        else:
>           raise Exception(res)
E           Exception: <Response [500]>

httpTests/fakepi/util.py:143: Exception
________________________________ testClearWorks ________________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='880973875', handleStr='sheriffwoody')
userFactory = <function userFactory.<locals>.makeUser at 0x7f0a8fb97a60>
ctx = None

    def testClearWorks(userWoody, userFactory, ctx):
        # an existing user can do something
        assert usersAll(userWoody.token, ctx) is not None
    
        clear(ctx)
    
        with pytest.raises(Forbidden403):
            #  ex-existing user now can't do the original action because they don't exist
>           usersAll(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/otherTests/test_clear.py:23: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='808124937', handleStr='sheriffwoody')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           usersAll(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/otherTests/test_users_all.py:29: Failed
________________________ testCannotChangeToTakenHandle _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='77065081', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='846715189', handleStr='buzzlightyear')
ctx = None

    def testCannotChangeToTakenHandle(userWoody, userBuzz, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSethandle(userWoody.token, userBuzz.handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/userTests/test_user_profile_sethandle.py:25: Failed
_____________________________ testInvalidHandle[] ______________________________

handleStr = ''
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='673461127', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSethandle(userWoody.token, handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/userTests/test_user_profile_sethandle.py:31: Failed
_____________________________ testInvalidHandle[a] _____________________________

handleStr = 'a'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='340764181', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSethandle(userWoody.token, handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/userTests/test_user_profile_sethandle.py:31: Failed
____________________________ testInvalidHandle[aa] _____________________________

handleStr = 'aa'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='473577440', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSethandle(userWoody.token, handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/userTests/test_user_profile_sethandle.py:31: Failed
___________________ testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] ___________________

handleStr = 'aaaaaaaaaaaaaaaaaaaaa'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='959023339', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSethandle(userWoody.token, handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/userTests/test_user_profile_sethandle.py:31: Failed
________________________ testInvalidHandle[new handle] _________________________

handleStr = 'new handle'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='924051567', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSethandle(userWoody.token, handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/userTests/test_user_profile_sethandle.py:31: Failed
_________________________ testInvalidHandle[newh@ndle] _________________________

handleStr = 'newh@ndle'
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='28288140', handleStr='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('handleStr', ['', 'a', 'aa', 'a' * 21, 'new handle', 'newh@ndle'])
    def testInvalidHandle(handleStr, userWoody, ctx):
        with pytest.raises(BadRequest400):
>           userProfileSethandle(userWoody.token, handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/userTests/test_user_profile_sethandle.py:31: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='262766916', handleStr='sheriffwoody')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           userProfileSethandle(userWoody.token, userWoody.handleStr, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/userTests/test_user_profile_sethandle.py:37: Failed
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='432016141', handleStr='sheriffwoody')
ctx = None

    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(Forbidden403):
>           userProfileSetname(userWoody.token, userWoody.nameLast, userWoody.nameFirst, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.BadRequest400'>

httpTests/userTests/test_user_profile_setname.py:34: Failed
=========================== short test summary info ============================
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0]
FAILED httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1]
FAILED httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerMemberCanAddowner
FAILED httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate
FAILED httpTests/channelTests/test_channel_messages.py::testMessageTimestamp
FAILED httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent
FAILED httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent
FAILED httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner
FAILED httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner
FAILED httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation - IndexE...
FAILED httpTests/dmTests/test_dm_list.py::testWhenInOneDm - AssertionError: a...
FAILED httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms - AssertionEr...
FAILED httpTests/dmTests/test_dm_list.py::testInvalidatedToken - Failed: DID ...
FAILED httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent - as...
FAILED httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent - ass...
FAILED httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected - Ex...
FAILED httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected
FAILED httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm
FAILED httpTests/messageTests/test_message_edit.py::testOwnerCanEditMembersMessageChannel
FAILED httpTests/messageTests/test_message_edit.py::testOwnerCanEditMembersMessageDm
FAILED httpTests/messageTests/test_message_edit.py::testGlobalOwnerCanEditMembersMessageChannel
FAILED httpTests/messageTests/test_message_remove.py::testOwnerCanRemoveMembersMessage
FAILED httpTests/messageTests/test_message_remove.py::testGlobalOwnerCanRemoveMembersMessageChannel
FAILED httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm
FAILED httpTests/otherTests/test_clear.py::testClearWorks - Failed: DID NOT R...
FAILED httpTests/otherTests/test_users_all.py::testInvalidToken - Failed: DID...
FAILED httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle]
FAILED httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken
FAILED httpTests/userTests/test_user_profile_setname.py::testInvalidToken - F...
================= 37 failed, 154 passed, 187 skipped in 6.21s ==================
