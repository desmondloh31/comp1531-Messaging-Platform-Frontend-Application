
> test
> jest **/?(*.)+(test).ts

  Invalid testPattern **/?(*.)+(test).ts supplied. Running all tests instead.
  Invalid testPattern **/?(*.)+(test).ts supplied. Running all tests instead.
PASS src/tests/dm.test.ts (26.579 s)
FAIL src/channel.test.ts (9.054 s)
  ● Testing channelLeaveV1 › allowing a member of a channel to leave the channel

    expect(received).toEqual(expected) // deep equality

    Expected: {}
    Received: 400

      81 |   test('allowing a member of a channel to leave the channel', () => {
      82 |     const result = requestChannelleavev1(user1.token, channel1);
    > 83 |     expect(result).toEqual({});
         |                    ^
      84 |   });
      85 |
      86 |   test('token generated is invalid', () => {

      at Object.<anonymous> (src/channel.test.ts:83:20)

  ● Testing channelLeaveV1 › token generated is invalid

    expect(received).toEqual(expected) // deep equality

    Expected: {"error": "token is invalid"}
    Received: 400

      86 |   test('token generated is invalid', () => {
      87 |     const result = requestChannelleavev1('wrong token', channel1);
    > 88 |     expect(result).toEqual({ error: 'token is invalid' });
         |                    ^
      89 |   });
      90 |
      91 |   test('channelId does not refer to a valid channel', () => {

      at Object.<anonymous> (src/channel.test.ts:88:20)

  ● Testing channelLeaveV1 › user is not a member of the channel

    expect(received).toEqual(expected) // deep equality

    Expected: 403
    Received: 400

       96 |   test('user is not a member of the channel', () => {
       97 |     const result = requestChannelleavev1(user2.token, channel1);
    >  98 |     expect(result).toEqual(403);
          |                    ^
       99 |   });
      100 | });
      101 |

      at Object.<anonymous> (src/channel.test.ts:98:20)

  ● Testing the addowner function › Adding a user as an owner to the channel

    expect(received).toEqual(expected) // deep equality

    Expected: {}
    Received: 403

      124 |     requestChannelJoin(user2.token, channel1);
      125 |     const result = requestChanneladdowner(user1.token, channel1, user2.authUserId);
    > 126 |     expect(result).toEqual({});
          |                    ^
      127 |   });
      128 |
      129 |   test('should return error with invalid token', () => {

      at Object.<anonymous> (src/channel.test.ts:126:20)

  ● Testing the addowner function › should return error with invalid token

    expect(received).toEqual(expected) // deep equality

    Expected: {"error": "token is invalid"}
    Received: 403

      130 |     requestChannelJoin(user2.token, channel1);
      131 |     const result = requestChanneladdowner('not a string', channel1, user2.authUserId);
    > 132 |     expect(result).toEqual({ error: 'token is invalid' });
          |                    ^
      133 |   });
      134 |
      135 |   test('should return error with invalid channelId', () => {

      at Object.<anonymous> (src/channel.test.ts:132:20)

  ● Testing the addowner function › should return error with invalid channelId

    expect(received).toEqual(expected) // deep equality

    Expected: 400
    Received: 403

      135 |   test('should return error with invalid channelId', () => {
      136 |     const result = requestChanneladdowner(user1.token, -1, user2.authUserId);
    > 137 |     expect(result).toEqual(400);
          |                    ^
      138 |   });
      139 |
      140 |   test('should return error with invalid uId', () => {

      at Object.<anonymous> (src/channel.test.ts:137:20)

  ● Testing the addowner function › should return error with invalid uId

    expect(received).toEqual(expected) // deep equality

    Expected: {"error": "user is not valid"}
    Received: 403

      140 |   test('should return error with invalid uId', () => {
      141 |     const result = requestChanneladdowner(user1.token, channel1, -1);
    > 142 |     expect(result).toEqual({ error: 'user is not valid' });
          |                    ^
      143 |   });
      144 |
      145 |   test('should return error with uId not in channel', () => {

      at Object.<anonymous> (src/channel.test.ts:142:20)

  ● Testing the addowner function › should return error with uId not in channel

    expect(received).toEqual(expected) // deep equality

    Expected: 400
    Received: 403

      145 |   test('should return error with uId not in channel', () => {
      146 |     const result = requestChanneladdowner(user1.token, channel1, user2.authUserId);
    > 147 |     expect(result).toEqual(400);
          |                    ^
      148 |   });
      149 |
      150 |   test('should return error with uId already an owner', () => {

      at Object.<anonymous> (src/channel.test.ts:147:20)

  ● Testing the addowner function › should return error with uId already an owner

    expect(received).toEqual(expected) // deep equality

    Expected: 400
    Received: 403

      150 |   test('should return error with uId already an owner', () => {
      151 |     const result = requestChanneladdowner(user2.token, channel2, user2.authUserId);
    > 152 |     expect(result).toEqual(400);
          |                    ^
      153 |   });
      154 |
      155 |   test('should return error with user without owner permissions', () => {

      at Object.<anonymous> (src/channel.test.ts:152:20)

  ● Testing the removeowner function › removing an owner from the channel

    expect(received).toEqual(expected) // deep equality

    Expected: {}
    Received: 403

      182 |     requestChannelJoin(user2.token, channel1);
      183 |     const result = requestChannelremoveowner(user1.token, channel1, user2.authUserId);
    > 184 |     expect(result).toEqual({});
          |                    ^
      185 |   });
      186 |
      187 |   test('should return error with invalid token', () => {

      at Object.<anonymous> (src/channel.test.ts:184:20)

  ● Testing the removeowner function › should return error with invalid token

    expect(received).toEqual(expected) // deep equality

    Expected: {"error": "token is invalid"}
    Received: 403

      188 |     requestChannelJoin(user2.token, channel1);
      189 |     const result = requestChannelremoveowner('not a string', channel1, user2.authUserId);
    > 190 |     expect(result).toEqual({ error: 'token is invalid' });
          |                    ^
      191 |   });
      192 |
      193 |   test('should return error with invalid channelId', () => {

      at Object.<anonymous> (src/channel.test.ts:190:20)

  ● Testing the removeowner function › should return error with invalid channelId

    expect(received).toEqual(expected) // deep equality

    Expected: 400
    Received: 403

      193 |   test('should return error with invalid channelId', () => {
      194 |     const result = requestChanneladdowner(user1.token, -1, user2.authUserId);
    > 195 |     expect(result).toEqual(400);
          |                    ^
      196 |   });
      197 |
      198 |   test('should return error with invalid uId', () => {

      at Object.<anonymous> (src/channel.test.ts:195:20)

  ● Testing the removeowner function › should return error with invalid uId

    expect(received).toEqual(expected) // deep equality

    Expected: {"error": "user is not valid"}
    Received: 403

      198 |   test('should return error with invalid uId', () => {
      199 |     const result = requestChannelremoveowner(user1.token, channel1, -1);
    > 200 |     expect(result).toEqual({ error: 'user is not valid' });
          |                    ^
      201 |   });
      202 |
      203 |   test('should return error with uId not in channel', () => {

      at Object.<anonymous> (src/channel.test.ts:200:20)

  ● Testing the removeowner function › should return error with uId not in channel

    expect(received).toEqual(expected) // deep equality

    Expected: 400
    Received: 403

      203 |   test('should return error with uId not in channel', () => {
      204 |     const result = requestChannelremoveowner(user1.token, channel1, user2.authUserId);
    > 205 |     expect(result).toEqual(400);
          |                    ^
      206 |   });
      207 |
      208 |   test('should return error with user without owner permissions', () => {

      at Object.<anonymous> (src/channel.test.ts:205:20)

  ● Testing channelJoinV1 › channelId is invalid

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 403

      351 |     const channelId2 = -1;
      352 |     const result = requestChannelJoin(authId2.token, channelId2);
    > 353 |     expect(result).toStrictEqual(400);
          |                    ^
      354 |   });
      355 |
      356 |   // test that authorised user is already member of channel

      at Object.<anonymous> (src/channel.test.ts:353:20)

  ● Testing channelJoinV1 › Authorised user is already a member

    expect(received).toStrictEqual(expected) // deep equality

    Expected: 400
    Received: 403

      359 |     const channel1 = requestChannelscreate(authId1.token, 'channel1', true);
      360 |     const result = requestChannelJoin(authId1.token, channel1);
    > 361 |     expect(result).toStrictEqual(400);
          |                    ^
      362 |   });
      363 |
      364 |   // test that new authorised user cannot join private channel when not a member

      at Object.<anonymous> (src/channel.test.ts:361:20)

  ● Testing channelJoinV1 › Authorised user Id is invalid

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {"error": Any<String>}
    Received: 403

      375 |
      376 |     const result = requestChannelJoin('null', channel1);
    > 377 |     expect(result).toStrictEqual(ERROR);
          |                    ^
      378 |   });
      379 |
      380 |   // test that valid parameters permits authorised user to join channel

      at Object.<anonymous> (src/channel.test.ts:377:20)

  ● Testing channelJoinV1 › Authorised user successfully joins channel

    expect(received).toStrictEqual(expected) // deep equality

    Expected: {}
    Received: 403

      384 |     const channel1 = requestChannelscreate(authId2.token, 'channel1', true);
      385 |     const result = requestChannelJoin(authId1.token, channel1.channelId);
    > 386 |     expect(result).toStrictEqual({});
          |                    ^
      387 |   });
      388 | });
      389 |

      at Object.<anonymous> (src/channel.test.ts:386:20)

FAIL src/standup.test.ts (9.794 s)
  ● testing getNotificationsV1 › function return 20 most recent notifications

    expect(received).toEqual(expected) // deep equality

    Expected: [{"message": "notification 25", "notificationId": 25, "timestamp": Any<Number>}, {"message": "notification 24", "notificationId": 24, "timestamp": Any<Number>}, {"message": "notification 23", "notificationId": 23, "timestamp": Any<Number>}, {"message": "notification 22", "notificationId": 22, "timestamp": Any<Number>}, {"message": "notification 21", "notificationId": 21, "timestamp": Any<Number>}, {"message": "notification 20", "notificationId": 20, "timestamp": Any<Number>}, {"message": "notification 19", "notificationId": 19, "timestamp": Any<Number>}, {"message": "notification 18", "notificationId": 18, "timestamp": Any<Number>}, {"message": "notification 17", "notificationId": 17, "timestamp": Any<Number>}, {"message": "notification 16", "notificationId": 16, "timestamp": Any<Number>}, …]
    Received: undefined

      137 |       .map((message, i) => ({ notificationId: numNotifications - i, message, timestamp: expect.any(Number) }));
      138 |
    > 139 |     expect(notifications).toEqual(expectedNotifications);
          |                           ^
      140 |   });
      141 | });
      142 |

      at Object.<anonymous> (src/standup.test.ts:139:27)

  ● testing standupSendV1 › should send a message to a running standup

    expect(received).toEqual(expected) // deep equality

    Expected: {}
    Received: 400

      160 |       requeststandupStart(user1.token, channel1, 60);
      161 |       const result = requeststandupSend(user1.token, channel1, 'Test message');
    > 162 |       expect(result).toEqual({});
          |                      ^
      163 |     });
      164 |
      165 |     test('channelId is invalid', () => {

      at Object.<anonymous> (src/standup.test.ts:162:22)

  ● testing standupSendV1 › user is not a member of the channel

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 400

      181 |     test('user is not a member of the channel', () => {
      182 |       const result = requeststandupSend(user2.token, channel1, 'test message');
    > 183 |       expect(result).toBe(403);
          |                      ^
      184 |     });
      185 | });
      186 |

      at Object.<anonymous> (src/standup.test.ts:183:22)

  ● testing standupStartV1 › testing if standup manages to start

    expect(received).toEqual(expected) // deep equality

    Expected: Any<Number>
    Received: undefined

      203 |     test('testing if standup manages to start', () => {
      204 |       const result = requeststandupStart(user1.token, channel1, 5);
    > 205 |       expect(result.timeFinish).toEqual(expect.any(Number));
          |                                 ^
      206 |       expect(result.timeFinish).toBeGreaterThan(Math.floor(Date.now() / 1000));
      207 |       expect(result.timeFinish).toBeLessThanOrEqual(Math.floor(Date.now() / 1000) + 5);
      208 |     });

      at Object.<anonymous> (src/standup.test.ts:205:33)

  ● testing standupStartV1 › testing if user is not a member of the channel

    expect(received).toBe(expected) // Object.is equality

    Expected: 403
    Received: 400

      228 |     test('testing if user is not a member of the channel', () => {
      229 |       const result = requeststandupStart(user2.token, channel1, 10);
    > 230 |       expect(result).toBe(403);
          |                      ^
      231 |     });
      232 | });
      233 |

      at Object.<anonymous> (src/standup.test.ts:230:22)

  ● testing standupActiveV1 › returns true for an active standup period

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      252 |       // requeststandupStart(user1.token, channel1, 60);
      253 |       const { isActive, timeFinish } = requeststandupActive(user1.token, channel1);
    > 254 |       expect(isActive).toBe(true);
          |                        ^
      255 |       expect(timeFinish).toBeDefined();
      256 |       const now = Date.now();
      257 |       const expectedFinishTime = Math.floor(now / 1000) + 60;

      at Object.<anonymous> (src/standup.test.ts:254:24)

  ● testing standupActiveV1 › returns false for an inactive standup period

    expect(received).toBe(expected) // Object.is equality

    Expected: false
    Received: undefined

      262 |     test('returns false for an inactive standup period', () => {
      263 |       const { isActive, timeFinish } = requeststandupActive(user1.token, channel1);
    > 264 |       expect(isActive).toBe(false);
          |                        ^
      265 |       expect(timeFinish).toBeNull();
      266 |     });
      267 |

      at Object.<anonymous> (src/standup.test.ts:264:24)

  ● testing standupActiveV1 › user is not a member of channel

    expect(received).toEqual(expected) // deep equality

    Expected: 403
    Received: 400

      273 |     test('user is not a member of channel', () => {
      274 |       const result = requeststandupActive(user2.token, channel1);
    > 275 |       expect(result).toEqual(403);
          |                      ^
      276 |     });
      277 | });
      278 |

      at Object.<anonymous> (src/standup.test.ts:275:22)

PASS src/tests/message.test.ts (8.083 s)
FAIL src/authTest.test.ts
  ● Testing authPasswordResetRequest › Testing if it will return nothing

    expect(received).toEqual(expected) // deep equality

    Expected: {}
    Received: 500

      135 |     const function1 = requestAuthPasswordResetRequest('keyon.vonrueden92@ethereal.email');
      136 |
    > 137 |     expect(function1).toEqual({});
          |                       ^
      138 |   });
      139 | });
      140 |

      at Object.<anonymous> (src/authTest.test.ts:137:23)

PASS src/tests/channelhttp.test.ts (5.58 s)
FAIL src/channels.test.ts
  ● Testing channelsCreateV1 › creates a new channel with valid parameters

    expect(received).toEqual(expected) // deep equality

    Expected: {"channelId": Any<Number>}
    Received: 400

      54 |     const result = requestChannelscreate(user1.token, name, isPublic);
      55 |
    > 56 |     expect((result)).toEqual({
         |                      ^
      57 |       channelId: expect.any(Number)
      58 |     });
      59 |   });

      at Object.<anonymous> (src/channels.test.ts:56:22)

  ● Testing channelsCreateV1 › returns error when authUserId is invalid

    expect(received).toEqual(expected) // deep equality

    Expected: {"error": "authUserId is invalid"}
    Received: 400

      65 |     const isPublic = true;
      66 |     const result = requestChannelscreate(authUserId, name, isPublic);
    > 67 |     expect((result)).toEqual({ error: 'authUserId is invalid' });
         |                      ^
      68 |   });
      69 |
      70 |   // name is too short:

      at Object.<anonymous> (src/channels.test.ts:67:22)

  ● Testing channelsListV1 › returns array of channels when authUserId is valid

    expect(received).toEqual(expected) // deep equality

    Expected: {"channels": [{"channelId": undefined, "name": "test"}]}
    Received: 400

       99 |     const channel1 = requestChannelscreate(user1.token, 'test', true).channelId;
      100 |     const result = requestChannelslist(user1.token);
    > 101 |     expect((result)).toEqual({ channels: [{ channelId: channel1, name: 'test' }] });
          |                      ^
      102 |   });
      103 |
      104 |   // authUserId is invalid:

      at Object.<anonymous> (src/channels.test.ts:101:22)

  ● Testing channelsListV1 › returns error when authUserId is invalid

    expect(received).toEqual(expected) // deep equality

    Expected: {"error": "authUserId is invalid"}
    Received: 400

      105 |   test('returns error when authUserId is invalid', () => {
      106 |     const result = requestChannelslist('-1');
    > 107 |     expect((result)).toEqual({ error: 'authUserId is invalid' });
          |                      ^
      108 |   });
      109 | });
      110 |

      at Object.<anonymous> (src/channels.test.ts:107:22)

  ● Testing channelsListAllV1 › testing if authUserId is not valid

    expect(received).toEqual(expected) // deep equality

    Expected: {"error": "authUserId is invalid"}
    Received: 400

      116 |   test('testing if authUserId is not valid', () => {
      117 |     const result = requestChannelsListAll('-1');
    > 118 |     expect(result).toEqual({ error: 'authUserId is invalid' });
          |                    ^
      119 |   });
      120 |   test('returns array of channels when authUserId is valid', () => {
      121 |     const authUserId1 = requestAuthRegister('fakemail@gmail.com', 'badpassword@123', 'fake', 'email');

      at Object.<anonymous> (src/channels.test.ts:118:20)

  ● Testing channelsListAllV1 › returns array of channels when authUserId is valid

    expect(received).toEqual(expected) // deep equality

    Expected: {"channels": [{"channelId": undefined, "name": "pass"}]}
    Received: 400

      123 |     const channel2 = requestChannelscreate(authUserId2.token, 'pass', true);
      124 |     const result = requestChannelsListAll(authUserId1.token);
    > 125 |     expect((result)).toEqual({ channels: [{ channelId: channel2.channelId, name: 'pass' }] });
          |                      ^
      126 |   });
      127 | });
      128 |

      at Object.<anonymous> (src/channels.test.ts:125:22)

FAIL src/usersTest.test.ts
  ● Testing authPasswordResetRequest › Testing if it will return nothing

    expect(received).toEqual(expected) // deep equality

    Expected: {}
    Received: 500

      135 |     const function1 = requestAuthPasswordResetRequest('keyon.vonrueden92@ethereal.email');
      136 |
    > 137 |     expect(function1).toEqual({});
          |                       ^
      138 |   });
      139 | });
      140 |

      at Object.<anonymous> (src/authTest.test.ts:137:23)

FAIL src/dm.test.ts
  ● Console

    console.log
      { authUserId: 0, token: '487788812' } { authUserId: 1, token: '99866957' } { authUserId: 2, token: '362682011' } { authUserId: 3, token: '504726978' }

      at Object.<anonymous> (src/dm.test.ts:48:13)

  ● /dm/create/v1 › Current test

    Server responded to http://127.0.0.1:48237/dm/create/v1 with status code 404:
    <!DOCTYPE html>
    <html lang="en">
    <head>
    <meta charset="utf-8">
    <title>Error</title>
    </head>
    <body>
    <pre>Cannot POST /dm/create/v1</pre>
    </body>
    </html>

      33 |   }
      34 |   const res = request(method, SERVER_URL + path, { qs, headers, json, timeout: 20000 });
    > 35 |   return JSON.parse(res.getBody('utf-8'));
         |                         ^
      36 | }
      37 |
      38 | // Tests

      at Response.Object.<anonymous>.Response.getBody (node_modules/http-response-object/lib/index.js:41:23)
      at requestHelper (src/dm.test.ts:35:25)
      at requestdmCreate (src/dm.test.ts:8:10)
      at Object.<anonymous> (src/dm.test.ts:50:20)

  ● /dm/create/v1 › Invalid Token

    Server responded to http://127.0.0.1:48237/dm/create/v1 with status code 404:
    <!DOCTYPE html>
    <html lang="en">
    <head>
    <meta charset="utf-8">
    <title>Error</title>
    </head>
    <body>
    <pre>Cannot POST /dm/create/v1</pre>
    </body>
    </html>

      33 |   }
      34 |   const res = request(method, SERVER_URL + path, { qs, headers, json, timeout: 20000 });
    > 35 |   return JSON.parse(res.getBody('utf-8'));
         |                         ^
      36 | }
      37 |
      38 | // Tests

      at Response.Object.<anonymous>.Response.getBody (node_modules/http-response-object/lib/index.js:41:23)
      at requestHelper (src/dm.test.ts:35:25)
      at requestdmCreate (src/dm.test.ts:8:10)
      at Object.<anonymous> (src/dm.test.ts:56:12)

  ● /dm/create/v1 › Duplicate User Ids

    Server responded to http://127.0.0.1:48237/dm/create/v1 with status code 404:
    <!DOCTYPE html>
    <html lang="en">
    <head>
    <meta charset="utf-8">
    <title>Error</title>
    </head>
    <body>
    <pre>Cannot POST /dm/create/v1</pre>
    </body>
    </html>

      33 |   }
      34 |   const res = request(method, SERVER_URL + path, { qs, headers, json, timeout: 20000 });
    > 35 |   return JSON.parse(res.getBody('utf-8'));
         |                         ^
      36 | }
      37 |
      38 | // Tests

      at Response.Object.<anonymous>.Response.getBody (node_modules/http-response-object/lib/index.js:41:23)
      at requestHelper (src/dm.test.ts:35:25)
      at requestdmCreate (src/dm.test.ts:8:10)
      at Object.<anonymous> (src/dm.test.ts:64:12)

FAIL src/adminTest.test.ts
  ● Testing authPasswordResetRequest › Testing if it will return nothing

    expect(received).toEqual(expected) // deep equality

    Expected: {}
    Received: 500

      135 |     const function1 = requestAuthPasswordResetRequest('keyon.vonrueden92@ethereal.email');
      136 |
    > 137 |     expect(function1).toEqual({});
          |                       ^
      138 |   });
      139 | });
      140 |

      at Object.<anonymous> (src/authTest.test.ts:137:23)

PASS src/echo.test.ts

Test Suites: 7 failed, 4 passed, 11 total
Tests:       38 failed, 138 passed, 176 total
Snapshots:   0 total
Time:        72.545 s
Ran all test suites.
npm notice 
npm notice New patch version of npm available! 9.6.3 -> 9.6.5
npm notice Changelog: <https://github.com/npm/cli/releases/tag/v9.6.5>
npm notice Run `npm install -g npm@9.6.5` to update!
npm notice 
